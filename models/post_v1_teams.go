// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostV1Teams Create a new team
//
// swagger:model postV1Teams
type PostV1Teams struct {

	// description
	Description string `json:"description,omitempty"`

	// memberships
	Memberships []*PostV1TeamsMembershipsItems0 `json:"memberships"`

	// ms teams channel
	MsTeamsChannel *PostV1TeamsMsTeamsChannel `json:"ms_teams_channel,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// The Slack channel ID associated with this team. This may be the reference in FireHydrant's system (i.e. UUID) or the ID value from Slack (e.g. C1234567890).
	//
	SlackChannelID string `json:"slack_channel_id,omitempty"`

	// slug
	Slug string `json:"slug,omitempty"`
}

// Validate validates this post v1 teams
func (m *PostV1Teams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMemberships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMsTeamsChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostV1Teams) validateMemberships(formats strfmt.Registry) error {
	if swag.IsZero(m.Memberships) { // not required
		return nil
	}

	for i := 0; i < len(m.Memberships); i++ {
		if swag.IsZero(m.Memberships[i]) { // not required
			continue
		}

		if m.Memberships[i] != nil {
			if err := m.Memberships[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberships" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("memberships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostV1Teams) validateMsTeamsChannel(formats strfmt.Registry) error {
	if swag.IsZero(m.MsTeamsChannel) { // not required
		return nil
	}

	if m.MsTeamsChannel != nil {
		if err := m.MsTeamsChannel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ms_teams_channel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ms_teams_channel")
			}
			return err
		}
	}

	return nil
}

func (m *PostV1Teams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post v1 teams based on the context it is used
func (m *PostV1Teams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMemberships(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMsTeamsChannel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostV1Teams) contextValidateMemberships(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Memberships); i++ {

		if m.Memberships[i] != nil {
			if err := m.Memberships[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberships" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("memberships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostV1Teams) contextValidateMsTeamsChannel(ctx context.Context, formats strfmt.Registry) error {

	if m.MsTeamsChannel != nil {
		if err := m.MsTeamsChannel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ms_teams_channel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ms_teams_channel")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostV1Teams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostV1Teams) UnmarshalBinary(b []byte) error {
	var res PostV1Teams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PostV1TeamsMembershipsItems0 post v1 teams memberships items0
//
// swagger:model PostV1TeamsMembershipsItems0
type PostV1TeamsMembershipsItems0 struct {

	// An incident role ID that this user will automatically assigned if this team is assigned to an incident
	IncidentRoleID string `json:"incident_role_id,omitempty"`

	// schedule id
	ScheduleID string `json:"schedule_id,omitempty"`

	// user id
	UserID string `json:"user_id,omitempty"`
}

// Validate validates this post v1 teams memberships items0
func (m *PostV1TeamsMembershipsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post v1 teams memberships items0 based on context it is used
func (m *PostV1TeamsMembershipsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PostV1TeamsMembershipsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostV1TeamsMembershipsItems0) UnmarshalBinary(b []byte) error {
	var res PostV1TeamsMembershipsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PostV1TeamsMsTeamsChannel MS Teams channel identity for channel associated with this team
//
// swagger:model PostV1TeamsMsTeamsChannel
type PostV1TeamsMsTeamsChannel struct {

	// channel id
	// Required: true
	ChannelID *string `json:"channel_id"`

	// ms team id
	// Required: true
	MsTeamID *string `json:"ms_team_id"`
}

// Validate validates this post v1 teams ms teams channel
func (m *PostV1TeamsMsTeamsChannel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMsTeamID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostV1TeamsMsTeamsChannel) validateChannelID(formats strfmt.Registry) error {

	if err := validate.Required("ms_teams_channel"+"."+"channel_id", "body", m.ChannelID); err != nil {
		return err
	}

	return nil
}

func (m *PostV1TeamsMsTeamsChannel) validateMsTeamID(formats strfmt.Registry) error {

	if err := validate.Required("ms_teams_channel"+"."+"ms_team_id", "body", m.MsTeamID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post v1 teams ms teams channel based on context it is used
func (m *PostV1TeamsMsTeamsChannel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PostV1TeamsMsTeamsChannel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostV1TeamsMsTeamsChannel) UnmarshalBinary(b []byte) error {
	var res PostV1TeamsMsTeamsChannel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
