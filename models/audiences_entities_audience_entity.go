// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AudiencesEntitiesAudienceEntity Audiences_Entities_AudienceEntity model
//
// swagger:model Audiences_Entities_AudienceEntity
type AudiencesEntitiesAudienceEntity struct {

	// When the audience was created
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Whether this is the organization's default audience
	Default bool `json:"default,omitempty"`

	// Description of the audience and its purpose (maximum 4000 characters)
	Description string `json:"description,omitempty"`

	// List of incident details for this audience
	Details []*AudiencesEntitiesDetailEntity `json:"details"`

	// When the audience was discarded (soft deleted)
	// Format: date-time
	DiscardedAt strfmt.DateTime `json:"discarded_at,omitempty"`

	// Unique identifier for the audience
	ID string `json:"id,omitempty"`

	// Name of the audience (maximum 255 characters)
	Name string `json:"name,omitempty"`

	// Slug of the audience, unique and autogenerated
	Slug string `json:"slug,omitempty"`

	// When the audience was last updated
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this audiences entities audience entity
func (m *AudiencesEntitiesAudienceEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscardedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AudiencesEntitiesAudienceEntity) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AudiencesEntitiesAudienceEntity) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.Details) { // not required
		return nil
	}

	for i := 0; i < len(m.Details); i++ {
		if swag.IsZero(m.Details[i]) { // not required
			continue
		}

		if m.Details[i] != nil {
			if err := m.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AudiencesEntitiesAudienceEntity) validateDiscardedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.DiscardedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("discarded_at", "body", "date-time", m.DiscardedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AudiencesEntitiesAudienceEntity) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this audiences entities audience entity based on the context it is used
func (m *AudiencesEntitiesAudienceEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AudiencesEntitiesAudienceEntity) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Details); i++ {

		if m.Details[i] != nil {
			if err := m.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AudiencesEntitiesAudienceEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AudiencesEntitiesAudienceEntity) UnmarshalBinary(b []byte) error {
	var res AudiencesEntitiesAudienceEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
