// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RunbooksExecutionStepExecutionEntity runbooks execution step execution entity
//
// swagger:model Runbooks_ExecutionStepExecutionEntity
type RunbooksExecutionStepExecutionEntity struct {

	// data
	Data interface{} `json:"data,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// performed at
	// Format: date-time
	PerformedAt strfmt.DateTime `json:"performed_at,omitempty"`

	// performed by
	PerformedBy *ActorEntity `json:"performed_by,omitempty"`

	// scheduled for
	// Format: date-time
	ScheduledFor strfmt.DateTime `json:"scheduled_for,omitempty"`

	// state
	// Enum: [initial pending scheduled started dismissed completed errored]
	State string `json:"state,omitempty"`

	// webhook delivery
	WebhookDelivery *RunbooksWebhookDeliveryEntity `json:"webhook_delivery,omitempty"`
}

// Validate validates this runbooks execution step execution entity
func (m *RunbooksExecutionStepExecutionEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePerformedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledFor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebhookDelivery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunbooksExecutionStepExecutionEntity) validatePerformedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("performed_at", "body", "date-time", m.PerformedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RunbooksExecutionStepExecutionEntity) validatePerformedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformedBy) { // not required
		return nil
	}

	if m.PerformedBy != nil {
		if err := m.PerformedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("performed_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("performed_by")
			}
			return err
		}
	}

	return nil
}

func (m *RunbooksExecutionStepExecutionEntity) validateScheduledFor(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledFor) { // not required
		return nil
	}

	if err := validate.FormatOf("scheduled_for", "body", "date-time", m.ScheduledFor.String(), formats); err != nil {
		return err
	}

	return nil
}

var runbooksExecutionStepExecutionEntityTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["initial","pending","scheduled","started","dismissed","completed","errored"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		runbooksExecutionStepExecutionEntityTypeStatePropEnum = append(runbooksExecutionStepExecutionEntityTypeStatePropEnum, v)
	}
}

const (

	// RunbooksExecutionStepExecutionEntityStateInitial captures enum value "initial"
	RunbooksExecutionStepExecutionEntityStateInitial string = "initial"

	// RunbooksExecutionStepExecutionEntityStatePending captures enum value "pending"
	RunbooksExecutionStepExecutionEntityStatePending string = "pending"

	// RunbooksExecutionStepExecutionEntityStateScheduled captures enum value "scheduled"
	RunbooksExecutionStepExecutionEntityStateScheduled string = "scheduled"

	// RunbooksExecutionStepExecutionEntityStateStarted captures enum value "started"
	RunbooksExecutionStepExecutionEntityStateStarted string = "started"

	// RunbooksExecutionStepExecutionEntityStateDismissed captures enum value "dismissed"
	RunbooksExecutionStepExecutionEntityStateDismissed string = "dismissed"

	// RunbooksExecutionStepExecutionEntityStateCompleted captures enum value "completed"
	RunbooksExecutionStepExecutionEntityStateCompleted string = "completed"

	// RunbooksExecutionStepExecutionEntityStateErrored captures enum value "errored"
	RunbooksExecutionStepExecutionEntityStateErrored string = "errored"
)

// prop value enum
func (m *RunbooksExecutionStepExecutionEntity) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, runbooksExecutionStepExecutionEntityTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RunbooksExecutionStepExecutionEntity) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *RunbooksExecutionStepExecutionEntity) validateWebhookDelivery(formats strfmt.Registry) error {
	if swag.IsZero(m.WebhookDelivery) { // not required
		return nil
	}

	if m.WebhookDelivery != nil {
		if err := m.WebhookDelivery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_delivery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webhook_delivery")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this runbooks execution step execution entity based on the context it is used
func (m *RunbooksExecutionStepExecutionEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePerformedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebhookDelivery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunbooksExecutionStepExecutionEntity) contextValidatePerformedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.PerformedBy != nil {

		if swag.IsZero(m.PerformedBy) { // not required
			return nil
		}

		if err := m.PerformedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("performed_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("performed_by")
			}
			return err
		}
	}

	return nil
}

func (m *RunbooksExecutionStepExecutionEntity) contextValidateWebhookDelivery(ctx context.Context, formats strfmt.Registry) error {

	if m.WebhookDelivery != nil {

		if swag.IsZero(m.WebhookDelivery) { // not required
			return nil
		}

		if err := m.WebhookDelivery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook_delivery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webhook_delivery")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RunbooksExecutionStepExecutionEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RunbooksExecutionStepExecutionEntity) UnmarshalBinary(b []byte) error {
	var res RunbooksExecutionStepExecutionEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
