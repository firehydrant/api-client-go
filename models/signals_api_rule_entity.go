// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SignalsAPIRuleEntity signals API rule entity
//
// swagger:model Signals_API_RuleEntity
type SignalsAPIRuleEntity struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// created by
	CreatedBy *AuthorEntity `json:"created_by,omitempty"`

	// expression
	Expression string `json:"expression,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// incident type
	IncidentType *SuccinctEntity `json:"incident_type,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// notification priority override
	// Enum: [HIGH MEDIUM LOW]
	NotificationPriorityOverride string `json:"notification_priority_override,omitempty"`

	// target
	Target *SignalsAPITargetEntity `json:"target,omitempty"`

	// team id
	TeamID string `json:"team_id,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this signals API rule entity
func (m *SignalsAPIRuleEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncidentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationPriorityOverride(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignalsAPIRuleEntity) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SignalsAPIRuleEntity) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *SignalsAPIRuleEntity) validateIncidentType(formats strfmt.Registry) error {
	if swag.IsZero(m.IncidentType) { // not required
		return nil
	}

	if m.IncidentType != nil {
		if err := m.IncidentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incident_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incident_type")
			}
			return err
		}
	}

	return nil
}

var signalsApiRuleEntityTypeNotificationPriorityOverridePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HIGH","MEDIUM","LOW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		signalsApiRuleEntityTypeNotificationPriorityOverridePropEnum = append(signalsApiRuleEntityTypeNotificationPriorityOverridePropEnum, v)
	}
}

const (

	// SignalsAPIRuleEntityNotificationPriorityOverrideHIGH captures enum value "HIGH"
	SignalsAPIRuleEntityNotificationPriorityOverrideHIGH string = "HIGH"

	// SignalsAPIRuleEntityNotificationPriorityOverrideMEDIUM captures enum value "MEDIUM"
	SignalsAPIRuleEntityNotificationPriorityOverrideMEDIUM string = "MEDIUM"

	// SignalsAPIRuleEntityNotificationPriorityOverrideLOW captures enum value "LOW"
	SignalsAPIRuleEntityNotificationPriorityOverrideLOW string = "LOW"
)

// prop value enum
func (m *SignalsAPIRuleEntity) validateNotificationPriorityOverrideEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, signalsApiRuleEntityTypeNotificationPriorityOverridePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SignalsAPIRuleEntity) validateNotificationPriorityOverride(formats strfmt.Registry) error {
	if swag.IsZero(m.NotificationPriorityOverride) { // not required
		return nil
	}

	// value enum
	if err := m.validateNotificationPriorityOverrideEnum("notification_priority_override", "body", m.NotificationPriorityOverride); err != nil {
		return err
	}

	return nil
}

func (m *SignalsAPIRuleEntity) validateTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

func (m *SignalsAPIRuleEntity) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this signals API rule entity based on the context it is used
func (m *SignalsAPIRuleEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncidentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignalsAPIRuleEntity) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {
		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *SignalsAPIRuleEntity) contextValidateIncidentType(ctx context.Context, formats strfmt.Registry) error {

	if m.IncidentType != nil {
		if err := m.IncidentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incident_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incident_type")
			}
			return err
		}
	}

	return nil
}

func (m *SignalsAPIRuleEntity) contextValidateTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.Target != nil {
		if err := m.Target.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SignalsAPIRuleEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SignalsAPIRuleEntity) UnmarshalBinary(b []byte) error {
	var res SignalsAPIRuleEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
