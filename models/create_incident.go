// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateIncident Create a new incident
//
// swagger:model create_incident
type CreateIncident struct {

	// List of alert IDs that this incident should be associated to
	AlertIds []string `json:"alert_ids"`

	// An array of custom fields to set on the incident.
	CustomFields []*CreateIncidentCustomFieldsItems0 `json:"custom_fields"`

	// customer impact summary
	CustomerImpactSummary string `json:"customer_impact_summary,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// external links
	ExternalLinks string `json:"external_links,omitempty"`

	// An array of impacted infrastructure
	Impacts []*CreateIncidentImpactsItems0 `json:"impacts"`

	// The ID of the incident type to use as a template when creating the incident. This will copy values from the incident type unless they are being overridden via parameters in this request.
	IncidentTypeID string `json:"incident_type_id,omitempty"`

	// Key:value pairs to track custom data for the incident
	Labels interface{} `json:"labels,omitempty"`

	// An array of milestones to set on an incident. This can be used to create an already-resolved incident.
	Milestones []*CreateIncidentMilestonesItems0 `json:"milestones"`

	// name
	// Required: true
	Name *string `json:"name"`

	// priority
	Priority string `json:"priority,omitempty"`

	// restricted
	Restricted bool `json:"restricted,omitempty"`

	// List of ids of Runbooks to attach to this incident. Foregoes any conditions these Runbooks may have guarding automatic attachment.
	RunbookIds []string `json:"runbook_ids"`

	// severity
	Severity string `json:"severity,omitempty"`

	// severity condition id
	SeverityConditionID string `json:"severity_condition_id,omitempty"`

	// severity impact id
	SeverityImpactID string `json:"severity_impact_id,omitempty"`

	// summary
	Summary string `json:"summary,omitempty"`

	// List of tags for the incident
	TagList []string `json:"tag_list"`

	// IDs of teams you wish to assign to this incident.
	TeamIds []string `json:"team_ids"`
}

// Validate validates this create incident
func (m *CreateIncident) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMilestones(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateIncident) validateCustomFields(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomFields) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomFields); i++ {
		if swag.IsZero(m.CustomFields[i]) { // not required
			continue
		}

		if m.CustomFields[i] != nil {
			if err := m.CustomFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("custom_fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateIncident) validateImpacts(formats strfmt.Registry) error {
	if swag.IsZero(m.Impacts) { // not required
		return nil
	}

	for i := 0; i < len(m.Impacts); i++ {
		if swag.IsZero(m.Impacts[i]) { // not required
			continue
		}

		if m.Impacts[i] != nil {
			if err := m.Impacts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("impacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("impacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateIncident) validateMilestones(formats strfmt.Registry) error {
	if swag.IsZero(m.Milestones) { // not required
		return nil
	}

	for i := 0; i < len(m.Milestones); i++ {
		if swag.IsZero(m.Milestones[i]) { // not required
			continue
		}

		if m.Milestones[i] != nil {
			if err := m.Milestones[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("milestones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("milestones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateIncident) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create incident based on the context it is used
func (m *CreateIncident) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImpacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMilestones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateIncident) contextValidateCustomFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomFields); i++ {

		if m.CustomFields[i] != nil {
			if err := m.CustomFields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("custom_fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateIncident) contextValidateImpacts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Impacts); i++ {

		if m.Impacts[i] != nil {
			if err := m.Impacts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("impacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("impacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateIncident) contextValidateMilestones(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Milestones); i++ {

		if m.Milestones[i] != nil {
			if err := m.Milestones[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("milestones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("milestones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateIncident) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateIncident) UnmarshalBinary(b []byte) error {
	var res CreateIncident
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateIncidentCustomFieldsItems0 create incident custom fields items0
//
// swagger:model CreateIncidentCustomFieldsItems0
type CreateIncidentCustomFieldsItems0 struct {

	// The ID of the custom field you wish to set.
	// Required: true
	FieldID *string `json:"field_id"`

	// The value you wish to set on the custom field if the type of the field accepts array values
	ValueArray []string `json:"value_array"`

	// The value you wish to set on the custom field if the type of the field accepts string values
	ValueString string `json:"value_string,omitempty"`
}

// Validate validates this create incident custom fields items0
func (m *CreateIncidentCustomFieldsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFieldID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateIncidentCustomFieldsItems0) validateFieldID(formats strfmt.Registry) error {

	if err := validate.Required("field_id", "body", m.FieldID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create incident custom fields items0 based on context it is used
func (m *CreateIncidentCustomFieldsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateIncidentCustomFieldsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateIncidentCustomFieldsItems0) UnmarshalBinary(b []byte) error {
	var res CreateIncidentCustomFieldsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateIncidentImpactsItems0 create incident impacts items0
//
// swagger:model CreateIncidentImpactsItems0
type CreateIncidentImpactsItems0 struct {

	// The ID of the impact condition. Find these at /v1/severity_matrix/conditions
	// Required: true
	ConditionID *string `json:"condition_id"`

	// The ID of the impacted infrastructure
	// Required: true
	ID *string `json:"id"`

	// The type of impacted infrastructure. One of: environment, functionality, or service
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this create incident impacts items0
func (m *CreateIncidentImpactsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateIncidentImpactsItems0) validateConditionID(formats strfmt.Registry) error {

	if err := validate.Required("condition_id", "body", m.ConditionID); err != nil {
		return err
	}

	return nil
}

func (m *CreateIncidentImpactsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *CreateIncidentImpactsItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create incident impacts items0 based on context it is used
func (m *CreateIncidentImpactsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateIncidentImpactsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateIncidentImpactsItems0) UnmarshalBinary(b []byte) error {
	var res CreateIncidentImpactsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateIncidentMilestonesItems0 create incident milestones items0
//
// swagger:model CreateIncidentMilestonesItems0
type CreateIncidentMilestonesItems0 struct {

	// An ISO8601 formatted string for when this milestone occurred. If you are removing a milestone, this field still needs to be set to some value
	// Required: true
	// Format: date-time
	OccurredAt *strfmt.DateTime `json:"occurred_at"`

	// The type/slug of the milestone. Must be one of the currently configured milestones.
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this create incident milestones items0
func (m *CreateIncidentMilestonesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOccurredAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateIncidentMilestonesItems0) validateOccurredAt(formats strfmt.Registry) error {

	if err := validate.Required("occurred_at", "body", m.OccurredAt); err != nil {
		return err
	}

	if err := validate.FormatOf("occurred_at", "body", "date-time", m.OccurredAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateIncidentMilestonesItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create incident milestones items0 based on context it is used
func (m *CreateIncidentMilestonesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateIncidentMilestonesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateIncidentMilestonesItems0) UnmarshalBinary(b []byte) error {
	var res CreateIncidentMilestonesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
