// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateRunbook Update a runbook and any attachment rules associated with it. This endpoint is used to configure nearly everything
// about a runbook, including but not limited to the steps, environments, attachment rules, and severities.
//
// swagger:model update_runbook
type UpdateRunbook struct {

	// attachment rule
	AttachmentRule *UpdateRunbookAttachmentRule `json:"attachment_rule,omitempty"`

	// Whether or not this runbook should be automatically attached to restricted incidents. Note that setting this to `true` will prevent it from being attached to public incidents, even manually. Defaults to `false`.
	AutoAttachToRestrictedIncidents bool `json:"auto_attach_to_restricted_incidents,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// environments
	Environments []*UpdateRunbookEnvironmentsItems0 `json:"environments"`

	// name
	Name string `json:"name,omitempty"`

	// owner
	Owner *UpdateRunbookOwner `json:"owner,omitempty"`

	// services
	Services []*UpdateRunbookServicesItems0 `json:"services"`

	// severities
	Severities []*UpdateRunbookSeveritiesItems0 `json:"severities"`

	// steps
	Steps []*UpdateRunbookStepsItems0 `json:"steps"`

	// summary
	Summary string `json:"summary,omitempty"`

	// Whether or not this runbook is a tutorial runbook
	Tutorial bool `json:"tutorial,omitempty"`
}

// Validate validates this update runbook
func (m *UpdateRunbook) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachmentRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSteps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateRunbook) validateAttachmentRule(formats strfmt.Registry) error {
	if swag.IsZero(m.AttachmentRule) { // not required
		return nil
	}

	if m.AttachmentRule != nil {
		if err := m.AttachmentRule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attachment_rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attachment_rule")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateRunbook) validateEnvironments(formats strfmt.Registry) error {
	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	for i := 0; i < len(m.Environments); i++ {
		if swag.IsZero(m.Environments[i]) { // not required
			continue
		}

		if m.Environments[i] != nil {
			if err := m.Environments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("environments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("environments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateRunbook) validateOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateRunbook) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateRunbook) validateSeverities(formats strfmt.Registry) error {
	if swag.IsZero(m.Severities) { // not required
		return nil
	}

	for i := 0; i < len(m.Severities); i++ {
		if swag.IsZero(m.Severities[i]) { // not required
			continue
		}

		if m.Severities[i] != nil {
			if err := m.Severities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("severities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("severities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateRunbook) validateSteps(formats strfmt.Registry) error {
	if swag.IsZero(m.Steps) { // not required
		return nil
	}

	for i := 0; i < len(m.Steps); i++ {
		if swag.IsZero(m.Steps[i]) { // not required
			continue
		}

		if m.Steps[i] != nil {
			if err := m.Steps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("steps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("steps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update runbook based on the context it is used
func (m *UpdateRunbook) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttachmentRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvironments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeverities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSteps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateRunbook) contextValidateAttachmentRule(ctx context.Context, formats strfmt.Registry) error {

	if m.AttachmentRule != nil {
		if err := m.AttachmentRule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attachment_rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attachment_rule")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateRunbook) contextValidateEnvironments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Environments); i++ {

		if m.Environments[i] != nil {
			if err := m.Environments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("environments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("environments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateRunbook) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.Owner != nil {
		if err := m.Owner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateRunbook) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Services); i++ {

		if m.Services[i] != nil {
			if err := m.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateRunbook) contextValidateSeverities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Severities); i++ {

		if m.Severities[i] != nil {
			if err := m.Severities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("severities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("severities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateRunbook) contextValidateSteps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Steps); i++ {

		if m.Steps[i] != nil {
			if err := m.Steps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("steps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("steps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateRunbook) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateRunbook) UnmarshalBinary(b []byte) error {
	var res UpdateRunbook
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateRunbookAttachmentRule update runbook attachment rule
//
// swagger:model UpdateRunbookAttachmentRule
type UpdateRunbookAttachmentRule struct {

	// The JSON logic for the attaching the runbook
	// Required: true
	Logic *string `json:"logic"`

	// The user data for the rule
	UserData string `json:"user_data,omitempty"`
}

// Validate validates this update runbook attachment rule
func (m *UpdateRunbookAttachmentRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateRunbookAttachmentRule) validateLogic(formats strfmt.Registry) error {

	if err := validate.Required("attachment_rule"+"."+"logic", "body", m.Logic); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update runbook attachment rule based on context it is used
func (m *UpdateRunbookAttachmentRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateRunbookAttachmentRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateRunbookAttachmentRule) UnmarshalBinary(b []byte) error {
	var res UpdateRunbookAttachmentRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateRunbookEnvironmentsItems0 update runbook environments items0
//
// swagger:model UpdateRunbookEnvironmentsItems0
type UpdateRunbookEnvironmentsItems0 struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this update runbook environments items0
func (m *UpdateRunbookEnvironmentsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update runbook environments items0 based on context it is used
func (m *UpdateRunbookEnvironmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateRunbookEnvironmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateRunbookEnvironmentsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateRunbookEnvironmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateRunbookOwner An object representing a Team that owns the runbook
//
// swagger:model UpdateRunbookOwner
type UpdateRunbookOwner struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this update runbook owner
func (m *UpdateRunbookOwner) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update runbook owner based on context it is used
func (m *UpdateRunbookOwner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateRunbookOwner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateRunbookOwner) UnmarshalBinary(b []byte) error {
	var res UpdateRunbookOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateRunbookServicesItems0 update runbook services items0
//
// swagger:model UpdateRunbookServicesItems0
type UpdateRunbookServicesItems0 struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this update runbook services items0
func (m *UpdateRunbookServicesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update runbook services items0 based on context it is used
func (m *UpdateRunbookServicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateRunbookServicesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateRunbookServicesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateRunbookServicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateRunbookSeveritiesItems0 update runbook severities items0
//
// swagger:model UpdateRunbookSeveritiesItems0
type UpdateRunbookSeveritiesItems0 struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this update runbook severities items0
func (m *UpdateRunbookSeveritiesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update runbook severities items0 based on context it is used
func (m *UpdateRunbookSeveritiesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateRunbookSeveritiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateRunbookSeveritiesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateRunbookSeveritiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateRunbookStepsItems0 update runbook steps items0
//
// swagger:model UpdateRunbookStepsItems0
type UpdateRunbookStepsItems0 struct {

	// ID of action to use for this step.
	// Required: true
	ActionID *string `json:"action_id"`

	// Name for step
	// Required: true
	Name *string `json:"name"`

	// rule
	Rule *UpdateRunbookStepsItems0Rule `json:"rule,omitempty"`

	// ID of step to be updated
	StepID string `json:"step_id,omitempty"`
}

// Validate validates this update runbook steps items0
func (m *UpdateRunbookStepsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateRunbookStepsItems0) validateActionID(formats strfmt.Registry) error {

	if err := validate.Required("action_id", "body", m.ActionID); err != nil {
		return err
	}

	return nil
}

func (m *UpdateRunbookStepsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *UpdateRunbookStepsItems0) validateRule(formats strfmt.Registry) error {
	if swag.IsZero(m.Rule) { // not required
		return nil
	}

	if m.Rule != nil {
		if err := m.Rule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update runbook steps items0 based on the context it is used
func (m *UpdateRunbookStepsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateRunbookStepsItems0) contextValidateRule(ctx context.Context, formats strfmt.Registry) error {

	if m.Rule != nil {
		if err := m.Rule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateRunbookStepsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateRunbookStepsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateRunbookStepsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateRunbookStepsItems0Rule update runbook steps items0 rule
//
// swagger:model UpdateRunbookStepsItems0Rule
type UpdateRunbookStepsItems0Rule struct {

	// The JSON logic for the rule
	// Required: true
	Logic *string `json:"logic"`

	// The user data for the rule
	UserData string `json:"user_data,omitempty"`
}

// Validate validates this update runbook steps items0 rule
func (m *UpdateRunbookStepsItems0Rule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateRunbookStepsItems0Rule) validateLogic(formats strfmt.Registry) error {

	if err := validate.Required("rule"+"."+"logic", "body", m.Logic); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update runbook steps items0 rule based on context it is used
func (m *UpdateRunbookStepsItems0Rule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateRunbookStepsItems0Rule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateRunbookStepsItems0Rule) UnmarshalBinary(b []byte) error {
	var res UpdateRunbookStepsItems0Rule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
