// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchV1IntegrationsStatuspageConnections Update the given Statuspage integration connection.
//
// swagger:model patchV1IntegrationsStatuspageConnections
type PatchV1IntegrationsStatuspageConnections struct {

	// conditions
	Conditions []*PatchV1IntegrationsStatuspageConnectionsConditionsItems0 `json:"conditions"`

	// page id
	PageID string `json:"page_id,omitempty"`

	// severities
	Severities []*PatchV1IntegrationsStatuspageConnectionsSeveritiesItems0 `json:"severities"`
}

// Validate validates this patch v1 integrations statuspage connections
func (m *PatchV1IntegrationsStatuspageConnections) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchV1IntegrationsStatuspageConnections) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PatchV1IntegrationsStatuspageConnections) validateSeverities(formats strfmt.Registry) error {
	if swag.IsZero(m.Severities) { // not required
		return nil
	}

	for i := 0; i < len(m.Severities); i++ {
		if swag.IsZero(m.Severities[i]) { // not required
			continue
		}

		if m.Severities[i] != nil {
			if err := m.Severities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("severities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("severities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this patch v1 integrations statuspage connections based on the context it is used
func (m *PatchV1IntegrationsStatuspageConnections) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeverities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchV1IntegrationsStatuspageConnections) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PatchV1IntegrationsStatuspageConnections) contextValidateSeverities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Severities); i++ {

		if m.Severities[i] != nil {
			if err := m.Severities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("severities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("severities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchV1IntegrationsStatuspageConnections) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchV1IntegrationsStatuspageConnections) UnmarshalBinary(b []byte) error {
	var res PatchV1IntegrationsStatuspageConnections
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchV1IntegrationsStatuspageConnectionsConditionsItems0 patch v1 integrations statuspage connections conditions items0
//
// swagger:model PatchV1IntegrationsStatuspageConnectionsConditionsItems0
type PatchV1IntegrationsStatuspageConnectionsConditionsItems0 struct {

	// FireHydrant condition id
	// Required: true
	ConditionID *string `json:"condition_id"`

	// Statuspage.io condition name
	// Required: true
	StatuspageioCondition *string `json:"statuspageio_condition"`
}

// Validate validates this patch v1 integrations statuspage connections conditions items0
func (m *PatchV1IntegrationsStatuspageConnectionsConditionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatuspageioCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchV1IntegrationsStatuspageConnectionsConditionsItems0) validateConditionID(formats strfmt.Registry) error {

	if err := validate.Required("condition_id", "body", m.ConditionID); err != nil {
		return err
	}

	return nil
}

func (m *PatchV1IntegrationsStatuspageConnectionsConditionsItems0) validateStatuspageioCondition(formats strfmt.Registry) error {

	if err := validate.Required("statuspageio_condition", "body", m.StatuspageioCondition); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch v1 integrations statuspage connections conditions items0 based on context it is used
func (m *PatchV1IntegrationsStatuspageConnectionsConditionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchV1IntegrationsStatuspageConnectionsConditionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchV1IntegrationsStatuspageConnectionsConditionsItems0) UnmarshalBinary(b []byte) error {
	var res PatchV1IntegrationsStatuspageConnectionsConditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchV1IntegrationsStatuspageConnectionsSeveritiesItems0 patch v1 integrations statuspage connections severities items0
//
// swagger:model PatchV1IntegrationsStatuspageConnectionsSeveritiesItems0
type PatchV1IntegrationsStatuspageConnectionsSeveritiesItems0 struct {

	// Statuspage.io severity name
	// Required: true
	RemoteStatus *string `json:"remote_status"`

	// FireHydrant severity slug
	// Required: true
	SeveritySlug *string `json:"severity_slug"`
}

// Validate validates this patch v1 integrations statuspage connections severities items0
func (m *PatchV1IntegrationsStatuspageConnectionsSeveritiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRemoteStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeveritySlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchV1IntegrationsStatuspageConnectionsSeveritiesItems0) validateRemoteStatus(formats strfmt.Registry) error {

	if err := validate.Required("remote_status", "body", m.RemoteStatus); err != nil {
		return err
	}

	return nil
}

func (m *PatchV1IntegrationsStatuspageConnectionsSeveritiesItems0) validateSeveritySlug(formats strfmt.Registry) error {

	if err := validate.Required("severity_slug", "body", m.SeveritySlug); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch v1 integrations statuspage connections severities items0 based on context it is used
func (m *PatchV1IntegrationsStatuspageConnectionsSeveritiesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchV1IntegrationsStatuspageConnectionsSeveritiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchV1IntegrationsStatuspageConnectionsSeveritiesItems0) UnmarshalBinary(b []byte) error {
	var res PatchV1IntegrationsStatuspageConnectionsSeveritiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
