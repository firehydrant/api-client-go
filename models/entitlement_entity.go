// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EntitlementEntity entitlement entity
//
// swagger:model EntitlementEntity
type EntitlementEntity struct {

	// available
	Available bool `json:"available,omitempty"`

	// current count
	CurrentCount int32 `json:"current_count,omitempty"`

	// errors
	Errors []string `json:"errors"`

	// exists
	Exists bool `json:"exists,omitempty"`

	// maximum
	Maximum int32 `json:"maximum,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// slug
	Slug string `json:"slug,omitempty"`

	// tier
	// Enum: [free essentials enterprise signals_only]
	Tier string `json:"tier,omitempty"`
}

// Validate validates this entitlement entity
func (m *EntitlementEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var entitlementEntityTypeTierPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["free","essentials","enterprise","signals_only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		entitlementEntityTypeTierPropEnum = append(entitlementEntityTypeTierPropEnum, v)
	}
}

const (

	// EntitlementEntityTierFree captures enum value "free"
	EntitlementEntityTierFree string = "free"

	// EntitlementEntityTierEssentials captures enum value "essentials"
	EntitlementEntityTierEssentials string = "essentials"

	// EntitlementEntityTierEnterprise captures enum value "enterprise"
	EntitlementEntityTierEnterprise string = "enterprise"

	// EntitlementEntityTierSignalsOnly captures enum value "signals_only"
	EntitlementEntityTierSignalsOnly string = "signals_only"
)

// prop value enum
func (m *EntitlementEntity) validateTierEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, entitlementEntityTypeTierPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EntitlementEntity) validateTier(formats strfmt.Registry) error {
	if swag.IsZero(m.Tier) { // not required
		return nil
	}

	// value enum
	if err := m.validateTierEnum("tier", "body", m.Tier); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this entitlement entity based on context it is used
func (m *EntitlementEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EntitlementEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntitlementEntity) UnmarshalBinary(b []byte) error {
	var res EntitlementEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
