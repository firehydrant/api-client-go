// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateTeamOnCallSchedule Create a Signals on-call schedule for a team.
//
// swagger:model create_team_on_call_schedule
type CreateTeamOnCallSchedule struct {

	// A hex color code that will be used to represent the schedule in the UI and iCal subscriptions.
	Color string `json:"color,omitempty"`

	// A detailed description of the on-call schedule.
	Description string `json:"description,omitempty"`

	// This parameter is deprecated; use `members` instead.
	MemberIds []string `json:"member_ids"`

	// An ordered list of objects that specify members of the on-call schedule's rotation.
	Members []*CreateTeamOnCallScheduleMembersItems0 `json:"members"`

	// The on-call schedule's name.
	// Required: true
	Name *string `json:"name"`

	// A list of objects that restrict the schedule to speccific on-call periods.
	Restrictions []*CreateTeamOnCallScheduleRestrictionsItems0 `json:"restrictions"`

	// The ID of a Slack user group for syncing purposes. If provided, we will automatically sync whoever is on call to the user group in Slack.
	SlackUserGroupID string `json:"slack_user_group_id,omitempty"`

	// An ISO8601 time string specifying when the schedule's first shift should start. This value is only used if the schedule's strategy is "custom".
	StartTime string `json:"start_time,omitempty"`

	// strategy
	// Required: true
	Strategy *CreateTeamOnCallScheduleStrategy `json:"strategy"`

	// The time zone in which the on-call schedule operates. This value must be a valid IANA time zone name.
	// Required: true
	TimeZone *string `json:"time_zone"`
}

// Validate validates this create team on call schedule
func (m *CreateTeamOnCallSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestrictions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateTeamOnCallSchedule) validateMembers(formats strfmt.Registry) error {
	if swag.IsZero(m.Members) { // not required
		return nil
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateTeamOnCallSchedule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreateTeamOnCallSchedule) validateRestrictions(formats strfmt.Registry) error {
	if swag.IsZero(m.Restrictions) { // not required
		return nil
	}

	for i := 0; i < len(m.Restrictions); i++ {
		if swag.IsZero(m.Restrictions[i]) { // not required
			continue
		}

		if m.Restrictions[i] != nil {
			if err := m.Restrictions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restrictions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restrictions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateTeamOnCallSchedule) validateStrategy(formats strfmt.Registry) error {

	if err := validate.Required("strategy", "body", m.Strategy); err != nil {
		return err
	}

	if m.Strategy != nil {
		if err := m.Strategy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("strategy")
			}
			return err
		}
	}

	return nil
}

func (m *CreateTeamOnCallSchedule) validateTimeZone(formats strfmt.Registry) error {

	if err := validate.Required("time_zone", "body", m.TimeZone); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create team on call schedule based on the context it is used
func (m *CreateTeamOnCallSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMembers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestrictions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStrategy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateTeamOnCallSchedule) contextValidateMembers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Members); i++ {

		if m.Members[i] != nil {
			if err := m.Members[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateTeamOnCallSchedule) contextValidateRestrictions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Restrictions); i++ {

		if m.Restrictions[i] != nil {
			if err := m.Restrictions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restrictions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restrictions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateTeamOnCallSchedule) contextValidateStrategy(ctx context.Context, formats strfmt.Registry) error {

	if m.Strategy != nil {
		if err := m.Strategy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("strategy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateTeamOnCallSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateTeamOnCallSchedule) UnmarshalBinary(b []byte) error {
	var res CreateTeamOnCallSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateTeamOnCallScheduleMembersItems0 create team on call schedule members items0
//
// swagger:model CreateTeamOnCallScheduleMembersItems0
type CreateTeamOnCallScheduleMembersItems0 struct {

	// The ID of a user who should be added to the schedule's rotation. You can add a user to the schedule
	// multiple times to construct more complex rotations, and you can specify a `null` user ID to create
	// unassigned slots in the rotation.
	//
	UserID string `json:"user_id,omitempty"`
}

// Validate validates this create team on call schedule members items0
func (m *CreateTeamOnCallScheduleMembersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create team on call schedule members items0 based on context it is used
func (m *CreateTeamOnCallScheduleMembersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateTeamOnCallScheduleMembersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateTeamOnCallScheduleMembersItems0) UnmarshalBinary(b []byte) error {
	var res CreateTeamOnCallScheduleMembersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateTeamOnCallScheduleRestrictionsItems0 create team on call schedule restrictions items0
//
// swagger:model CreateTeamOnCallScheduleRestrictionsItems0
type CreateTeamOnCallScheduleRestrictionsItems0 struct {

	// The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
	// Required: true
	// Enum: [monday tuesday wednesday thursday friday saturday sunday]
	EndDay *string `json:"end_day"`

	// An ISO8601 time string specifying when the restriction should end.
	// Required: true
	EndTime *string `json:"end_time"`

	// The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
	// Required: true
	// Enum: [monday tuesday wednesday thursday friday saturday sunday]
	StartDay *string `json:"start_day"`

	// An ISO8601 time string specifying when the restriction should start.
	// Required: true
	StartTime *string `json:"start_time"`
}

// Validate validates this create team on call schedule restrictions items0
func (m *CreateTeamOnCallScheduleRestrictionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createTeamOnCallScheduleRestrictionsItems0TypeEndDayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["monday","tuesday","wednesday","thursday","friday","saturday","sunday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createTeamOnCallScheduleRestrictionsItems0TypeEndDayPropEnum = append(createTeamOnCallScheduleRestrictionsItems0TypeEndDayPropEnum, v)
	}
}

const (

	// CreateTeamOnCallScheduleRestrictionsItems0EndDayMonday captures enum value "monday"
	CreateTeamOnCallScheduleRestrictionsItems0EndDayMonday string = "monday"

	// CreateTeamOnCallScheduleRestrictionsItems0EndDayTuesday captures enum value "tuesday"
	CreateTeamOnCallScheduleRestrictionsItems0EndDayTuesday string = "tuesday"

	// CreateTeamOnCallScheduleRestrictionsItems0EndDayWednesday captures enum value "wednesday"
	CreateTeamOnCallScheduleRestrictionsItems0EndDayWednesday string = "wednesday"

	// CreateTeamOnCallScheduleRestrictionsItems0EndDayThursday captures enum value "thursday"
	CreateTeamOnCallScheduleRestrictionsItems0EndDayThursday string = "thursday"

	// CreateTeamOnCallScheduleRestrictionsItems0EndDayFriday captures enum value "friday"
	CreateTeamOnCallScheduleRestrictionsItems0EndDayFriday string = "friday"

	// CreateTeamOnCallScheduleRestrictionsItems0EndDaySaturday captures enum value "saturday"
	CreateTeamOnCallScheduleRestrictionsItems0EndDaySaturday string = "saturday"

	// CreateTeamOnCallScheduleRestrictionsItems0EndDaySunday captures enum value "sunday"
	CreateTeamOnCallScheduleRestrictionsItems0EndDaySunday string = "sunday"
)

// prop value enum
func (m *CreateTeamOnCallScheduleRestrictionsItems0) validateEndDayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createTeamOnCallScheduleRestrictionsItems0TypeEndDayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateTeamOnCallScheduleRestrictionsItems0) validateEndDay(formats strfmt.Registry) error {

	if err := validate.Required("end_day", "body", m.EndDay); err != nil {
		return err
	}

	// value enum
	if err := m.validateEndDayEnum("end_day", "body", *m.EndDay); err != nil {
		return err
	}

	return nil
}

func (m *CreateTeamOnCallScheduleRestrictionsItems0) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("end_time", "body", m.EndTime); err != nil {
		return err
	}

	return nil
}

var createTeamOnCallScheduleRestrictionsItems0TypeStartDayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["monday","tuesday","wednesday","thursday","friday","saturday","sunday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createTeamOnCallScheduleRestrictionsItems0TypeStartDayPropEnum = append(createTeamOnCallScheduleRestrictionsItems0TypeStartDayPropEnum, v)
	}
}

const (

	// CreateTeamOnCallScheduleRestrictionsItems0StartDayMonday captures enum value "monday"
	CreateTeamOnCallScheduleRestrictionsItems0StartDayMonday string = "monday"

	// CreateTeamOnCallScheduleRestrictionsItems0StartDayTuesday captures enum value "tuesday"
	CreateTeamOnCallScheduleRestrictionsItems0StartDayTuesday string = "tuesday"

	// CreateTeamOnCallScheduleRestrictionsItems0StartDayWednesday captures enum value "wednesday"
	CreateTeamOnCallScheduleRestrictionsItems0StartDayWednesday string = "wednesday"

	// CreateTeamOnCallScheduleRestrictionsItems0StartDayThursday captures enum value "thursday"
	CreateTeamOnCallScheduleRestrictionsItems0StartDayThursday string = "thursday"

	// CreateTeamOnCallScheduleRestrictionsItems0StartDayFriday captures enum value "friday"
	CreateTeamOnCallScheduleRestrictionsItems0StartDayFriday string = "friday"

	// CreateTeamOnCallScheduleRestrictionsItems0StartDaySaturday captures enum value "saturday"
	CreateTeamOnCallScheduleRestrictionsItems0StartDaySaturday string = "saturday"

	// CreateTeamOnCallScheduleRestrictionsItems0StartDaySunday captures enum value "sunday"
	CreateTeamOnCallScheduleRestrictionsItems0StartDaySunday string = "sunday"
)

// prop value enum
func (m *CreateTeamOnCallScheduleRestrictionsItems0) validateStartDayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createTeamOnCallScheduleRestrictionsItems0TypeStartDayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateTeamOnCallScheduleRestrictionsItems0) validateStartDay(formats strfmt.Registry) error {

	if err := validate.Required("start_day", "body", m.StartDay); err != nil {
		return err
	}

	// value enum
	if err := m.validateStartDayEnum("start_day", "body", *m.StartDay); err != nil {
		return err
	}

	return nil
}

func (m *CreateTeamOnCallScheduleRestrictionsItems0) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create team on call schedule restrictions items0 based on context it is used
func (m *CreateTeamOnCallScheduleRestrictionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateTeamOnCallScheduleRestrictionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateTeamOnCallScheduleRestrictionsItems0) UnmarshalBinary(b []byte) error {
	var res CreateTeamOnCallScheduleRestrictionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateTeamOnCallScheduleStrategy An object that specifies how the schedule's on-call shifts should be generated.
//
// swagger:model CreateTeamOnCallScheduleStrategy
type CreateTeamOnCallScheduleStrategy struct {

	// The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
	// Enum: [monday tuesday wednesday thursday friday saturday sunday]
	HandoffDay string `json:"handoff_day,omitempty"`

	// An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
	HandoffTime string `json:"handoff_time,omitempty"`

	// An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
	ShiftDuration string `json:"shift_duration,omitempty"`

	// The type of strategy. Must be one of "daily", "weekly", or "custom".
	// Required: true
	// Enum: [daily weekly custom]
	Type *string `json:"type"`
}

// Validate validates this create team on call schedule strategy
func (m *CreateTeamOnCallScheduleStrategy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHandoffDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createTeamOnCallScheduleStrategyTypeHandoffDayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["monday","tuesday","wednesday","thursday","friday","saturday","sunday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createTeamOnCallScheduleStrategyTypeHandoffDayPropEnum = append(createTeamOnCallScheduleStrategyTypeHandoffDayPropEnum, v)
	}
}

const (

	// CreateTeamOnCallScheduleStrategyHandoffDayMonday captures enum value "monday"
	CreateTeamOnCallScheduleStrategyHandoffDayMonday string = "monday"

	// CreateTeamOnCallScheduleStrategyHandoffDayTuesday captures enum value "tuesday"
	CreateTeamOnCallScheduleStrategyHandoffDayTuesday string = "tuesday"

	// CreateTeamOnCallScheduleStrategyHandoffDayWednesday captures enum value "wednesday"
	CreateTeamOnCallScheduleStrategyHandoffDayWednesday string = "wednesday"

	// CreateTeamOnCallScheduleStrategyHandoffDayThursday captures enum value "thursday"
	CreateTeamOnCallScheduleStrategyHandoffDayThursday string = "thursday"

	// CreateTeamOnCallScheduleStrategyHandoffDayFriday captures enum value "friday"
	CreateTeamOnCallScheduleStrategyHandoffDayFriday string = "friday"

	// CreateTeamOnCallScheduleStrategyHandoffDaySaturday captures enum value "saturday"
	CreateTeamOnCallScheduleStrategyHandoffDaySaturday string = "saturday"

	// CreateTeamOnCallScheduleStrategyHandoffDaySunday captures enum value "sunday"
	CreateTeamOnCallScheduleStrategyHandoffDaySunday string = "sunday"
)

// prop value enum
func (m *CreateTeamOnCallScheduleStrategy) validateHandoffDayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createTeamOnCallScheduleStrategyTypeHandoffDayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateTeamOnCallScheduleStrategy) validateHandoffDay(formats strfmt.Registry) error {
	if swag.IsZero(m.HandoffDay) { // not required
		return nil
	}

	// value enum
	if err := m.validateHandoffDayEnum("strategy"+"."+"handoff_day", "body", m.HandoffDay); err != nil {
		return err
	}

	return nil
}

var createTeamOnCallScheduleStrategyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["daily","weekly","custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createTeamOnCallScheduleStrategyTypeTypePropEnum = append(createTeamOnCallScheduleStrategyTypeTypePropEnum, v)
	}
}

const (

	// CreateTeamOnCallScheduleStrategyTypeDaily captures enum value "daily"
	CreateTeamOnCallScheduleStrategyTypeDaily string = "daily"

	// CreateTeamOnCallScheduleStrategyTypeWeekly captures enum value "weekly"
	CreateTeamOnCallScheduleStrategyTypeWeekly string = "weekly"

	// CreateTeamOnCallScheduleStrategyTypeCustom captures enum value "custom"
	CreateTeamOnCallScheduleStrategyTypeCustom string = "custom"
)

// prop value enum
func (m *CreateTeamOnCallScheduleStrategy) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createTeamOnCallScheduleStrategyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateTeamOnCallScheduleStrategy) validateType(formats strfmt.Registry) error {

	if err := validate.Required("strategy"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("strategy"+"."+"type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create team on call schedule strategy based on context it is used
func (m *CreateTeamOnCallScheduleStrategy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateTeamOnCallScheduleStrategy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateTeamOnCallScheduleStrategy) UnmarshalBinary(b []byte) error {
	var res CreateTeamOnCallScheduleStrategy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
