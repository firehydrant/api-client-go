// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IncidentsImpactEntity incidents impact entity
//
// swagger:model Incidents_ImpactEntity
type IncidentsImpactEntity struct {

	// condition
	Condition *SeverityMatrixConditionEntity `json:"condition,omitempty"`

	// conversations
	Conversations []*ConversationsAPIEntitiesReference `json:"conversations"`

	// id
	ID string `json:"id,omitempty"`

	// impact
	Impact *SuccinctEntity `json:"impact,omitempty"`

	// type
	// Enum: [customer environment functionality service]
	Type string `json:"type,omitempty"`
}

// Validate validates this incidents impact entity
func (m *IncidentsImpactEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IncidentsImpactEntity) validateCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.Condition) { // not required
		return nil
	}

	if m.Condition != nil {
		if err := m.Condition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("condition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("condition")
			}
			return err
		}
	}

	return nil
}

func (m *IncidentsImpactEntity) validateConversations(formats strfmt.Registry) error {
	if swag.IsZero(m.Conversations) { // not required
		return nil
	}

	for i := 0; i < len(m.Conversations); i++ {
		if swag.IsZero(m.Conversations[i]) { // not required
			continue
		}

		if m.Conversations[i] != nil {
			if err := m.Conversations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conversations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conversations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentsImpactEntity) validateImpact(formats strfmt.Registry) error {
	if swag.IsZero(m.Impact) { // not required
		return nil
	}

	if m.Impact != nil {
		if err := m.Impact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("impact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("impact")
			}
			return err
		}
	}

	return nil
}

var incidentsImpactEntityTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["customer","environment","functionality","service"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		incidentsImpactEntityTypeTypePropEnum = append(incidentsImpactEntityTypeTypePropEnum, v)
	}
}

const (

	// IncidentsImpactEntityTypeCustomer captures enum value "customer"
	IncidentsImpactEntityTypeCustomer string = "customer"

	// IncidentsImpactEntityTypeEnvironment captures enum value "environment"
	IncidentsImpactEntityTypeEnvironment string = "environment"

	// IncidentsImpactEntityTypeFunctionality captures enum value "functionality"
	IncidentsImpactEntityTypeFunctionality string = "functionality"

	// IncidentsImpactEntityTypeService captures enum value "service"
	IncidentsImpactEntityTypeService string = "service"
)

// prop value enum
func (m *IncidentsImpactEntity) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, incidentsImpactEntityTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IncidentsImpactEntity) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this incidents impact entity based on the context it is used
func (m *IncidentsImpactEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConversations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImpact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IncidentsImpactEntity) contextValidateCondition(ctx context.Context, formats strfmt.Registry) error {

	if m.Condition != nil {
		if err := m.Condition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("condition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("condition")
			}
			return err
		}
	}

	return nil
}

func (m *IncidentsImpactEntity) contextValidateConversations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conversations); i++ {

		if m.Conversations[i] != nil {
			if err := m.Conversations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conversations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conversations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentsImpactEntity) contextValidateImpact(ctx context.Context, formats strfmt.Registry) error {

	if m.Impact != nil {
		if err := m.Impact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("impact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("impact")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IncidentsImpactEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IncidentsImpactEntity) UnmarshalBinary(b []byte) error {
	var res IncidentsImpactEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
