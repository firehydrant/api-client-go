// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateOnCallShift Create a Signals on-call shift in a schedule.
//
// swagger:model create_on_call_shift
type CreateOnCallShift struct {

	// The end time of the shift in ISO8601 format.
	// Required: true
	EndTime *string `json:"end_time"`

	// The start time of the shift in ISO8601 format.
	// Required: true
	StartTime *string `json:"start_time"`

	// The ID of the user who is on-call for the shift. If not provided, the shift will be unassigned.
	UserID string `json:"user_id,omitempty"`
}

// Validate validates this create on call shift
func (m *CreateOnCallShift) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateOnCallShift) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("end_time", "body", m.EndTime); err != nil {
		return err
	}

	return nil
}

func (m *CreateOnCallShift) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create on call shift based on context it is used
func (m *CreateOnCallShift) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateOnCallShift) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateOnCallShift) UnmarshalBinary(b []byte) error {
	var res CreateOnCallShift
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
