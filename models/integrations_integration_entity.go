// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntegrationsIntegrationEntity Integrations_IntegrationEntity model
//
// swagger:model Integrations_IntegrationEntity
type IntegrationsIntegrationEntity struct {

	// connections
	Connections *IntegrationsConnectionEntity `json:"connections,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// deprecated
	Deprecated bool `json:"deprecated,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// installed
	Installed bool `json:"installed,omitempty"`

	// logo
	Logo *IntegrationsIntegrationEntityLogoEntity `json:"logo,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// nat ip
	NatIP string `json:"nat_ip,omitempty"`

	// setup url
	SetupURL string `json:"setup_url,omitempty"`

	// slug
	Slug string `json:"slug,omitempty"`
}

// Validate validates this integrations integration entity
func (m *IntegrationsIntegrationEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationsIntegrationEntity) validateConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	if m.Connections != nil {
		if err := m.Connections.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connections")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connections")
			}
			return err
		}
	}

	return nil
}

func (m *IntegrationsIntegrationEntity) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationsIntegrationEntity) validateLogo(formats strfmt.Registry) error {
	if swag.IsZero(m.Logo) { // not required
		return nil
	}

	if m.Logo != nil {
		if err := m.Logo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this integrations integration entity based on the context it is used
func (m *IntegrationsIntegrationEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationsIntegrationEntity) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	if m.Connections != nil {

		if swag.IsZero(m.Connections) { // not required
			return nil
		}

		if err := m.Connections.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connections")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connections")
			}
			return err
		}
	}

	return nil
}

func (m *IntegrationsIntegrationEntity) contextValidateLogo(ctx context.Context, formats strfmt.Registry) error {

	if m.Logo != nil {

		if swag.IsZero(m.Logo) { // not required
			return nil
		}

		if err := m.Logo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationsIntegrationEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationsIntegrationEntity) UnmarshalBinary(b []byte) error {
	var res IntegrationsIntegrationEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
