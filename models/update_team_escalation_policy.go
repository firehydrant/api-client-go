// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateTeamEscalationPolicy Update a Signals escalation policy by ID
//
// swagger:model update_team_escalation_policy
type UpdateTeamEscalationPolicy struct {

	// Whether this escalation policy should be the default for the team.
	Default *bool `json:"default,omitempty"`

	// A detailed description of the escalation policy.
	Description string `json:"description,omitempty"`

	// handoff step
	HandoffStep *UpdateTeamEscalationPolicyHandoffStep `json:"handoff_step,omitempty"`

	// The escalation policy's name.
	Name string `json:"name,omitempty"`

	// prioritized settings
	PrioritizedSettings *UpdateTeamEscalationPolicyPrioritizedSettings `json:"prioritized_settings,omitempty"`

	// The number of times that the escalation policy should repeat before an alert is dropped.
	Repetitions int32 `json:"repetitions,omitempty"`

	// The strategy for handling steps in the escalation policy. Can be "static" or "dynamic_by_priority".
	StepStrategy string `json:"step_strategy,omitempty"`

	// A list of steps that define how an alert should escalate through the policy.
	Steps []*UpdateTeamEscalationPolicyStepsItems0 `json:"steps"`
}

// Validate validates this update team escalation policy
func (m *UpdateTeamEscalationPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHandoffStep(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrioritizedSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSteps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTeamEscalationPolicy) validateHandoffStep(formats strfmt.Registry) error {
	if swag.IsZero(m.HandoffStep) { // not required
		return nil
	}

	if m.HandoffStep != nil {
		if err := m.HandoffStep.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("handoff_step")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("handoff_step")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateTeamEscalationPolicy) validatePrioritizedSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.PrioritizedSettings) { // not required
		return nil
	}

	if m.PrioritizedSettings != nil {
		if err := m.PrioritizedSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prioritized_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prioritized_settings")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateTeamEscalationPolicy) validateSteps(formats strfmt.Registry) error {
	if swag.IsZero(m.Steps) { // not required
		return nil
	}

	for i := 0; i < len(m.Steps); i++ {
		if swag.IsZero(m.Steps[i]) { // not required
			continue
		}

		if m.Steps[i] != nil {
			if err := m.Steps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("steps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("steps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update team escalation policy based on the context it is used
func (m *UpdateTeamEscalationPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHandoffStep(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrioritizedSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSteps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTeamEscalationPolicy) contextValidateHandoffStep(ctx context.Context, formats strfmt.Registry) error {

	if m.HandoffStep != nil {
		if err := m.HandoffStep.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("handoff_step")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("handoff_step")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateTeamEscalationPolicy) contextValidatePrioritizedSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.PrioritizedSettings != nil {
		if err := m.PrioritizedSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prioritized_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prioritized_settings")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateTeamEscalationPolicy) contextValidateSteps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Steps); i++ {

		if m.Steps[i] != nil {
			if err := m.Steps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("steps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("steps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicy) UnmarshalBinary(b []byte) error {
	var res UpdateTeamEscalationPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateTeamEscalationPolicyHandoffStep A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.
//
// swagger:model UpdateTeamEscalationPolicyHandoffStep
type UpdateTeamEscalationPolicyHandoffStep struct {

	// The ID of the target to which the policy will hand off.
	// Required: true
	TargetID *string `json:"target_id"`

	// The type of target to which the policy will hand off.
	// Required: true
	// Enum: [EscalationPolicy Team]
	TargetType *string `json:"target_type"`
}

// Validate validates this update team escalation policy handoff step
func (m *UpdateTeamEscalationPolicyHandoffStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyHandoffStep) validateTargetID(formats strfmt.Registry) error {

	if err := validate.Required("handoff_step"+"."+"target_id", "body", m.TargetID); err != nil {
		return err
	}

	return nil
}

var updateTeamEscalationPolicyHandoffStepTypeTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EscalationPolicy","Team"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateTeamEscalationPolicyHandoffStepTypeTargetTypePropEnum = append(updateTeamEscalationPolicyHandoffStepTypeTargetTypePropEnum, v)
	}
}

const (

	// UpdateTeamEscalationPolicyHandoffStepTargetTypeEscalationPolicy captures enum value "EscalationPolicy"
	UpdateTeamEscalationPolicyHandoffStepTargetTypeEscalationPolicy string = "EscalationPolicy"

	// UpdateTeamEscalationPolicyHandoffStepTargetTypeTeam captures enum value "Team"
	UpdateTeamEscalationPolicyHandoffStepTargetTypeTeam string = "Team"
)

// prop value enum
func (m *UpdateTeamEscalationPolicyHandoffStep) validateTargetTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateTeamEscalationPolicyHandoffStepTypeTargetTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyHandoffStep) validateTargetType(formats strfmt.Registry) error {

	if err := validate.Required("handoff_step"+"."+"target_type", "body", m.TargetType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetTypeEnum("handoff_step"+"."+"target_type", "body", *m.TargetType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update team escalation policy handoff step based on context it is used
func (m *UpdateTeamEscalationPolicyHandoffStep) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyHandoffStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyHandoffStep) UnmarshalBinary(b []byte) error {
	var res UpdateTeamEscalationPolicyHandoffStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateTeamEscalationPolicyPrioritizedSettings Priority-specific settings for dynamic escalation policies
//
// swagger:model UpdateTeamEscalationPolicyPrioritizedSettings
type UpdateTeamEscalationPolicyPrioritizedSettings struct {

	// high
	High *UpdateTeamEscalationPolicyPrioritizedSettingsHigh `json:"high,omitempty"`

	// low
	Low *UpdateTeamEscalationPolicyPrioritizedSettingsLow `json:"low,omitempty"`

	// medium
	Medium *UpdateTeamEscalationPolicyPrioritizedSettingsMedium `json:"medium,omitempty"`
}

// Validate validates this update team escalation policy prioritized settings
func (m *UpdateTeamEscalationPolicyPrioritizedSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHigh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMedium(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettings) validateHigh(formats strfmt.Registry) error {
	if swag.IsZero(m.High) { // not required
		return nil
	}

	if m.High != nil {
		if err := m.High.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prioritized_settings" + "." + "high")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prioritized_settings" + "." + "high")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettings) validateLow(formats strfmt.Registry) error {
	if swag.IsZero(m.Low) { // not required
		return nil
	}

	if m.Low != nil {
		if err := m.Low.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prioritized_settings" + "." + "low")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prioritized_settings" + "." + "low")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettings) validateMedium(formats strfmt.Registry) error {
	if swag.IsZero(m.Medium) { // not required
		return nil
	}

	if m.Medium != nil {
		if err := m.Medium.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prioritized_settings" + "." + "medium")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prioritized_settings" + "." + "medium")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update team escalation policy prioritized settings based on the context it is used
func (m *UpdateTeamEscalationPolicyPrioritizedSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHigh(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMedium(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettings) contextValidateHigh(ctx context.Context, formats strfmt.Registry) error {

	if m.High != nil {
		if err := m.High.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prioritized_settings" + "." + "high")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prioritized_settings" + "." + "high")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettings) contextValidateLow(ctx context.Context, formats strfmt.Registry) error {

	if m.Low != nil {
		if err := m.Low.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prioritized_settings" + "." + "low")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prioritized_settings" + "." + "low")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettings) contextValidateMedium(ctx context.Context, formats strfmt.Registry) error {

	if m.Medium != nil {
		if err := m.Medium.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prioritized_settings" + "." + "medium")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prioritized_settings" + "." + "medium")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyPrioritizedSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyPrioritizedSettings) UnmarshalBinary(b []byte) error {
	var res UpdateTeamEscalationPolicyPrioritizedSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateTeamEscalationPolicyPrioritizedSettingsHigh Settings for HIGH priority alerts
//
// swagger:model UpdateTeamEscalationPolicyPrioritizedSettingsHigh
type UpdateTeamEscalationPolicyPrioritizedSettingsHigh struct {

	// handoff step
	HandoffStep *UpdateTeamEscalationPolicyPrioritizedSettingsHighHandoffStep `json:"handoff_step,omitempty"`

	// Number of repetitions for HIGH priority alerts
	Repetitions int32 `json:"repetitions,omitempty"`
}

// Validate validates this update team escalation policy prioritized settings high
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsHigh) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHandoffStep(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettingsHigh) validateHandoffStep(formats strfmt.Registry) error {
	if swag.IsZero(m.HandoffStep) { // not required
		return nil
	}

	if m.HandoffStep != nil {
		if err := m.HandoffStep.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prioritized_settings" + "." + "high" + "." + "handoff_step")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prioritized_settings" + "." + "high" + "." + "handoff_step")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update team escalation policy prioritized settings high based on the context it is used
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsHigh) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHandoffStep(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettingsHigh) contextValidateHandoffStep(ctx context.Context, formats strfmt.Registry) error {

	if m.HandoffStep != nil {
		if err := m.HandoffStep.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prioritized_settings" + "." + "high" + "." + "handoff_step")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prioritized_settings" + "." + "high" + "." + "handoff_step")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsHigh) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsHigh) UnmarshalBinary(b []byte) error {
	var res UpdateTeamEscalationPolicyPrioritizedSettingsHigh
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateTeamEscalationPolicyPrioritizedSettingsHighHandoffStep Handoff step for HIGH priority alerts
//
// swagger:model UpdateTeamEscalationPolicyPrioritizedSettingsHighHandoffStep
type UpdateTeamEscalationPolicyPrioritizedSettingsHighHandoffStep struct {

	// target id
	// Required: true
	TargetID *string `json:"target_id"`

	// target type
	// Required: true
	// Enum: [EscalationPolicy Team]
	TargetType *string `json:"target_type"`
}

// Validate validates this update team escalation policy prioritized settings high handoff step
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsHighHandoffStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettingsHighHandoffStep) validateTargetID(formats strfmt.Registry) error {

	if err := validate.Required("prioritized_settings"+"."+"high"+"."+"handoff_step"+"."+"target_id", "body", m.TargetID); err != nil {
		return err
	}

	return nil
}

var updateTeamEscalationPolicyPrioritizedSettingsHighHandoffStepTypeTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EscalationPolicy","Team"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateTeamEscalationPolicyPrioritizedSettingsHighHandoffStepTypeTargetTypePropEnum = append(updateTeamEscalationPolicyPrioritizedSettingsHighHandoffStepTypeTargetTypePropEnum, v)
	}
}

const (

	// UpdateTeamEscalationPolicyPrioritizedSettingsHighHandoffStepTargetTypeEscalationPolicy captures enum value "EscalationPolicy"
	UpdateTeamEscalationPolicyPrioritizedSettingsHighHandoffStepTargetTypeEscalationPolicy string = "EscalationPolicy"

	// UpdateTeamEscalationPolicyPrioritizedSettingsHighHandoffStepTargetTypeTeam captures enum value "Team"
	UpdateTeamEscalationPolicyPrioritizedSettingsHighHandoffStepTargetTypeTeam string = "Team"
)

// prop value enum
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsHighHandoffStep) validateTargetTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateTeamEscalationPolicyPrioritizedSettingsHighHandoffStepTypeTargetTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettingsHighHandoffStep) validateTargetType(formats strfmt.Registry) error {

	if err := validate.Required("prioritized_settings"+"."+"high"+"."+"handoff_step"+"."+"target_type", "body", m.TargetType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetTypeEnum("prioritized_settings"+"."+"high"+"."+"handoff_step"+"."+"target_type", "body", *m.TargetType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update team escalation policy prioritized settings high handoff step based on context it is used
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsHighHandoffStep) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsHighHandoffStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsHighHandoffStep) UnmarshalBinary(b []byte) error {
	var res UpdateTeamEscalationPolicyPrioritizedSettingsHighHandoffStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateTeamEscalationPolicyPrioritizedSettingsLow Settings for LOW priority alerts
//
// swagger:model UpdateTeamEscalationPolicyPrioritizedSettingsLow
type UpdateTeamEscalationPolicyPrioritizedSettingsLow struct {

	// handoff step
	HandoffStep *UpdateTeamEscalationPolicyPrioritizedSettingsLowHandoffStep `json:"handoff_step,omitempty"`

	// Number of repetitions for LOW priority alerts
	Repetitions int32 `json:"repetitions,omitempty"`
}

// Validate validates this update team escalation policy prioritized settings low
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsLow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHandoffStep(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettingsLow) validateHandoffStep(formats strfmt.Registry) error {
	if swag.IsZero(m.HandoffStep) { // not required
		return nil
	}

	if m.HandoffStep != nil {
		if err := m.HandoffStep.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prioritized_settings" + "." + "low" + "." + "handoff_step")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prioritized_settings" + "." + "low" + "." + "handoff_step")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update team escalation policy prioritized settings low based on the context it is used
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsLow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHandoffStep(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettingsLow) contextValidateHandoffStep(ctx context.Context, formats strfmt.Registry) error {

	if m.HandoffStep != nil {
		if err := m.HandoffStep.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prioritized_settings" + "." + "low" + "." + "handoff_step")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prioritized_settings" + "." + "low" + "." + "handoff_step")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsLow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsLow) UnmarshalBinary(b []byte) error {
	var res UpdateTeamEscalationPolicyPrioritizedSettingsLow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateTeamEscalationPolicyPrioritizedSettingsLowHandoffStep Handoff step for LOW priority alerts
//
// swagger:model UpdateTeamEscalationPolicyPrioritizedSettingsLowHandoffStep
type UpdateTeamEscalationPolicyPrioritizedSettingsLowHandoffStep struct {

	// target id
	// Required: true
	TargetID *string `json:"target_id"`

	// target type
	// Required: true
	// Enum: [EscalationPolicy Team]
	TargetType *string `json:"target_type"`
}

// Validate validates this update team escalation policy prioritized settings low handoff step
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsLowHandoffStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettingsLowHandoffStep) validateTargetID(formats strfmt.Registry) error {

	if err := validate.Required("prioritized_settings"+"."+"low"+"."+"handoff_step"+"."+"target_id", "body", m.TargetID); err != nil {
		return err
	}

	return nil
}

var updateTeamEscalationPolicyPrioritizedSettingsLowHandoffStepTypeTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EscalationPolicy","Team"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateTeamEscalationPolicyPrioritizedSettingsLowHandoffStepTypeTargetTypePropEnum = append(updateTeamEscalationPolicyPrioritizedSettingsLowHandoffStepTypeTargetTypePropEnum, v)
	}
}

const (

	// UpdateTeamEscalationPolicyPrioritizedSettingsLowHandoffStepTargetTypeEscalationPolicy captures enum value "EscalationPolicy"
	UpdateTeamEscalationPolicyPrioritizedSettingsLowHandoffStepTargetTypeEscalationPolicy string = "EscalationPolicy"

	// UpdateTeamEscalationPolicyPrioritizedSettingsLowHandoffStepTargetTypeTeam captures enum value "Team"
	UpdateTeamEscalationPolicyPrioritizedSettingsLowHandoffStepTargetTypeTeam string = "Team"
)

// prop value enum
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsLowHandoffStep) validateTargetTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateTeamEscalationPolicyPrioritizedSettingsLowHandoffStepTypeTargetTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettingsLowHandoffStep) validateTargetType(formats strfmt.Registry) error {

	if err := validate.Required("prioritized_settings"+"."+"low"+"."+"handoff_step"+"."+"target_type", "body", m.TargetType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetTypeEnum("prioritized_settings"+"."+"low"+"."+"handoff_step"+"."+"target_type", "body", *m.TargetType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update team escalation policy prioritized settings low handoff step based on context it is used
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsLowHandoffStep) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsLowHandoffStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsLowHandoffStep) UnmarshalBinary(b []byte) error {
	var res UpdateTeamEscalationPolicyPrioritizedSettingsLowHandoffStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateTeamEscalationPolicyPrioritizedSettingsMedium Settings for MEDIUM priority alerts
//
// swagger:model UpdateTeamEscalationPolicyPrioritizedSettingsMedium
type UpdateTeamEscalationPolicyPrioritizedSettingsMedium struct {

	// handoff step
	HandoffStep *UpdateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStep `json:"handoff_step,omitempty"`

	// Number of repetitions for MEDIUM priority alerts
	Repetitions int32 `json:"repetitions,omitempty"`
}

// Validate validates this update team escalation policy prioritized settings medium
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsMedium) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHandoffStep(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettingsMedium) validateHandoffStep(formats strfmt.Registry) error {
	if swag.IsZero(m.HandoffStep) { // not required
		return nil
	}

	if m.HandoffStep != nil {
		if err := m.HandoffStep.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prioritized_settings" + "." + "medium" + "." + "handoff_step")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prioritized_settings" + "." + "medium" + "." + "handoff_step")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update team escalation policy prioritized settings medium based on the context it is used
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsMedium) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHandoffStep(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettingsMedium) contextValidateHandoffStep(ctx context.Context, formats strfmt.Registry) error {

	if m.HandoffStep != nil {
		if err := m.HandoffStep.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prioritized_settings" + "." + "medium" + "." + "handoff_step")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prioritized_settings" + "." + "medium" + "." + "handoff_step")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsMedium) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsMedium) UnmarshalBinary(b []byte) error {
	var res UpdateTeamEscalationPolicyPrioritizedSettingsMedium
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStep Handoff step for MEDIUM priority alerts
//
// swagger:model UpdateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStep
type UpdateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStep struct {

	// target id
	// Required: true
	TargetID *string `json:"target_id"`

	// target type
	// Required: true
	// Enum: [EscalationPolicy Team]
	TargetType *string `json:"target_type"`
}

// Validate validates this update team escalation policy prioritized settings medium handoff step
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStep) validateTargetID(formats strfmt.Registry) error {

	if err := validate.Required("prioritized_settings"+"."+"medium"+"."+"handoff_step"+"."+"target_id", "body", m.TargetID); err != nil {
		return err
	}

	return nil
}

var updateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStepTypeTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EscalationPolicy","Team"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStepTypeTargetTypePropEnum = append(updateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStepTypeTargetTypePropEnum, v)
	}
}

const (

	// UpdateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStepTargetTypeEscalationPolicy captures enum value "EscalationPolicy"
	UpdateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStepTargetTypeEscalationPolicy string = "EscalationPolicy"

	// UpdateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStepTargetTypeTeam captures enum value "Team"
	UpdateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStepTargetTypeTeam string = "Team"
)

// prop value enum
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStep) validateTargetTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStepTypeTargetTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStep) validateTargetType(formats strfmt.Registry) error {

	if err := validate.Required("prioritized_settings"+"."+"medium"+"."+"handoff_step"+"."+"target_type", "body", m.TargetType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetTypeEnum("prioritized_settings"+"."+"medium"+"."+"handoff_step"+"."+"target_type", "body", *m.TargetType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update team escalation policy prioritized settings medium handoff step based on context it is used
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStep) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStep) UnmarshalBinary(b []byte) error {
	var res UpdateTeamEscalationPolicyPrioritizedSettingsMediumHandoffStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateTeamEscalationPolicyStepsItems0 update team escalation policy steps items0
//
// swagger:model UpdateTeamEscalationPolicyStepsItems0
type UpdateTeamEscalationPolicyStepsItems0 struct {

	// The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.
	// Enum: [unspecified round_robin_by_alert round_robin_by_escalation_policy]
	DistributionType string `json:"distribution_type,omitempty"`

	// A list of priorities (HIGH, MEDIUM, LOW) to which the step applies when using a dynamic escalation policy.
	Priorities []string `json:"priorities"`

	// A list of targets that the step will notify. You can specify up to 15 targets per step.
	Targets []*UpdateTeamEscalationPolicyStepsItems0TargetsItems0 `json:"targets"`

	// An ISO8601 duration string specifying how long to wait before moving on to the next step. For the last step, this value specifies how long to wait before the escalation policy should repeat, if it repeats.
	// Required: true
	Timeout *string `json:"timeout"`
}

// Validate validates this update team escalation policy steps items0
func (m *UpdateTeamEscalationPolicyStepsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDistributionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeout(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateTeamEscalationPolicyStepsItems0TypeDistributionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unspecified","round_robin_by_alert","round_robin_by_escalation_policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateTeamEscalationPolicyStepsItems0TypeDistributionTypePropEnum = append(updateTeamEscalationPolicyStepsItems0TypeDistributionTypePropEnum, v)
	}
}

const (

	// UpdateTeamEscalationPolicyStepsItems0DistributionTypeUnspecified captures enum value "unspecified"
	UpdateTeamEscalationPolicyStepsItems0DistributionTypeUnspecified string = "unspecified"

	// UpdateTeamEscalationPolicyStepsItems0DistributionTypeRoundRobinByAlert captures enum value "round_robin_by_alert"
	UpdateTeamEscalationPolicyStepsItems0DistributionTypeRoundRobinByAlert string = "round_robin_by_alert"

	// UpdateTeamEscalationPolicyStepsItems0DistributionTypeRoundRobinByEscalationPolicy captures enum value "round_robin_by_escalation_policy"
	UpdateTeamEscalationPolicyStepsItems0DistributionTypeRoundRobinByEscalationPolicy string = "round_robin_by_escalation_policy"
)

// prop value enum
func (m *UpdateTeamEscalationPolicyStepsItems0) validateDistributionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateTeamEscalationPolicyStepsItems0TypeDistributionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyStepsItems0) validateDistributionType(formats strfmt.Registry) error {
	if swag.IsZero(m.DistributionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDistributionTypeEnum("distribution_type", "body", m.DistributionType); err != nil {
		return err
	}

	return nil
}

func (m *UpdateTeamEscalationPolicyStepsItems0) validateTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.Targets) { // not required
		return nil
	}

	for i := 0; i < len(m.Targets); i++ {
		if swag.IsZero(m.Targets[i]) { // not required
			continue
		}

		if m.Targets[i] != nil {
			if err := m.Targets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("targets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateTeamEscalationPolicyStepsItems0) validateTimeout(formats strfmt.Registry) error {

	if err := validate.Required("timeout", "body", m.Timeout); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update team escalation policy steps items0 based on the context it is used
func (m *UpdateTeamEscalationPolicyStepsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyStepsItems0) contextValidateTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Targets); i++ {

		if m.Targets[i] != nil {
			if err := m.Targets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("targets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyStepsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyStepsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateTeamEscalationPolicyStepsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateTeamEscalationPolicyStepsItems0TargetsItems0 update team escalation policy steps items0 targets items0
//
// swagger:model UpdateTeamEscalationPolicyStepsItems0TargetsItems0
type UpdateTeamEscalationPolicyStepsItems0TargetsItems0 struct {

	// The ID of the target that the step will notify.
	// Required: true
	ID *string `json:"id"`

	// The type of target that the step will notify.
	// Required: true
	// Enum: [OnCallSchedule User SlackChannel EntireTeam Webhook]
	Type *string `json:"type"`
}

// Validate validates this update team escalation policy steps items0 targets items0
func (m *UpdateTeamEscalationPolicyStepsItems0TargetsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyStepsItems0TargetsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var updateTeamEscalationPolicyStepsItems0TargetsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OnCallSchedule","User","SlackChannel","EntireTeam","Webhook"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateTeamEscalationPolicyStepsItems0TargetsItems0TypeTypePropEnum = append(updateTeamEscalationPolicyStepsItems0TargetsItems0TypeTypePropEnum, v)
	}
}

const (

	// UpdateTeamEscalationPolicyStepsItems0TargetsItems0TypeOnCallSchedule captures enum value "OnCallSchedule"
	UpdateTeamEscalationPolicyStepsItems0TargetsItems0TypeOnCallSchedule string = "OnCallSchedule"

	// UpdateTeamEscalationPolicyStepsItems0TargetsItems0TypeUser captures enum value "User"
	UpdateTeamEscalationPolicyStepsItems0TargetsItems0TypeUser string = "User"

	// UpdateTeamEscalationPolicyStepsItems0TargetsItems0TypeSlackChannel captures enum value "SlackChannel"
	UpdateTeamEscalationPolicyStepsItems0TargetsItems0TypeSlackChannel string = "SlackChannel"

	// UpdateTeamEscalationPolicyStepsItems0TargetsItems0TypeEntireTeam captures enum value "EntireTeam"
	UpdateTeamEscalationPolicyStepsItems0TargetsItems0TypeEntireTeam string = "EntireTeam"

	// UpdateTeamEscalationPolicyStepsItems0TargetsItems0TypeWebhook captures enum value "Webhook"
	UpdateTeamEscalationPolicyStepsItems0TargetsItems0TypeWebhook string = "Webhook"
)

// prop value enum
func (m *UpdateTeamEscalationPolicyStepsItems0TargetsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateTeamEscalationPolicyStepsItems0TargetsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateTeamEscalationPolicyStepsItems0TargetsItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update team escalation policy steps items0 targets items0 based on context it is used
func (m *UpdateTeamEscalationPolicyStepsItems0TargetsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyStepsItems0TargetsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateTeamEscalationPolicyStepsItems0TargetsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateTeamEscalationPolicyStepsItems0TargetsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
