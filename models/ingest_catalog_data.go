// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IngestCatalogData Accepts catalog data in the configured format and asyncronously processes the data to incorporate changes into service catalog.
//
// swagger:model ingest_catalog_data
type IngestCatalogData struct {

	// Service data
	// Required: true
	Data *string `json:"data"`

	// Encoding for submitted data
	// Required: true
	// Enum: [text/yaml application/x-yaml application/json]
	Encoding *string `json:"encoding"`
}

// Validate validates this ingest catalog data
func (m *IngestCatalogData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncoding(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestCatalogData) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	return nil
}

var ingestCatalogDataTypeEncodingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["text/yaml","application/x-yaml","application/json"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ingestCatalogDataTypeEncodingPropEnum = append(ingestCatalogDataTypeEncodingPropEnum, v)
	}
}

const (

	// IngestCatalogDataEncodingTextYaml captures enum value "text/yaml"
	IngestCatalogDataEncodingTextYaml string = "text/yaml"

	// IngestCatalogDataEncodingApplicationxDashYaml captures enum value "application/x-yaml"
	IngestCatalogDataEncodingApplicationxDashYaml string = "application/x-yaml"

	// IngestCatalogDataEncodingApplicationJSON captures enum value "application/json"
	IngestCatalogDataEncodingApplicationJSON string = "application/json"
)

// prop value enum
func (m *IngestCatalogData) validateEncodingEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ingestCatalogDataTypeEncodingPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IngestCatalogData) validateEncoding(formats strfmt.Registry) error {

	if err := validate.Required("encoding", "body", m.Encoding); err != nil {
		return err
	}

	// value enum
	if err := m.validateEncodingEnum("encoding", "body", *m.Encoding); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ingest catalog data based on context it is used
func (m *IngestCatalogData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IngestCatalogData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestCatalogData) UnmarshalBinary(b []byte) error {
	var res IngestCatalogData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
