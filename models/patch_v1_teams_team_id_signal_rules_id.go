// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchV1TeamsTeamIDSignalRulesID Update a Signals rule by ID
//
// swagger:model patchV1TeamsTeamIdSignalRulesId
type PatchV1TeamsTeamIDSignalRulesID struct {

	// Determines when an incident should be created when this rule is matched
	// Enum: [WHEN_UNSPECIFIED WHEN_ALWAYS]
	CreateIncidentConditionWhen string `json:"create_incident_condition_when,omitempty"`

	// The CEL expression that defines the rule.
	Expression string `json:"expression,omitempty"`

	// The ID of an incident type that should be used when an alert is promoted to an incident
	IncidentTypeID string `json:"incident_type_id,omitempty"`

	// The rule's name.
	Name string `json:"name,omitempty"`

	// A notification priority that will be set on the resulting alert (default: HIGH)
	// Enum: [HIGH MEDIUM LOW ]
	NotificationPriorityOverride string `json:"notification_priority_override,omitempty"`

	// The ID of the target that the rule will notify when matched.
	TargetID string `json:"target_id,omitempty"`

	// The type of target that the rule will notify when matched.
	// Enum: [EscalationPolicy OnCallSchedule User Webhook]
	TargetType string `json:"target_type,omitempty"`
}

// Validate validates this patch v1 teams team Id signal rules Id
func (m *PatchV1TeamsTeamIDSignalRulesID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateIncidentConditionWhen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationPriorityOverride(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchV1TeamsTeamIdSignalRulesIdTypeCreateIncidentConditionWhenPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WHEN_UNSPECIFIED","WHEN_ALWAYS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchV1TeamsTeamIdSignalRulesIdTypeCreateIncidentConditionWhenPropEnum = append(patchV1TeamsTeamIdSignalRulesIdTypeCreateIncidentConditionWhenPropEnum, v)
	}
}

const (

	// PatchV1TeamsTeamIDSignalRulesIDCreateIncidentConditionWhenWHENUNSPECIFIED captures enum value "WHEN_UNSPECIFIED"
	PatchV1TeamsTeamIDSignalRulesIDCreateIncidentConditionWhenWHENUNSPECIFIED string = "WHEN_UNSPECIFIED"

	// PatchV1TeamsTeamIDSignalRulesIDCreateIncidentConditionWhenWHENALWAYS captures enum value "WHEN_ALWAYS"
	PatchV1TeamsTeamIDSignalRulesIDCreateIncidentConditionWhenWHENALWAYS string = "WHEN_ALWAYS"
)

// prop value enum
func (m *PatchV1TeamsTeamIDSignalRulesID) validateCreateIncidentConditionWhenEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchV1TeamsTeamIdSignalRulesIdTypeCreateIncidentConditionWhenPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PatchV1TeamsTeamIDSignalRulesID) validateCreateIncidentConditionWhen(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateIncidentConditionWhen) { // not required
		return nil
	}

	// value enum
	if err := m.validateCreateIncidentConditionWhenEnum("create_incident_condition_when", "body", m.CreateIncidentConditionWhen); err != nil {
		return err
	}

	return nil
}

var patchV1TeamsTeamIdSignalRulesIdTypeNotificationPriorityOverridePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HIGH","MEDIUM","LOW",""]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchV1TeamsTeamIdSignalRulesIdTypeNotificationPriorityOverridePropEnum = append(patchV1TeamsTeamIdSignalRulesIdTypeNotificationPriorityOverridePropEnum, v)
	}
}

const (

	// PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverrideHIGH captures enum value "HIGH"
	PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverrideHIGH string = "HIGH"

	// PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverrideMEDIUM captures enum value "MEDIUM"
	PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverrideMEDIUM string = "MEDIUM"

	// PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverrideLOW captures enum value "LOW"
	PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverrideLOW string = "LOW"

	// PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverrideEmpty captures enum value ""
	PatchV1TeamsTeamIDSignalRulesIDNotificationPriorityOverrideEmpty string = ""
)

// prop value enum
func (m *PatchV1TeamsTeamIDSignalRulesID) validateNotificationPriorityOverrideEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchV1TeamsTeamIdSignalRulesIdTypeNotificationPriorityOverridePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PatchV1TeamsTeamIDSignalRulesID) validateNotificationPriorityOverride(formats strfmt.Registry) error {
	if swag.IsZero(m.NotificationPriorityOverride) { // not required
		return nil
	}

	// value enum
	if err := m.validateNotificationPriorityOverrideEnum("notification_priority_override", "body", m.NotificationPriorityOverride); err != nil {
		return err
	}

	return nil
}

var patchV1TeamsTeamIdSignalRulesIdTypeTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EscalationPolicy","OnCallSchedule","User","Webhook"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchV1TeamsTeamIdSignalRulesIdTypeTargetTypePropEnum = append(patchV1TeamsTeamIdSignalRulesIdTypeTargetTypePropEnum, v)
	}
}

const (

	// PatchV1TeamsTeamIDSignalRulesIDTargetTypeEscalationPolicy captures enum value "EscalationPolicy"
	PatchV1TeamsTeamIDSignalRulesIDTargetTypeEscalationPolicy string = "EscalationPolicy"

	// PatchV1TeamsTeamIDSignalRulesIDTargetTypeOnCallSchedule captures enum value "OnCallSchedule"
	PatchV1TeamsTeamIDSignalRulesIDTargetTypeOnCallSchedule string = "OnCallSchedule"

	// PatchV1TeamsTeamIDSignalRulesIDTargetTypeUser captures enum value "User"
	PatchV1TeamsTeamIDSignalRulesIDTargetTypeUser string = "User"

	// PatchV1TeamsTeamIDSignalRulesIDTargetTypeWebhook captures enum value "Webhook"
	PatchV1TeamsTeamIDSignalRulesIDTargetTypeWebhook string = "Webhook"
)

// prop value enum
func (m *PatchV1TeamsTeamIDSignalRulesID) validateTargetTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchV1TeamsTeamIdSignalRulesIdTypeTargetTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PatchV1TeamsTeamIDSignalRulesID) validateTargetType(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTargetTypeEnum("target_type", "body", m.TargetType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch v1 teams team Id signal rules Id based on context it is used
func (m *PatchV1TeamsTeamIDSignalRulesID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchV1TeamsTeamIDSignalRulesID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchV1TeamsTeamIDSignalRulesID) UnmarshalBinary(b []byte) error {
	var res PatchV1TeamsTeamIDSignalRulesID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
