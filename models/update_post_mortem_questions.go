// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdatePostMortemQuestions Update the questions configured to be provided and filled out on future retrospective reports.
//
// swagger:model update_post_mortem_questions
type UpdatePostMortemQuestions struct {

	// make swagger work
	MakeSwaggerWork string `json:"_make_swagger_work_,omitempty"`

	// questions
	Questions []*UpdatePostMortemQuestionsQuestionsItems0 `json:"questions"`
}

// Validate validates this update post mortem questions
func (m *UpdatePostMortemQuestions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuestions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePostMortemQuestions) validateQuestions(formats strfmt.Registry) error {
	if swag.IsZero(m.Questions) { // not required
		return nil
	}

	for i := 0; i < len(m.Questions); i++ {
		if swag.IsZero(m.Questions[i]) { // not required
			continue
		}

		if m.Questions[i] != nil {
			if err := m.Questions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("questions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("questions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update post mortem questions based on the context it is used
func (m *UpdatePostMortemQuestions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQuestions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePostMortemQuestions) contextValidateQuestions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Questions); i++ {

		if m.Questions[i] != nil {
			if err := m.Questions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("questions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("questions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdatePostMortemQuestions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdatePostMortemQuestions) UnmarshalBinary(b []byte) error {
	var res UpdatePostMortemQuestions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdatePostMortemQuestionsQuestionsItems0 update post mortem questions questions items0
//
// swagger:model UpdatePostMortemQuestionsQuestionsItems0
type UpdatePostMortemQuestionsQuestionsItems0 struct {

	// ID of a question
	ID string `json:"id,omitempty"`

	// title of a question
	Title string `json:"title,omitempty"`

	// tooltip of a question
	Tooltip string `json:"tooltip,omitempty"`
}

// Validate validates this update post mortem questions questions items0
func (m *UpdatePostMortemQuestionsQuestionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update post mortem questions questions items0 based on context it is used
func (m *UpdatePostMortemQuestionsQuestionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdatePostMortemQuestionsQuestionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdatePostMortemQuestionsQuestionsItems0) UnmarshalBinary(b []byte) error {
	var res UpdatePostMortemQuestionsQuestionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
