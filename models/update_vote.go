// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateVote Upvote or downvote an object
//
// swagger:model update_vote
type UpdateVote struct {

	// The direction you would like to vote, or if you dig it
	// Required: true
	// Enum: [up down dig]
	Direction *string `json:"direction"`
}

// Validate validates this update vote
func (m *UpdateVote) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateVoteTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["up","down","dig"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateVoteTypeDirectionPropEnum = append(updateVoteTypeDirectionPropEnum, v)
	}
}

const (

	// UpdateVoteDirectionUp captures enum value "up"
	UpdateVoteDirectionUp string = "up"

	// UpdateVoteDirectionDown captures enum value "down"
	UpdateVoteDirectionDown string = "down"

	// UpdateVoteDirectionDig captures enum value "dig"
	UpdateVoteDirectionDig string = "dig"
)

// prop value enum
func (m *UpdateVote) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateVoteTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateVote) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("direction", "body", m.Direction); err != nil {
		return err
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", *m.Direction); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update vote based on context it is used
func (m *UpdateVote) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateVote) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateVote) UnmarshalBinary(b []byte) error {
	var res UpdateVote
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
