// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublicAPIV1IncidentsTranscriptEntity PublicAPI_V1_Incidents_TranscriptEntity model
//
// swagger:model PublicAPI_V1_Incidents_TranscriptEntity
type PublicAPIV1IncidentsTranscriptEntity struct {

	// The author of the transcript entry
	Author *AuthorEntity `json:"author,omitempty"`

	// The time the transcript entry was created
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The unique identifier for the transcript entry
	ID string `json:"id,omitempty"`

	// The speaker for the transcript entry
	Speaker string `json:"speaker,omitempty"`

	// The start time for the transcript entry
	Start int32 `json:"start,omitempty"`

	// The end time for the transcript entry
	Until int32 `json:"until,omitempty"`

	// The time the transcript entry was last updated
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// The words spoken for the transcript entry
	Words string `json:"words,omitempty"`
}

// Validate validates this public API v1 incidents transcript entity
func (m *PublicAPIV1IncidentsTranscriptEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicAPIV1IncidentsTranscriptEntity) validateAuthor(formats strfmt.Registry) error {
	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {
		if err := m.Author.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("author")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("author")
			}
			return err
		}
	}

	return nil
}

func (m *PublicAPIV1IncidentsTranscriptEntity) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PublicAPIV1IncidentsTranscriptEntity) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this public API v1 incidents transcript entity based on the context it is used
func (m *PublicAPIV1IncidentsTranscriptEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicAPIV1IncidentsTranscriptEntity) contextValidateAuthor(ctx context.Context, formats strfmt.Registry) error {

	if m.Author != nil {
		if err := m.Author.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("author")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("author")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicAPIV1IncidentsTranscriptEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicAPIV1IncidentsTranscriptEntity) UnmarshalBinary(b []byte) error {
	var res PublicAPIV1IncidentsTranscriptEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
