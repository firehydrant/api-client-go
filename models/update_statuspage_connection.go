// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateStatuspageConnection Update the given Statuspage integration connection.
//
// swagger:model update_statuspage_connection
type UpdateStatuspageConnection struct {

	// conditions
	Conditions []*UpdateStatuspageConnectionConditionsItems0 `json:"conditions"`

	// milestone mappings
	MilestoneMappings []*UpdateStatuspageConnectionMilestoneMappingsItems0 `json:"milestone_mappings"`

	// page id
	PageID string `json:"page_id,omitempty"`

	// severities
	Severities []*UpdateStatuspageConnectionSeveritiesItems0 `json:"severities"`
}

// Validate validates this update statuspage connection
func (m *UpdateStatuspageConnection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMilestoneMappings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateStatuspageConnection) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateStatuspageConnection) validateMilestoneMappings(formats strfmt.Registry) error {
	if swag.IsZero(m.MilestoneMappings) { // not required
		return nil
	}

	for i := 0; i < len(m.MilestoneMappings); i++ {
		if swag.IsZero(m.MilestoneMappings[i]) { // not required
			continue
		}

		if m.MilestoneMappings[i] != nil {
			if err := m.MilestoneMappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("milestone_mappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("milestone_mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateStatuspageConnection) validateSeverities(formats strfmt.Registry) error {
	if swag.IsZero(m.Severities) { // not required
		return nil
	}

	for i := 0; i < len(m.Severities); i++ {
		if swag.IsZero(m.Severities[i]) { // not required
			continue
		}

		if m.Severities[i] != nil {
			if err := m.Severities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("severities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("severities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update statuspage connection based on the context it is used
func (m *UpdateStatuspageConnection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMilestoneMappings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeverities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateStatuspageConnection) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateStatuspageConnection) contextValidateMilestoneMappings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MilestoneMappings); i++ {

		if m.MilestoneMappings[i] != nil {
			if err := m.MilestoneMappings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("milestone_mappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("milestone_mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateStatuspageConnection) contextValidateSeverities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Severities); i++ {

		if m.Severities[i] != nil {
			if err := m.Severities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("severities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("severities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateStatuspageConnection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateStatuspageConnection) UnmarshalBinary(b []byte) error {
	var res UpdateStatuspageConnection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateStatuspageConnectionConditionsItems0 update statuspage connection conditions items0
//
// swagger:model UpdateStatuspageConnectionConditionsItems0
type UpdateStatuspageConnectionConditionsItems0 struct {

	// FireHydrant condition id
	// Required: true
	ConditionID *string `json:"condition_id"`

	// Statuspage.io condition name
	// Required: true
	StatuspageioCondition *string `json:"statuspageio_condition"`
}

// Validate validates this update statuspage connection conditions items0
func (m *UpdateStatuspageConnectionConditionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatuspageioCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateStatuspageConnectionConditionsItems0) validateConditionID(formats strfmt.Registry) error {

	if err := validate.Required("condition_id", "body", m.ConditionID); err != nil {
		return err
	}

	return nil
}

func (m *UpdateStatuspageConnectionConditionsItems0) validateStatuspageioCondition(formats strfmt.Registry) error {

	if err := validate.Required("statuspageio_condition", "body", m.StatuspageioCondition); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update statuspage connection conditions items0 based on context it is used
func (m *UpdateStatuspageConnectionConditionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateStatuspageConnectionConditionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateStatuspageConnectionConditionsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateStatuspageConnectionConditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateStatuspageConnectionMilestoneMappingsItems0 update statuspage connection milestone mappings items0
//
// swagger:model UpdateStatuspageConnectionMilestoneMappingsItems0
type UpdateStatuspageConnectionMilestoneMappingsItems0 struct {

	// FireHydrant milestone id
	// Required: true
	MilestoneID *string `json:"milestone_id"`

	// Statuspage.io status
	// Required: true
	// Enum: [investigating identified monitoring resolved]
	Status *string `json:"status"`
}

// Validate validates this update statuspage connection milestone mappings items0
func (m *UpdateStatuspageConnectionMilestoneMappingsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMilestoneID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateStatuspageConnectionMilestoneMappingsItems0) validateMilestoneID(formats strfmt.Registry) error {

	if err := validate.Required("milestone_id", "body", m.MilestoneID); err != nil {
		return err
	}

	return nil
}

var updateStatuspageConnectionMilestoneMappingsItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["investigating","identified","monitoring","resolved"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateStatuspageConnectionMilestoneMappingsItems0TypeStatusPropEnum = append(updateStatuspageConnectionMilestoneMappingsItems0TypeStatusPropEnum, v)
	}
}

const (

	// UpdateStatuspageConnectionMilestoneMappingsItems0StatusInvestigating captures enum value "investigating"
	UpdateStatuspageConnectionMilestoneMappingsItems0StatusInvestigating string = "investigating"

	// UpdateStatuspageConnectionMilestoneMappingsItems0StatusIdentified captures enum value "identified"
	UpdateStatuspageConnectionMilestoneMappingsItems0StatusIdentified string = "identified"

	// UpdateStatuspageConnectionMilestoneMappingsItems0StatusMonitoring captures enum value "monitoring"
	UpdateStatuspageConnectionMilestoneMappingsItems0StatusMonitoring string = "monitoring"

	// UpdateStatuspageConnectionMilestoneMappingsItems0StatusResolved captures enum value "resolved"
	UpdateStatuspageConnectionMilestoneMappingsItems0StatusResolved string = "resolved"
)

// prop value enum
func (m *UpdateStatuspageConnectionMilestoneMappingsItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateStatuspageConnectionMilestoneMappingsItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateStatuspageConnectionMilestoneMappingsItems0) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update statuspage connection milestone mappings items0 based on context it is used
func (m *UpdateStatuspageConnectionMilestoneMappingsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateStatuspageConnectionMilestoneMappingsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateStatuspageConnectionMilestoneMappingsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateStatuspageConnectionMilestoneMappingsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateStatuspageConnectionSeveritiesItems0 update statuspage connection severities items0
//
// swagger:model UpdateStatuspageConnectionSeveritiesItems0
type UpdateStatuspageConnectionSeveritiesItems0 struct {

	// Statuspage.io severity name
	// Required: true
	RemoteStatus *string `json:"remote_status"`

	// FireHydrant severity slug
	// Required: true
	SeveritySlug *string `json:"severity_slug"`
}

// Validate validates this update statuspage connection severities items0
func (m *UpdateStatuspageConnectionSeveritiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRemoteStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeveritySlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateStatuspageConnectionSeveritiesItems0) validateRemoteStatus(formats strfmt.Registry) error {

	if err := validate.Required("remote_status", "body", m.RemoteStatus); err != nil {
		return err
	}

	return nil
}

func (m *UpdateStatuspageConnectionSeveritiesItems0) validateSeveritySlug(formats strfmt.Registry) error {

	if err := validate.Required("severity_slug", "body", m.SeveritySlug); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update statuspage connection severities items0 based on context it is used
func (m *UpdateStatuspageConnectionSeveritiesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateStatuspageConnectionSeveritiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateStatuspageConnectionSeveritiesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateStatuspageConnectionSeveritiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
