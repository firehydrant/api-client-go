// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TicketingProjectInboundFieldMapEntity Ticketing_ProjectInboundFieldMapEntity model
//
// swagger:model Ticketing_ProjectInboundFieldMapEntity
type TicketingProjectInboundFieldMapEntity struct {

	// connection id
	ConnectionID string `json:"connection_id,omitempty"`

	// connection type
	ConnectionType string `json:"connection_type,omitempty"`

	// external field name
	ExternalFieldName string `json:"external_field_name,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// internal field name
	InternalFieldName string `json:"internal_field_name,omitempty"`

	// ticket type
	// Enum: [incident task follow_up]
	TicketType string `json:"ticket_type,omitempty"`

	// ticketing project id
	TicketingProjectID string `json:"ticketing_project_id,omitempty"`
}

// Validate validates this ticketing project inbound field map entity
func (m *TicketingProjectInboundFieldMapEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTicketType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ticketingProjectInboundFieldMapEntityTypeTicketTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["incident","task","follow_up"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ticketingProjectInboundFieldMapEntityTypeTicketTypePropEnum = append(ticketingProjectInboundFieldMapEntityTypeTicketTypePropEnum, v)
	}
}

const (

	// TicketingProjectInboundFieldMapEntityTicketTypeIncident captures enum value "incident"
	TicketingProjectInboundFieldMapEntityTicketTypeIncident string = "incident"

	// TicketingProjectInboundFieldMapEntityTicketTypeTask captures enum value "task"
	TicketingProjectInboundFieldMapEntityTicketTypeTask string = "task"

	// TicketingProjectInboundFieldMapEntityTicketTypeFollowUp captures enum value "follow_up"
	TicketingProjectInboundFieldMapEntityTicketTypeFollowUp string = "follow_up"
)

// prop value enum
func (m *TicketingProjectInboundFieldMapEntity) validateTicketTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ticketingProjectInboundFieldMapEntityTypeTicketTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TicketingProjectInboundFieldMapEntity) validateTicketType(formats strfmt.Registry) error {
	if swag.IsZero(m.TicketType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTicketTypeEnum("ticket_type", "body", m.TicketType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ticketing project inbound field map entity based on context it is used
func (m *TicketingProjectInboundFieldMapEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TicketingProjectInboundFieldMapEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TicketingProjectInboundFieldMapEntity) UnmarshalBinary(b []byte) error {
	var res TicketingProjectInboundFieldMapEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
