// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSeverity Create a new severity
//
// swagger:model create_severity
type CreateSeverity struct {

	// color
	// Enum: [red orange yellow blue teal grey]
	Color string `json:"color,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// position
	Position int32 `json:"position,omitempty"`

	// slug
	// Required: true
	Slug *string `json:"slug"`
}

// Validate validates this create severity
func (m *CreateSeverity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createSeverityTypeColorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["red","orange","yellow","blue","teal","grey"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createSeverityTypeColorPropEnum = append(createSeverityTypeColorPropEnum, v)
	}
}

const (

	// CreateSeverityColorRed captures enum value "red"
	CreateSeverityColorRed string = "red"

	// CreateSeverityColorOrange captures enum value "orange"
	CreateSeverityColorOrange string = "orange"

	// CreateSeverityColorYellow captures enum value "yellow"
	CreateSeverityColorYellow string = "yellow"

	// CreateSeverityColorBlue captures enum value "blue"
	CreateSeverityColorBlue string = "blue"

	// CreateSeverityColorTeal captures enum value "teal"
	CreateSeverityColorTeal string = "teal"

	// CreateSeverityColorGrey captures enum value "grey"
	CreateSeverityColorGrey string = "grey"
)

// prop value enum
func (m *CreateSeverity) validateColorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createSeverityTypeColorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateSeverity) validateColor(formats strfmt.Registry) error {
	if swag.IsZero(m.Color) { // not required
		return nil
	}

	// value enum
	if err := m.validateColorEnum("color", "body", m.Color); err != nil {
		return err
	}

	return nil
}

func (m *CreateSeverity) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create severity based on context it is used
func (m *CreateSeverity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateSeverity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSeverity) UnmarshalBinary(b []byte) error {
	var res CreateSeverity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
