// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BulkUpdateIncidentMilestones Update milestone times in bulk for a given incident. All milestone
// times for an incident must occur in chronological order
// corresponding to the configured order of milestones. If the result
// of this request would cause any milestone(s) to appear out of place,
// a 422 response will instead be returned. This includes milestones
// not explicitly submitted or updated in this request.
//
// swagger:model bulk_update_incident_milestones
type BulkUpdateIncidentMilestones struct {

	// bulk
	// Enum: [true]
	Bulk string `json:"bulk,omitempty"`

	// milestones
	// Required: true
	Milestones []*BulkUpdateIncidentMilestonesMilestonesItems0 `json:"milestones"`
}

// Validate validates this bulk update incident milestones
func (m *BulkUpdateIncidentMilestones) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBulk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMilestones(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var bulkUpdateIncidentMilestonesTypeBulkPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["true"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bulkUpdateIncidentMilestonesTypeBulkPropEnum = append(bulkUpdateIncidentMilestonesTypeBulkPropEnum, v)
	}
}

const (

	// BulkUpdateIncidentMilestonesBulkTrue captures enum value "true"
	BulkUpdateIncidentMilestonesBulkTrue string = "true"
)

// prop value enum
func (m *BulkUpdateIncidentMilestones) validateBulkEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bulkUpdateIncidentMilestonesTypeBulkPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BulkUpdateIncidentMilestones) validateBulk(formats strfmt.Registry) error {
	if swag.IsZero(m.Bulk) { // not required
		return nil
	}

	// value enum
	if err := m.validateBulkEnum("bulk", "body", m.Bulk); err != nil {
		return err
	}

	return nil
}

func (m *BulkUpdateIncidentMilestones) validateMilestones(formats strfmt.Registry) error {

	if err := validate.Required("milestones", "body", m.Milestones); err != nil {
		return err
	}

	for i := 0; i < len(m.Milestones); i++ {
		if swag.IsZero(m.Milestones[i]) { // not required
			continue
		}

		if m.Milestones[i] != nil {
			if err := m.Milestones[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("milestones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("milestones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this bulk update incident milestones based on the context it is used
func (m *BulkUpdateIncidentMilestones) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMilestones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkUpdateIncidentMilestones) contextValidateMilestones(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Milestones); i++ {

		if m.Milestones[i] != nil {
			if err := m.Milestones[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("milestones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("milestones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BulkUpdateIncidentMilestones) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkUpdateIncidentMilestones) UnmarshalBinary(b []byte) error {
	var res BulkUpdateIncidentMilestones
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BulkUpdateIncidentMilestonesMilestonesItems0 bulk update incident milestones milestones items0
//
// swagger:model BulkUpdateIncidentMilestonesMilestonesItems0
type BulkUpdateIncidentMilestonesMilestonesItems0 struct {

	// An ISO8601 formatted string for when this milestone occurred. If you are removing a milestone, this field still needs to be set to some value
	// Required: true
	// Format: date-time
	OccurredAt *strfmt.DateTime `json:"occurred_at"`

	// If set to true, the milestone will be removed from the incident
	Remove bool `json:"remove,omitempty"`

	// The type/slug of the milestone. Must be one of the currently configured milestones for the given incident.
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this bulk update incident milestones milestones items0
func (m *BulkUpdateIncidentMilestonesMilestonesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOccurredAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkUpdateIncidentMilestonesMilestonesItems0) validateOccurredAt(formats strfmt.Registry) error {

	if err := validate.Required("occurred_at", "body", m.OccurredAt); err != nil {
		return err
	}

	if err := validate.FormatOf("occurred_at", "body", "date-time", m.OccurredAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BulkUpdateIncidentMilestonesMilestonesItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this bulk update incident milestones milestones items0 based on context it is used
func (m *BulkUpdateIncidentMilestonesMilestonesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BulkUpdateIncidentMilestonesMilestonesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkUpdateIncidentMilestonesMilestonesItems0) UnmarshalBinary(b []byte) error {
	var res BulkUpdateIncidentMilestonesMilestonesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
