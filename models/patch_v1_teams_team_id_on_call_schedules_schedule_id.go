// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchV1TeamsTeamIDOnCallSchedulesScheduleID Update a Signals on-call schedule by ID
//
// swagger:model patchV1TeamsTeamIdOnCallSchedulesScheduleId
type PatchV1TeamsTeamIDOnCallSchedulesScheduleID struct {

	// A hex color code that will be used to represent the schedule in the UI and iCal subscriptions.
	Color string `json:"color,omitempty"`

	// A detailed description of the on-call schedule.
	Description string `json:"description,omitempty"`

	// An ISO8601 time string specifying when the updated schedule should take effect. This
	// value must be provided if editing an attribute that would affect how the schedule's
	// shifts are generated, such as the time zone, members, strategy, or restrictions.
	//
	EffectiveAt string `json:"effective_at,omitempty"`

	// A list of user IDs that should be added to the on-call schedule rotation. If not provided, shifts will need to be assigned manually.
	MemberIds []string `json:"member_ids"`

	// The on-call schedule's name.
	Name string `json:"name,omitempty"`

	// A list of objects that restrict the schedule to speccific on-call periods.
	Restrictions []*PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0 `json:"restrictions"`

	// The ID of a Slack user group for syncing purposes. If provided, we will automatically sync whoever is on call to the user group in Slack.
	SlackUserGroupID string `json:"slack_user_group_id,omitempty"`

	// strategy
	Strategy *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy `json:"strategy,omitempty"`

	// The time zone in which the on-call schedule operates. This value must be a valid IANA time zone name.
	TimeZone string `json:"time_zone,omitempty"`
}

// Validate validates this patch v1 teams team Id on call schedules schedule Id
func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRestrictions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrategy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) validateRestrictions(formats strfmt.Registry) error {
	if swag.IsZero(m.Restrictions) { // not required
		return nil
	}

	for i := 0; i < len(m.Restrictions); i++ {
		if swag.IsZero(m.Restrictions[i]) { // not required
			continue
		}

		if m.Restrictions[i] != nil {
			if err := m.Restrictions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restrictions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restrictions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) validateStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.Strategy) { // not required
		return nil
	}

	if m.Strategy != nil {
		if err := m.Strategy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("strategy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this patch v1 teams team Id on call schedules schedule Id based on the context it is used
func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRestrictions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStrategy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) contextValidateRestrictions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Restrictions); i++ {

		if m.Restrictions[i] != nil {
			if err := m.Restrictions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restrictions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restrictions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) contextValidateStrategy(ctx context.Context, formats strfmt.Registry) error {

	if m.Strategy != nil {
		if err := m.Strategy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("strategy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) UnmarshalBinary(b []byte) error {
	var res PatchV1TeamsTeamIDOnCallSchedulesScheduleID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0 patch v1 teams team ID on call schedules schedule ID restrictions items0
//
// swagger:model PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0
type PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0 struct {

	// The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
	// Required: true
	// Enum: [monday tuesday wednesday thursday friday saturday sunday]
	EndDay *string `json:"end_day"`

	// An ISO8601 time string specifying when the restriction should end.
	// Required: true
	EndTime *string `json:"end_time"`

	// The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
	// Required: true
	// Enum: [monday tuesday wednesday thursday friday saturday sunday]
	StartDay *string `json:"start_day"`

	// An ISO8601 time string specifying when the restriction should start.
	// Required: true
	StartTime *string `json:"start_time"`
}

// Validate validates this patch v1 teams team ID on call schedules schedule ID restrictions items0
func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictionsItems0TypeEndDayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["monday","tuesday","wednesday","thursday","friday","saturday","sunday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictionsItems0TypeEndDayPropEnum = append(patchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictionsItems0TypeEndDayPropEnum, v)
	}
}

const (

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0EndDayMonday captures enum value "monday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0EndDayMonday string = "monday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0EndDayTuesday captures enum value "tuesday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0EndDayTuesday string = "tuesday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0EndDayWednesday captures enum value "wednesday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0EndDayWednesday string = "wednesday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0EndDayThursday captures enum value "thursday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0EndDayThursday string = "thursday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0EndDayFriday captures enum value "friday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0EndDayFriday string = "friday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0EndDaySaturday captures enum value "saturday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0EndDaySaturday string = "saturday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0EndDaySunday captures enum value "sunday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0EndDaySunday string = "sunday"
)

// prop value enum
func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0) validateEndDayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictionsItems0TypeEndDayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0) validateEndDay(formats strfmt.Registry) error {

	if err := validate.Required("end_day", "body", m.EndDay); err != nil {
		return err
	}

	// value enum
	if err := m.validateEndDayEnum("end_day", "body", *m.EndDay); err != nil {
		return err
	}

	return nil
}

func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("end_time", "body", m.EndTime); err != nil {
		return err
	}

	return nil
}

var patchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictionsItems0TypeStartDayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["monday","tuesday","wednesday","thursday","friday","saturday","sunday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictionsItems0TypeStartDayPropEnum = append(patchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictionsItems0TypeStartDayPropEnum, v)
	}
}

const (

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0StartDayMonday captures enum value "monday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0StartDayMonday string = "monday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0StartDayTuesday captures enum value "tuesday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0StartDayTuesday string = "tuesday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0StartDayWednesday captures enum value "wednesday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0StartDayWednesday string = "wednesday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0StartDayThursday captures enum value "thursday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0StartDayThursday string = "thursday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0StartDayFriday captures enum value "friday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0StartDayFriday string = "friday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0StartDaySaturday captures enum value "saturday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0StartDaySaturday string = "saturday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0StartDaySunday captures enum value "sunday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0StartDaySunday string = "sunday"
)

// prop value enum
func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0) validateStartDayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchV1TeamsTeamIdOnCallSchedulesScheduleIdRestrictionsItems0TypeStartDayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0) validateStartDay(formats strfmt.Registry) error {

	if err := validate.Required("start_day", "body", m.StartDay); err != nil {
		return err
	}

	// value enum
	if err := m.validateStartDayEnum("start_day", "body", *m.StartDay); err != nil {
		return err
	}

	return nil
}

func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch v1 teams team ID on call schedules schedule ID restrictions items0 based on context it is used
func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0) UnmarshalBinary(b []byte) error {
	var res PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy An object that specifies how the schedule's on-call shifts should be generated.
//
// swagger:model PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy
type PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy struct {

	// The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
	// Enum: [monday tuesday wednesday thursday friday saturday sunday]
	HandoffDay string `json:"handoff_day,omitempty"`

	// An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
	HandoffTime string `json:"handoff_time,omitempty"`

	// An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
	ShiftDuration string `json:"shift_duration,omitempty"`

	// The type of strategy. Must be one of "daily", "weekly", or "custom".
	// Required: true
	// Enum: [daily weekly custom]
	Type *string `json:"type"`
}

// Validate validates this patch v1 teams team ID on call schedules schedule ID strategy
func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHandoffDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategyTypeHandoffDayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["monday","tuesday","wednesday","thursday","friday","saturday","sunday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategyTypeHandoffDayPropEnum = append(patchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategyTypeHandoffDayPropEnum, v)
	}
}

const (

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyHandoffDayMonday captures enum value "monday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyHandoffDayMonday string = "monday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyHandoffDayTuesday captures enum value "tuesday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyHandoffDayTuesday string = "tuesday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyHandoffDayWednesday captures enum value "wednesday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyHandoffDayWednesday string = "wednesday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyHandoffDayThursday captures enum value "thursday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyHandoffDayThursday string = "thursday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyHandoffDayFriday captures enum value "friday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyHandoffDayFriday string = "friday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyHandoffDaySaturday captures enum value "saturday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyHandoffDaySaturday string = "saturday"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyHandoffDaySunday captures enum value "sunday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyHandoffDaySunday string = "sunday"
)

// prop value enum
func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy) validateHandoffDayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategyTypeHandoffDayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy) validateHandoffDay(formats strfmt.Registry) error {
	if swag.IsZero(m.HandoffDay) { // not required
		return nil
	}

	// value enum
	if err := m.validateHandoffDayEnum("strategy"+"."+"handoff_day", "body", m.HandoffDay); err != nil {
		return err
	}

	return nil
}

var patchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["daily","weekly","custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategyTypeTypePropEnum = append(patchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategyTypeTypePropEnum, v)
	}
}

const (

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyTypeDaily captures enum value "daily"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyTypeDaily string = "daily"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyTypeWeekly captures enum value "weekly"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyTypeWeekly string = "weekly"

	// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyTypeCustom captures enum value "custom"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategyTypeCustom string = "custom"
)

// prop value enum
func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchV1TeamsTeamIdOnCallSchedulesScheduleIdStrategyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy) validateType(formats strfmt.Registry) error {

	if err := validate.Required("strategy"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("strategy"+"."+"type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch v1 teams team ID on call schedules schedule ID strategy based on context it is used
func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy) UnmarshalBinary(b []byte) error {
	var res PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
