// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchV1IntegrationsStatuspageConnectionsConnectionID Update the given Statuspage integration connection.
//
// swagger:model patchV1IntegrationsStatuspageConnectionsConnectionId
type PatchV1IntegrationsStatuspageConnectionsConnectionID struct {

	// conditions
	Conditions []*PatchV1IntegrationsStatuspageConnectionsConnectionIDConditionsItems0 `json:"conditions"`

	// milestone mappings
	MilestoneMappings []*PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0 `json:"milestone_mappings"`

	// page id
	PageID string `json:"page_id,omitempty"`

	// severities
	Severities []*PatchV1IntegrationsStatuspageConnectionsConnectionIDSeveritiesItems0 `json:"severities"`
}

// Validate validates this patch v1 integrations statuspage connections connection Id
func (m *PatchV1IntegrationsStatuspageConnectionsConnectionID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMilestoneMappings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchV1IntegrationsStatuspageConnectionsConnectionID) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PatchV1IntegrationsStatuspageConnectionsConnectionID) validateMilestoneMappings(formats strfmt.Registry) error {
	if swag.IsZero(m.MilestoneMappings) { // not required
		return nil
	}

	for i := 0; i < len(m.MilestoneMappings); i++ {
		if swag.IsZero(m.MilestoneMappings[i]) { // not required
			continue
		}

		if m.MilestoneMappings[i] != nil {
			if err := m.MilestoneMappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("milestone_mappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("milestone_mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PatchV1IntegrationsStatuspageConnectionsConnectionID) validateSeverities(formats strfmt.Registry) error {
	if swag.IsZero(m.Severities) { // not required
		return nil
	}

	for i := 0; i < len(m.Severities); i++ {
		if swag.IsZero(m.Severities[i]) { // not required
			continue
		}

		if m.Severities[i] != nil {
			if err := m.Severities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("severities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("severities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this patch v1 integrations statuspage connections connection Id based on the context it is used
func (m *PatchV1IntegrationsStatuspageConnectionsConnectionID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMilestoneMappings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeverities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchV1IntegrationsStatuspageConnectionsConnectionID) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PatchV1IntegrationsStatuspageConnectionsConnectionID) contextValidateMilestoneMappings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MilestoneMappings); i++ {

		if m.MilestoneMappings[i] != nil {
			if err := m.MilestoneMappings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("milestone_mappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("milestone_mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PatchV1IntegrationsStatuspageConnectionsConnectionID) contextValidateSeverities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Severities); i++ {

		if m.Severities[i] != nil {
			if err := m.Severities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("severities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("severities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchV1IntegrationsStatuspageConnectionsConnectionID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchV1IntegrationsStatuspageConnectionsConnectionID) UnmarshalBinary(b []byte) error {
	var res PatchV1IntegrationsStatuspageConnectionsConnectionID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchV1IntegrationsStatuspageConnectionsConnectionIDConditionsItems0 patch v1 integrations statuspage connections connection ID conditions items0
//
// swagger:model PatchV1IntegrationsStatuspageConnectionsConnectionIDConditionsItems0
type PatchV1IntegrationsStatuspageConnectionsConnectionIDConditionsItems0 struct {

	// FireHydrant condition id
	// Required: true
	ConditionID *string `json:"condition_id"`

	// Statuspage.io condition name
	// Required: true
	StatuspageioCondition *string `json:"statuspageio_condition"`
}

// Validate validates this patch v1 integrations statuspage connections connection ID conditions items0
func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDConditionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatuspageioCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDConditionsItems0) validateConditionID(formats strfmt.Registry) error {

	if err := validate.Required("condition_id", "body", m.ConditionID); err != nil {
		return err
	}

	return nil
}

func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDConditionsItems0) validateStatuspageioCondition(formats strfmt.Registry) error {

	if err := validate.Required("statuspageio_condition", "body", m.StatuspageioCondition); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch v1 integrations statuspage connections connection ID conditions items0 based on context it is used
func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDConditionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDConditionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDConditionsItems0) UnmarshalBinary(b []byte) error {
	var res PatchV1IntegrationsStatuspageConnectionsConnectionIDConditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0 patch v1 integrations statuspage connections connection ID milestone mappings items0
//
// swagger:model PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0
type PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0 struct {

	// FireHydrant milestone id
	// Required: true
	MilestoneID *string `json:"milestone_id"`

	// Statuspage.io status
	// Required: true
	// Enum: [investigating identified monitoring resolved]
	Status *string `json:"status"`
}

// Validate validates this patch v1 integrations statuspage connections connection ID milestone mappings items0
func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMilestoneID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0) validateMilestoneID(formats strfmt.Registry) error {

	if err := validate.Required("milestone_id", "body", m.MilestoneID); err != nil {
		return err
	}

	return nil
}

var patchV1IntegrationsStatuspageConnectionsConnectionIdMilestoneMappingsItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["investigating","identified","monitoring","resolved"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchV1IntegrationsStatuspageConnectionsConnectionIdMilestoneMappingsItems0TypeStatusPropEnum = append(patchV1IntegrationsStatuspageConnectionsConnectionIdMilestoneMappingsItems0TypeStatusPropEnum, v)
	}
}

const (

	// PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0StatusInvestigating captures enum value "investigating"
	PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0StatusInvestigating string = "investigating"

	// PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0StatusIdentified captures enum value "identified"
	PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0StatusIdentified string = "identified"

	// PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0StatusMonitoring captures enum value "monitoring"
	PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0StatusMonitoring string = "monitoring"

	// PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0StatusResolved captures enum value "resolved"
	PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0StatusResolved string = "resolved"
)

// prop value enum
func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchV1IntegrationsStatuspageConnectionsConnectionIdMilestoneMappingsItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch v1 integrations statuspage connections connection ID milestone mappings items0 based on context it is used
func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0) UnmarshalBinary(b []byte) error {
	var res PatchV1IntegrationsStatuspageConnectionsConnectionIDMilestoneMappingsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchV1IntegrationsStatuspageConnectionsConnectionIDSeveritiesItems0 patch v1 integrations statuspage connections connection ID severities items0
//
// swagger:model PatchV1IntegrationsStatuspageConnectionsConnectionIDSeveritiesItems0
type PatchV1IntegrationsStatuspageConnectionsConnectionIDSeveritiesItems0 struct {

	// Statuspage.io severity name
	// Required: true
	RemoteStatus *string `json:"remote_status"`

	// FireHydrant severity slug
	// Required: true
	SeveritySlug *string `json:"severity_slug"`
}

// Validate validates this patch v1 integrations statuspage connections connection ID severities items0
func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDSeveritiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRemoteStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeveritySlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDSeveritiesItems0) validateRemoteStatus(formats strfmt.Registry) error {

	if err := validate.Required("remote_status", "body", m.RemoteStatus); err != nil {
		return err
	}

	return nil
}

func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDSeveritiesItems0) validateSeveritySlug(formats strfmt.Registry) error {

	if err := validate.Required("severity_slug", "body", m.SeveritySlug); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch v1 integrations statuspage connections connection ID severities items0 based on context it is used
func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDSeveritiesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDSeveritiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchV1IntegrationsStatuspageConnectionsConnectionIDSeveritiesItems0) UnmarshalBinary(b []byte) error {
	var res PatchV1IntegrationsStatuspageConnectionsConnectionIDSeveritiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
