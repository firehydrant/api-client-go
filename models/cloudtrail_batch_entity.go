// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CloudtrailBatchEntity Retrieve a single CloudTrail batch.
//
// swagger:model CloudtrailBatchEntity
type CloudtrailBatchEntity struct {

	// connection
	Connection *ConnectionEntity `json:"connection,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// ends at
	EndsAt string `json:"ends_at,omitempty"`

	// events created
	EventsCreated int32 `json:"events_created,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// starts at
	StartsAt string `json:"starts_at,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this cloudtrail batch entity
func (m *CloudtrailBatchEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudtrailBatchEntity) validateConnection(formats strfmt.Registry) error {
	if swag.IsZero(m.Connection) { // not required
		return nil
	}

	if m.Connection != nil {
		if err := m.Connection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connection")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cloudtrail batch entity based on the context it is used
func (m *CloudtrailBatchEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudtrailBatchEntity) contextValidateConnection(ctx context.Context, formats strfmt.Registry) error {

	if m.Connection != nil {
		if err := m.Connection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connection")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudtrailBatchEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudtrailBatchEntity) UnmarshalBinary(b []byte) error {
	var res CloudtrailBatchEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
