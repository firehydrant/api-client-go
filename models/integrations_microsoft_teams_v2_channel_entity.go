// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IntegrationsMicrosoftTeamsV2ChannelEntity integrations microsoft teams v2 channel entity
//
// swagger:model Integrations_MicrosoftTeamsV2_ChannelEntity
type IntegrationsMicrosoftTeamsV2ChannelEntity struct {

	// channel id
	ChannelID string `json:"channel_id,omitempty"`

	// channel name
	ChannelName string `json:"channel_name,omitempty"`

	// channel url
	ChannelURL string `json:"channel_url,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// incident
	Incident *IncidentEntity `json:"incident,omitempty"`

	// ms team id
	MsTeamID string `json:"ms_team_id,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// team name
	TeamName string `json:"team_name,omitempty"`
}

// Validate validates this integrations microsoft teams v2 channel entity
func (m *IntegrationsMicrosoftTeamsV2ChannelEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIncident(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationsMicrosoftTeamsV2ChannelEntity) validateIncident(formats strfmt.Registry) error {
	if swag.IsZero(m.Incident) { // not required
		return nil
	}

	if m.Incident != nil {
		if err := m.Incident.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incident")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incident")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this integrations microsoft teams v2 channel entity based on the context it is used
func (m *IntegrationsMicrosoftTeamsV2ChannelEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIncident(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationsMicrosoftTeamsV2ChannelEntity) contextValidateIncident(ctx context.Context, formats strfmt.Registry) error {

	if m.Incident != nil {
		if err := m.Incident.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incident")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incident")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationsMicrosoftTeamsV2ChannelEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationsMicrosoftTeamsV2ChannelEntity) UnmarshalBinary(b []byte) error {
	var res IntegrationsMicrosoftTeamsV2ChannelEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
