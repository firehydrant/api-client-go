// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RunbookStepEntity runbook step entity
//
// swagger:model RunbookStepEntity
type RunbookStepEntity struct {

	// action
	Action *ActionsEntity `json:"action,omitempty"`

	// action elements
	ActionElements string `json:"action_elements,omitempty"`

	// action id
	ActionID string `json:"action_id,omitempty"`

	// automatic
	Automatic string `json:"automatic,omitempty"`

	// config
	Config string `json:"config,omitempty"`

	// delay duration
	DelayDuration string `json:"delay_duration,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// repeats
	Repeats string `json:"repeats,omitempty"`

	// repeats duration
	RepeatsDuration string `json:"repeats_duration,omitempty"`

	// rule
	Rule string `json:"rule,omitempty"`

	// step elements
	StepElements string `json:"step_elements,omitempty"`

	// step id
	StepID string `json:"step_id,omitempty"`

	// votes
	Votes *VotesEntity `json:"votes,omitempty"`
}

// Validate validates this runbook step entity
func (m *RunbookStepEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVotes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunbookStepEntity) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	if m.Action != nil {
		if err := m.Action.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("action")
			}
			return err
		}
	}

	return nil
}

func (m *RunbookStepEntity) validateVotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Votes) { // not required
		return nil
	}

	if m.Votes != nil {
		if err := m.Votes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("votes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("votes")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this runbook step entity based on the context it is used
func (m *RunbookStepEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVotes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunbookStepEntity) contextValidateAction(ctx context.Context, formats strfmt.Registry) error {

	if m.Action != nil {
		if err := m.Action.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("action")
			}
			return err
		}
	}

	return nil
}

func (m *RunbookStepEntity) contextValidateVotes(ctx context.Context, formats strfmt.Registry) error {

	if m.Votes != nil {
		if err := m.Votes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("votes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("votes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RunbookStepEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RunbookStepEntity) UnmarshalBinary(b []byte) error {
	var res RunbookStepEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
