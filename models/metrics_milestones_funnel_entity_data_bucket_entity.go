// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetricsMilestonesFunnelEntityDataBucketEntity metrics milestones funnel entity data bucket entity
//
// swagger:model Metrics_MilestonesFunnelEntity_DataBucketEntity
type MetricsMilestonesFunnelEntityDataBucketEntity struct {

	// filter params
	FilterParams *MetricsMilestonesFunnelEntityDataBucketFilterParamsEntity `json:"filter_params,omitempty"`

	// milestone counts
	MilestoneCounts []*MetricsMilestonesFunnelEntityDataBucketMilestoneCountEntity `json:"milestone_counts"`

	// The start datetime for the period
	// Format: date-time
	TimeBucket strfmt.DateTime `json:"time_bucket,omitempty"`
}

// Validate validates this metrics milestones funnel entity data bucket entity
func (m *MetricsMilestonesFunnelEntityDataBucketEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilterParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMilestoneCounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeBucket(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricsMilestonesFunnelEntityDataBucketEntity) validateFilterParams(formats strfmt.Registry) error {
	if swag.IsZero(m.FilterParams) { // not required
		return nil
	}

	if m.FilterParams != nil {
		if err := m.FilterParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter_params")
			}
			return err
		}
	}

	return nil
}

func (m *MetricsMilestonesFunnelEntityDataBucketEntity) validateMilestoneCounts(formats strfmt.Registry) error {
	if swag.IsZero(m.MilestoneCounts) { // not required
		return nil
	}

	for i := 0; i < len(m.MilestoneCounts); i++ {
		if swag.IsZero(m.MilestoneCounts[i]) { // not required
			continue
		}

		if m.MilestoneCounts[i] != nil {
			if err := m.MilestoneCounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("milestone_counts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("milestone_counts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MetricsMilestonesFunnelEntityDataBucketEntity) validateTimeBucket(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeBucket) { // not required
		return nil
	}

	if err := validate.FormatOf("time_bucket", "body", "date-time", m.TimeBucket.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this metrics milestones funnel entity data bucket entity based on the context it is used
func (m *MetricsMilestonesFunnelEntityDataBucketEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilterParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMilestoneCounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricsMilestonesFunnelEntityDataBucketEntity) contextValidateFilterParams(ctx context.Context, formats strfmt.Registry) error {

	if m.FilterParams != nil {
		if err := m.FilterParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter_params")
			}
			return err
		}
	}

	return nil
}

func (m *MetricsMilestonesFunnelEntityDataBucketEntity) contextValidateMilestoneCounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MilestoneCounts); i++ {

		if m.MilestoneCounts[i] != nil {
			if err := m.MilestoneCounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("milestone_counts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("milestone_counts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetricsMilestonesFunnelEntityDataBucketEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricsMilestonesFunnelEntityDataBucketEntity) UnmarshalBinary(b []byte) error {
	var res MetricsMilestonesFunnelEntityDataBucketEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
