// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateIncidentType Update a single incident type from its ID
//
// swagger:model update_incident_type
type UpdateIncidentType struct {

	// name
	// Required: true
	Name *string `json:"name"`

	// template
	// Required: true
	Template *UpdateIncidentTypeTemplate `json:"template"`
}

// Validate validates this update incident type
func (m *UpdateIncidentType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateIncidentType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *UpdateIncidentType) validateTemplate(formats strfmt.Registry) error {

	if err := validate.Required("template", "body", m.Template); err != nil {
		return err
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update incident type based on the context it is used
func (m *UpdateIncidentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateIncidentType) contextValidateTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.Template != nil {
		if err := m.Template.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateIncidentType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateIncidentType) UnmarshalBinary(b []byte) error {
	var res UpdateIncidentType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateIncidentTypeTemplate update incident type template
//
// swagger:model UpdateIncidentTypeTemplate
type UpdateIncidentTypeTemplate struct {

	// customer impact summary
	CustomerImpactSummary string `json:"customer_impact_summary,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// An array of impact/condition combinations
	Impacts []*UpdateIncidentTypeTemplateImpactsItems0 `json:"impacts"`

	// A labels hash of keys and values
	Labels map[string]string `json:"labels,omitempty"`

	// priority
	Priority string `json:"priority,omitempty"`

	// private incident
	PrivateIncident bool `json:"private_incident,omitempty"`

	// List of ids of Runbooks to attach to incidents created from this type
	RunbookIds []string `json:"runbook_ids"`

	// severity
	Severity string `json:"severity,omitempty"`

	// List of tags for the incident
	TagList []string `json:"tag_list"`

	// List of ids of teams to be assigned to incidents
	TeamIds []string `json:"team_ids"`
}

// Validate validates this update incident type template
func (m *UpdateIncidentTypeTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImpacts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateIncidentTypeTemplate) validateImpacts(formats strfmt.Registry) error {
	if swag.IsZero(m.Impacts) { // not required
		return nil
	}

	for i := 0; i < len(m.Impacts); i++ {
		if swag.IsZero(m.Impacts[i]) { // not required
			continue
		}

		if m.Impacts[i] != nil {
			if err := m.Impacts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("template" + "." + "impacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("template" + "." + "impacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update incident type template based on the context it is used
func (m *UpdateIncidentTypeTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateImpacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateIncidentTypeTemplate) contextValidateImpacts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Impacts); i++ {

		if m.Impacts[i] != nil {
			if err := m.Impacts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("template" + "." + "impacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("template" + "." + "impacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateIncidentTypeTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateIncidentTypeTemplate) UnmarshalBinary(b []byte) error {
	var res UpdateIncidentTypeTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateIncidentTypeTemplateImpactsItems0 update incident type template impacts items0
//
// swagger:model UpdateIncidentTypeTemplateImpactsItems0
type UpdateIncidentTypeTemplateImpactsItems0 struct {

	// The id of the condition
	// Required: true
	ConditionID *string `json:"condition_id"`

	// The id of impact
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this update incident type template impacts items0
func (m *UpdateIncidentTypeTemplateImpactsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateIncidentTypeTemplateImpactsItems0) validateConditionID(formats strfmt.Registry) error {

	if err := validate.Required("condition_id", "body", m.ConditionID); err != nil {
		return err
	}

	return nil
}

func (m *UpdateIncidentTypeTemplateImpactsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update incident type template impacts items0 based on context it is used
func (m *UpdateIncidentTypeTemplateImpactsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateIncidentTypeTemplateImpactsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateIncidentTypeTemplateImpactsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateIncidentTypeTemplateImpactsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
