// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateService Update a services attributes, you may also add or remove functionalities from the service as well.
// Note: You may not remove or add individual label key/value pairs. You must include the entire object to override label values.
//
// swagger:model update_service
type UpdateService struct {

	// alert on add
	AlertOnAdd bool `json:"alert_on_add,omitempty"`

	// auto add responding team
	AutoAddRespondingTeam bool `json:"auto_add_responding_team,omitempty"`

	// Array of checklist IDs to attach to the service
	Checklists []*UpdateServiceChecklistsItems0 `json:"checklists"`

	// description
	Description string `json:"description,omitempty"`

	// An array of external resources to attach to this service.
	ExternalResources []*UpdateServiceExternalResourcesItems0 `json:"external_resources"`

	// An array of functionalities
	Functionalities []*UpdateServiceFunctionalitiesItems0 `json:"functionalities"`

	// A hash of label keys and values
	Labels map[string]string `json:"labels,omitempty"`

	// An array of links to associate with this service. This will remove all links not present in the patch. Only acts if 'links' key is included in the payload.
	Links []*UpdateServiceLinksItems0 `json:"links"`

	// name
	Name string `json:"name,omitempty"`

	// owner
	Owner *UpdateServiceOwner `json:"owner,omitempty"`

	// If you are trying to remove a team as an owner from a service, set this to 'true'
	RemoveOwner bool `json:"remove_owner,omitempty"`

	// If set to true, any checklists tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the checklists
	RemoveRemainingChecklists bool `json:"remove_remaining_checklists,omitempty"`

	// If set to true, any external_resources tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the external_resources
	RemoveRemainingExternalResources bool `json:"remove_remaining_external_resources,omitempty"`

	// If set to true, any functionalities tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the functionalities
	RemoveRemainingFunctionalities bool `json:"remove_remaining_functionalities,omitempty"`

	// If set to true, any teams tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the teams
	RemoveRemainingTeams bool `json:"remove_remaining_teams,omitempty"`

	// Integer representing service tier
	// Enum: [0 1 2 3 4 5]
	ServiceTier int32 `json:"service_tier,omitempty"`

	// An array of teams to attach to this service.
	Teams []*UpdateServiceTeamsItems0 `json:"teams"`
}

// Validate validates this update service
func (m *UpdateService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChecklists(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunctionalities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateService) validateChecklists(formats strfmt.Registry) error {
	if swag.IsZero(m.Checklists) { // not required
		return nil
	}

	for i := 0; i < len(m.Checklists); i++ {
		if swag.IsZero(m.Checklists[i]) { // not required
			continue
		}

		if m.Checklists[i] != nil {
			if err := m.Checklists[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checklists" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("checklists" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateService) validateExternalResources(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalResources) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalResources); i++ {
		if swag.IsZero(m.ExternalResources[i]) { // not required
			continue
		}

		if m.ExternalResources[i] != nil {
			if err := m.ExternalResources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external_resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external_resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateService) validateFunctionalities(formats strfmt.Registry) error {
	if swag.IsZero(m.Functionalities) { // not required
		return nil
	}

	for i := 0; i < len(m.Functionalities); i++ {
		if swag.IsZero(m.Functionalities[i]) { // not required
			continue
		}

		if m.Functionalities[i] != nil {
			if err := m.Functionalities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("functionalities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("functionalities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateService) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateService) validateOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

var updateServiceTypeServiceTierPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3,4,5]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateServiceTypeServiceTierPropEnum = append(updateServiceTypeServiceTierPropEnum, v)
	}
}

// prop value enum
func (m *UpdateService) validateServiceTierEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, updateServiceTypeServiceTierPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateService) validateServiceTier(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceTier) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceTierEnum("service_tier", "body", m.ServiceTier); err != nil {
		return err
	}

	return nil
}

func (m *UpdateService) validateTeams(formats strfmt.Registry) error {
	if swag.IsZero(m.Teams) { // not required
		return nil
	}

	for i := 0; i < len(m.Teams); i++ {
		if swag.IsZero(m.Teams[i]) { // not required
			continue
		}

		if m.Teams[i] != nil {
			if err := m.Teams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("teams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update service based on the context it is used
func (m *UpdateService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChecklists(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFunctionalities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateService) contextValidateChecklists(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Checklists); i++ {

		if m.Checklists[i] != nil {
			if err := m.Checklists[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checklists" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("checklists" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateService) contextValidateExternalResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalResources); i++ {

		if m.ExternalResources[i] != nil {
			if err := m.ExternalResources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external_resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external_resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateService) contextValidateFunctionalities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Functionalities); i++ {

		if m.Functionalities[i] != nil {
			if err := m.Functionalities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("functionalities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("functionalities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateService) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Links); i++ {

		if m.Links[i] != nil {
			if err := m.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateService) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.Owner != nil {
		if err := m.Owner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateService) contextValidateTeams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Teams); i++ {

		if m.Teams[i] != nil {
			if err := m.Teams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("teams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateService) UnmarshalBinary(b []byte) error {
	var res UpdateService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateServiceChecklistsItems0 update service checklists items0
//
// swagger:model UpdateServiceChecklistsItems0
type UpdateServiceChecklistsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// Set to `true` to remove checklist from service
	Remove bool `json:"remove,omitempty"`
}

// Validate validates this update service checklists items0
func (m *UpdateServiceChecklistsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateServiceChecklistsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update service checklists items0 based on context it is used
func (m *UpdateServiceChecklistsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateServiceChecklistsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateServiceChecklistsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateServiceChecklistsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateServiceExternalResourcesItems0 update service external resources items0
//
// swagger:model UpdateServiceExternalResourcesItems0
type UpdateServiceExternalResourcesItems0 struct {

	// The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, victorops. Not required if the resource has already been imported.
	ConnectionType string `json:"connection_type,omitempty"`

	// remote id
	// Required: true
	RemoteID *string `json:"remote_id"`

	// If you are trying to remove an external resource from a service, set this to 'true'.
	Remove bool `json:"remove,omitempty"`
}

// Validate validates this update service external resources items0
func (m *UpdateServiceExternalResourcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRemoteID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateServiceExternalResourcesItems0) validateRemoteID(formats strfmt.Registry) error {

	if err := validate.Required("remote_id", "body", m.RemoteID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update service external resources items0 based on context it is used
func (m *UpdateServiceExternalResourcesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateServiceExternalResourcesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateServiceExternalResourcesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateServiceExternalResourcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateServiceFunctionalitiesItems0 update service functionalities items0
//
// swagger:model UpdateServiceFunctionalitiesItems0
type UpdateServiceFunctionalitiesItems0 struct {

	// If you are trying to reuse a functionality, you may set the ID to attach it to the service
	ID string `json:"id,omitempty"`

	// If you are trying to remove a functionality from a service, set this to 'true'
	Remove bool `json:"remove,omitempty"`

	// If you are trying to create a new functionality and attach it to this service, set the summary key
	Summary string `json:"summary,omitempty"`
}

// Validate validates this update service functionalities items0
func (m *UpdateServiceFunctionalitiesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update service functionalities items0 based on context it is used
func (m *UpdateServiceFunctionalitiesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateServiceFunctionalitiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateServiceFunctionalitiesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateServiceFunctionalitiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateServiceLinksItems0 update service links items0
//
// swagger:model UpdateServiceLinksItems0
type UpdateServiceLinksItems0 struct {

	// URL
	// Required: true
	HrefURL *string `json:"href_url"`

	// An optional URL to an icon representing this link
	IconURL string `json:"icon_url,omitempty"`

	// If updating an existing link, specify it's id.
	ID string `json:"id,omitempty"`

	// Short name used to display and identify this link
	// Required: true
	Name *string `json:"name"`

	// If you are trying to remove a link, set this to 'true'
	Remove bool `json:"remove,omitempty"`
}

// Validate validates this update service links items0
func (m *UpdateServiceLinksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHrefURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateServiceLinksItems0) validateHrefURL(formats strfmt.Registry) error {

	if err := validate.Required("href_url", "body", m.HrefURL); err != nil {
		return err
	}

	return nil
}

func (m *UpdateServiceLinksItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update service links items0 based on context it is used
func (m *UpdateServiceLinksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateServiceLinksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateServiceLinksItems0) UnmarshalBinary(b []byte) error {
	var res UpdateServiceLinksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateServiceOwner An object representing a Team that owns the service
//
// swagger:model UpdateServiceOwner
type UpdateServiceOwner struct {

	// id
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this update service owner
func (m *UpdateServiceOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateServiceOwner) validateID(formats strfmt.Registry) error {

	if err := validate.Required("owner"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update service owner based on context it is used
func (m *UpdateServiceOwner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateServiceOwner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateServiceOwner) UnmarshalBinary(b []byte) error {
	var res UpdateServiceOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateServiceTeamsItems0 update service teams items0
//
// swagger:model UpdateServiceTeamsItems0
type UpdateServiceTeamsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// If you are trying to remove a team from a service, set this to 'true'
	Remove bool `json:"remove,omitempty"`
}

// Validate validates this update service teams items0
func (m *UpdateServiceTeamsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateServiceTeamsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update service teams items0 based on context it is used
func (m *UpdateServiceTeamsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateServiceTeamsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateServiceTeamsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateServiceTeamsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
