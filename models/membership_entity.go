// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MembershipEntity membership entity
//
// swagger:model MembershipEntity
type MembershipEntity struct {

	// default incident role
	DefaultIncidentRole *IncidentRoleEntity `json:"default_incident_role,omitempty"`

	// schedule
	Schedule *ScheduleEntity `json:"schedule,omitempty"`

	// signals on call schedule
	SignalsOnCallSchedule *SuccinctEntity `json:"signals_on_call_schedule,omitempty"`

	// user
	User *UserEntity `json:"user,omitempty"`
}

// Validate validates this membership entity
func (m *MembershipEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultIncidentRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignalsOnCallSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MembershipEntity) validateDefaultIncidentRole(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultIncidentRole) { // not required
		return nil
	}

	if m.DefaultIncidentRole != nil {
		if err := m.DefaultIncidentRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_incident_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("default_incident_role")
			}
			return err
		}
	}

	return nil
}

func (m *MembershipEntity) validateSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *MembershipEntity) validateSignalsOnCallSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.SignalsOnCallSchedule) { // not required
		return nil
	}

	if m.SignalsOnCallSchedule != nil {
		if err := m.SignalsOnCallSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signals_on_call_schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signals_on_call_schedule")
			}
			return err
		}
	}

	return nil
}

func (m *MembershipEntity) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this membership entity based on the context it is used
func (m *MembershipEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefaultIncidentRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignalsOnCallSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MembershipEntity) contextValidateDefaultIncidentRole(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultIncidentRole != nil {
		if err := m.DefaultIncidentRole.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_incident_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("default_incident_role")
			}
			return err
		}
	}

	return nil
}

func (m *MembershipEntity) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.Schedule != nil {
		if err := m.Schedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *MembershipEntity) contextValidateSignalsOnCallSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.SignalsOnCallSchedule != nil {
		if err := m.SignalsOnCallSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signals_on_call_schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signals_on_call_schedule")
			}
			return err
		}
	}

	return nil
}

func (m *MembershipEntity) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MembershipEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MembershipEntity) UnmarshalBinary(b []byte) error {
	var res MembershipEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
