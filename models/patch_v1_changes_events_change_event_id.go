// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchV1ChangesEventsChangeEventID Update a change event
//
// swagger:model patchV1ChangesEventsChangeEventId
type PatchV1ChangesEventsChangeEventID struct {

	// JSON objects representing attachments, see attachments documentation for the schema
	Attachments []*PatchV1ChangesEventsChangeEventIDAttachmentsItems0 `json:"attachments"`

	// description
	Description string `json:"description,omitempty"`

	// ends at
	// Format: date-time
	EndsAt strfmt.DateTime `json:"ends_at,omitempty"`

	// An array of environment IDs (setting this will overwrite the current environments)
	Environments []string `json:"environments"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// An array of service IDs (setting this will overwrite the current services)
	Services []string `json:"services"`

	// starts at
	// Format: date-time
	StartsAt strfmt.DateTime `json:"starts_at,omitempty"`

	// summary
	Summary string `json:"summary,omitempty"`
}

// Validate validates this patch v1 changes events change event Id
func (m *PatchV1ChangesEventsChangeEventID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndsAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartsAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchV1ChangesEventsChangeEventID) validateAttachments(formats strfmt.Registry) error {
	if swag.IsZero(m.Attachments) { // not required
		return nil
	}

	for i := 0; i < len(m.Attachments); i++ {
		if swag.IsZero(m.Attachments[i]) { // not required
			continue
		}

		if m.Attachments[i] != nil {
			if err := m.Attachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PatchV1ChangesEventsChangeEventID) validateEndsAt(formats strfmt.Registry) error {
	if swag.IsZero(m.EndsAt) { // not required
		return nil
	}

	if err := validate.FormatOf("ends_at", "body", "date-time", m.EndsAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PatchV1ChangesEventsChangeEventID) validateStartsAt(formats strfmt.Registry) error {
	if swag.IsZero(m.StartsAt) { // not required
		return nil
	}

	if err := validate.FormatOf("starts_at", "body", "date-time", m.StartsAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this patch v1 changes events change event Id based on the context it is used
func (m *PatchV1ChangesEventsChangeEventID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttachments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchV1ChangesEventsChangeEventID) contextValidateAttachments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attachments); i++ {

		if m.Attachments[i] != nil {

			if swag.IsZero(m.Attachments[i]) { // not required
				return nil
			}

			if err := m.Attachments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchV1ChangesEventsChangeEventID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchV1ChangesEventsChangeEventID) UnmarshalBinary(b []byte) error {
	var res PatchV1ChangesEventsChangeEventID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchV1ChangesEventsChangeEventIDAttachmentsItems0 patch v1 changes events change event ID attachments items0
//
// swagger:model PatchV1ChangesEventsChangeEventIDAttachmentsItems0
type PatchV1ChangesEventsChangeEventIDAttachmentsItems0 struct {

	// type
	// Required: true
	// Enum: [link]
	Type *string `json:"type"`
}

// Validate validates this patch v1 changes events change event ID attachments items0
func (m *PatchV1ChangesEventsChangeEventIDAttachmentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchV1ChangesEventsChangeEventIdAttachmentsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["link"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchV1ChangesEventsChangeEventIdAttachmentsItems0TypeTypePropEnum = append(patchV1ChangesEventsChangeEventIdAttachmentsItems0TypeTypePropEnum, v)
	}
}

const (

	// PatchV1ChangesEventsChangeEventIDAttachmentsItems0TypeLink captures enum value "link"
	PatchV1ChangesEventsChangeEventIDAttachmentsItems0TypeLink string = "link"
)

// prop value enum
func (m *PatchV1ChangesEventsChangeEventIDAttachmentsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchV1ChangesEventsChangeEventIdAttachmentsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PatchV1ChangesEventsChangeEventIDAttachmentsItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch v1 changes events change event ID attachments items0 based on context it is used
func (m *PatchV1ChangesEventsChangeEventIDAttachmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchV1ChangesEventsChangeEventIDAttachmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchV1ChangesEventsChangeEventIDAttachmentsItems0) UnmarshalBinary(b []byte) error {
	var res PatchV1ChangesEventsChangeEventIDAttachmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
