// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RetrospectivesFieldEntity retrospectives field entity
//
// swagger:model Retrospectives_FieldEntity
type RetrospectivesFieldEntity struct {

	// help text
	HelpText string `json:"help_text,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is required
	IsRequired bool `json:"is_required,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// permissible values
	PermissibleValues []string `json:"permissible_values"`

	// schema
	Schema []string `json:"schema"`

	// type
	// Enum: [text single_select multi_select numeric datetime dynamic_input_group markdown markdown_text]
	Type string `json:"type,omitempty"`
}

// Validate validates this retrospectives field entity
func (m *RetrospectivesFieldEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var retrospectivesFieldEntityTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["text","single_select","multi_select","numeric","datetime","dynamic_input_group","markdown","markdown_text"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		retrospectivesFieldEntityTypeTypePropEnum = append(retrospectivesFieldEntityTypeTypePropEnum, v)
	}
}

const (

	// RetrospectivesFieldEntityTypeText captures enum value "text"
	RetrospectivesFieldEntityTypeText string = "text"

	// RetrospectivesFieldEntityTypeSingleSelect captures enum value "single_select"
	RetrospectivesFieldEntityTypeSingleSelect string = "single_select"

	// RetrospectivesFieldEntityTypeMultiSelect captures enum value "multi_select"
	RetrospectivesFieldEntityTypeMultiSelect string = "multi_select"

	// RetrospectivesFieldEntityTypeNumeric captures enum value "numeric"
	RetrospectivesFieldEntityTypeNumeric string = "numeric"

	// RetrospectivesFieldEntityTypeDatetime captures enum value "datetime"
	RetrospectivesFieldEntityTypeDatetime string = "datetime"

	// RetrospectivesFieldEntityTypeDynamicInputGroup captures enum value "dynamic_input_group"
	RetrospectivesFieldEntityTypeDynamicInputGroup string = "dynamic_input_group"

	// RetrospectivesFieldEntityTypeMarkdown captures enum value "markdown"
	RetrospectivesFieldEntityTypeMarkdown string = "markdown"

	// RetrospectivesFieldEntityTypeMarkdownText captures enum value "markdown_text"
	RetrospectivesFieldEntityTypeMarkdownText string = "markdown_text"
)

// prop value enum
func (m *RetrospectivesFieldEntity) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, retrospectivesFieldEntityTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RetrospectivesFieldEntity) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this retrospectives field entity based on context it is used
func (m *RetrospectivesFieldEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RetrospectivesFieldEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetrospectivesFieldEntity) UnmarshalBinary(b []byte) error {
	var res RetrospectivesFieldEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
