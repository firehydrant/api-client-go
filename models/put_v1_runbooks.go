// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutV1Runbooks Update a runbook and any attachment rules associated with it. This endpoint is used to configure nearly everything
// about a runbook, including but not limited to the steps, environments, attachment rules, and severities.
//
//
// swagger:model putV1Runbooks
type PutV1Runbooks struct {

	// attachment rule
	AttachmentRule *PutV1RunbooksAttachmentRule `json:"attachment_rule,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// environments
	Environments []*PutV1RunbooksEnvironmentsItems0 `json:"environments"`

	// incident roles
	IncidentRoles []*PutV1RunbooksIncidentRolesItems0 `json:"incident_roles"`

	// name
	Name string `json:"name,omitempty"`

	// services
	Services []*PutV1RunbooksServicesItems0 `json:"services"`

	// severities
	Severities []*PutV1RunbooksSeveritiesItems0 `json:"severities"`

	// steps
	Steps []*PutV1RunbooksStepsItems0 `json:"steps"`

	// summary
	Summary string `json:"summary,omitempty"`
}

// Validate validates this put v1 runbooks
func (m *PutV1Runbooks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachmentRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncidentRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSteps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PutV1Runbooks) validateAttachmentRule(formats strfmt.Registry) error {
	if swag.IsZero(m.AttachmentRule) { // not required
		return nil
	}

	if m.AttachmentRule != nil {
		if err := m.AttachmentRule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attachment_rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attachment_rule")
			}
			return err
		}
	}

	return nil
}

func (m *PutV1Runbooks) validateEnvironments(formats strfmt.Registry) error {
	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	for i := 0; i < len(m.Environments); i++ {
		if swag.IsZero(m.Environments[i]) { // not required
			continue
		}

		if m.Environments[i] != nil {
			if err := m.Environments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("environments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("environments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PutV1Runbooks) validateIncidentRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.IncidentRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.IncidentRoles); i++ {
		if swag.IsZero(m.IncidentRoles[i]) { // not required
			continue
		}

		if m.IncidentRoles[i] != nil {
			if err := m.IncidentRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("incident_roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("incident_roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PutV1Runbooks) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PutV1Runbooks) validateSeverities(formats strfmt.Registry) error {
	if swag.IsZero(m.Severities) { // not required
		return nil
	}

	for i := 0; i < len(m.Severities); i++ {
		if swag.IsZero(m.Severities[i]) { // not required
			continue
		}

		if m.Severities[i] != nil {
			if err := m.Severities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("severities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("severities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PutV1Runbooks) validateSteps(formats strfmt.Registry) error {
	if swag.IsZero(m.Steps) { // not required
		return nil
	}

	for i := 0; i < len(m.Steps); i++ {
		if swag.IsZero(m.Steps[i]) { // not required
			continue
		}

		if m.Steps[i] != nil {
			if err := m.Steps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("steps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("steps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this put v1 runbooks based on the context it is used
func (m *PutV1Runbooks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttachmentRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvironments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncidentRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeverities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSteps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PutV1Runbooks) contextValidateAttachmentRule(ctx context.Context, formats strfmt.Registry) error {

	if m.AttachmentRule != nil {
		if err := m.AttachmentRule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attachment_rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attachment_rule")
			}
			return err
		}
	}

	return nil
}

func (m *PutV1Runbooks) contextValidateEnvironments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Environments); i++ {

		if m.Environments[i] != nil {
			if err := m.Environments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("environments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("environments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PutV1Runbooks) contextValidateIncidentRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IncidentRoles); i++ {

		if m.IncidentRoles[i] != nil {
			if err := m.IncidentRoles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("incident_roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("incident_roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PutV1Runbooks) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Services); i++ {

		if m.Services[i] != nil {
			if err := m.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PutV1Runbooks) contextValidateSeverities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Severities); i++ {

		if m.Severities[i] != nil {
			if err := m.Severities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("severities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("severities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PutV1Runbooks) contextValidateSteps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Steps); i++ {

		if m.Steps[i] != nil {
			if err := m.Steps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("steps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("steps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PutV1Runbooks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutV1Runbooks) UnmarshalBinary(b []byte) error {
	var res PutV1Runbooks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PutV1RunbooksAttachmentRule put v1 runbooks attachment rule
//
// swagger:model PutV1RunbooksAttachmentRule
type PutV1RunbooksAttachmentRule struct {

	// The JSON logic for the attaching the runbook
	// Required: true
	Logic *string `json:"logic"`

	// The user data for the rule
	UserData string `json:"user_data,omitempty"`
}

// Validate validates this put v1 runbooks attachment rule
func (m *PutV1RunbooksAttachmentRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PutV1RunbooksAttachmentRule) validateLogic(formats strfmt.Registry) error {

	if err := validate.Required("attachment_rule"+"."+"logic", "body", m.Logic); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put v1 runbooks attachment rule based on context it is used
func (m *PutV1RunbooksAttachmentRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PutV1RunbooksAttachmentRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutV1RunbooksAttachmentRule) UnmarshalBinary(b []byte) error {
	var res PutV1RunbooksAttachmentRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PutV1RunbooksEnvironmentsItems0 put v1 runbooks environments items0
//
// swagger:model PutV1RunbooksEnvironmentsItems0
type PutV1RunbooksEnvironmentsItems0 struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this put v1 runbooks environments items0
func (m *PutV1RunbooksEnvironmentsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put v1 runbooks environments items0 based on context it is used
func (m *PutV1RunbooksEnvironmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PutV1RunbooksEnvironmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutV1RunbooksEnvironmentsItems0) UnmarshalBinary(b []byte) error {
	var res PutV1RunbooksEnvironmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PutV1RunbooksIncidentRolesItems0 put v1 runbooks incident roles items0
//
// swagger:model PutV1RunbooksIncidentRolesItems0
type PutV1RunbooksIncidentRolesItems0 struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this put v1 runbooks incident roles items0
func (m *PutV1RunbooksIncidentRolesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put v1 runbooks incident roles items0 based on context it is used
func (m *PutV1RunbooksIncidentRolesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PutV1RunbooksIncidentRolesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutV1RunbooksIncidentRolesItems0) UnmarshalBinary(b []byte) error {
	var res PutV1RunbooksIncidentRolesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PutV1RunbooksServicesItems0 put v1 runbooks services items0
//
// swagger:model PutV1RunbooksServicesItems0
type PutV1RunbooksServicesItems0 struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this put v1 runbooks services items0
func (m *PutV1RunbooksServicesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put v1 runbooks services items0 based on context it is used
func (m *PutV1RunbooksServicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PutV1RunbooksServicesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutV1RunbooksServicesItems0) UnmarshalBinary(b []byte) error {
	var res PutV1RunbooksServicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PutV1RunbooksSeveritiesItems0 put v1 runbooks severities items0
//
// swagger:model PutV1RunbooksSeveritiesItems0
type PutV1RunbooksSeveritiesItems0 struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this put v1 runbooks severities items0
func (m *PutV1RunbooksSeveritiesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put v1 runbooks severities items0 based on context it is used
func (m *PutV1RunbooksSeveritiesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PutV1RunbooksSeveritiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutV1RunbooksSeveritiesItems0) UnmarshalBinary(b []byte) error {
	var res PutV1RunbooksSeveritiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PutV1RunbooksStepsItems0 put v1 runbooks steps items0
//
// swagger:model PutV1RunbooksStepsItems0
type PutV1RunbooksStepsItems0 struct {

	// ID of action to use for this step.
	// Required: true
	ActionID *string `json:"action_id"`

	// Name for step
	// Required: true
	Name *string `json:"name"`

	// rule
	Rule []*PutV1RunbooksStepsItems0RuleItems0 `json:"rule"`

	// ID of step to be updated
	StepID string `json:"step_id,omitempty"`
}

// Validate validates this put v1 runbooks steps items0
func (m *PutV1RunbooksStepsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PutV1RunbooksStepsItems0) validateActionID(formats strfmt.Registry) error {

	if err := validate.Required("action_id", "body", m.ActionID); err != nil {
		return err
	}

	return nil
}

func (m *PutV1RunbooksStepsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PutV1RunbooksStepsItems0) validateRule(formats strfmt.Registry) error {
	if swag.IsZero(m.Rule) { // not required
		return nil
	}

	for i := 0; i < len(m.Rule); i++ {
		if swag.IsZero(m.Rule[i]) { // not required
			continue
		}

		if m.Rule[i] != nil {
			if err := m.Rule[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rule" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rule" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this put v1 runbooks steps items0 based on the context it is used
func (m *PutV1RunbooksStepsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PutV1RunbooksStepsItems0) contextValidateRule(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rule); i++ {

		if m.Rule[i] != nil {
			if err := m.Rule[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rule" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rule" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PutV1RunbooksStepsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutV1RunbooksStepsItems0) UnmarshalBinary(b []byte) error {
	var res PutV1RunbooksStepsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PutV1RunbooksStepsItems0RuleItems0 put v1 runbooks steps items0 rule items0
//
// swagger:model PutV1RunbooksStepsItems0RuleItems0
type PutV1RunbooksStepsItems0RuleItems0 struct {

	// The JSON logic for the rule
	// Required: true
	Logic *string `json:"logic"`

	// The user data for the rule
	UserData string `json:"user_data,omitempty"`
}

// Validate validates this put v1 runbooks steps items0 rule items0
func (m *PutV1RunbooksStepsItems0RuleItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PutV1RunbooksStepsItems0RuleItems0) validateLogic(formats strfmt.Registry) error {

	if err := validate.Required("logic", "body", m.Logic); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put v1 runbooks steps items0 rule items0 based on context it is used
func (m *PutV1RunbooksStepsItems0RuleItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PutV1RunbooksStepsItems0RuleItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutV1RunbooksStepsItems0RuleItems0) UnmarshalBinary(b []byte) error {
	var res PutV1RunbooksStepsItems0RuleItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
