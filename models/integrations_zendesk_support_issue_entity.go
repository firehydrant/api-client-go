// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IntegrationsZendeskSupportIssueEntity integrations zendesk support issue entity
//
// swagger:model Integrations_Zendesk_SupportIssueEntity
type IntegrationsZendeskSupportIssueEntity struct {

	// attached incidents
	AttachedIncidents []*IncidentEntity `json:"attached_incidents"`

	// Attachment information for this issue.
	Attachments string `json:"attachments,omitempty"`

	// customers
	Customers *IntegrationsZendeskSupportIssueEntityCustomerEntity `json:"customers,omitempty"`

	// Raw data associated with this issue from originating system.
	Data interface{} `json:"data,omitempty"`

	// Longer description of the issue.
	Description string `json:"description,omitempty"`

	// priority
	Priority string `json:"priority,omitempty"`

	// The ID of this support issue in the system that originated this issue, eg Zendesk.
	RemoteID string `json:"remote_id,omitempty"`

	// Browser-accessible url for this issue in the originating system, eg Zendesk.
	RemoteURL string `json:"remote_url,omitempty"`

	// Title or name of this issue.
	Title string `json:"title,omitempty"`

	// Type designator for this entity
	Type string `json:"type,omitempty"`
}

// Validate validates this integrations zendesk support issue entity
func (m *IntegrationsZendeskSupportIssueEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachedIncidents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationsZendeskSupportIssueEntity) validateAttachedIncidents(formats strfmt.Registry) error {
	if swag.IsZero(m.AttachedIncidents) { // not required
		return nil
	}

	for i := 0; i < len(m.AttachedIncidents); i++ {
		if swag.IsZero(m.AttachedIncidents[i]) { // not required
			continue
		}

		if m.AttachedIncidents[i] != nil {
			if err := m.AttachedIncidents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attached_incidents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attached_incidents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IntegrationsZendeskSupportIssueEntity) validateCustomers(formats strfmt.Registry) error {
	if swag.IsZero(m.Customers) { // not required
		return nil
	}

	if m.Customers != nil {
		if err := m.Customers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customers")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this integrations zendesk support issue entity based on the context it is used
func (m *IntegrationsZendeskSupportIssueEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttachedIncidents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationsZendeskSupportIssueEntity) contextValidateAttachedIncidents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AttachedIncidents); i++ {

		if m.AttachedIncidents[i] != nil {
			if err := m.AttachedIncidents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attached_incidents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attached_incidents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IntegrationsZendeskSupportIssueEntity) contextValidateCustomers(ctx context.Context, formats strfmt.Registry) error {

	if m.Customers != nil {
		if err := m.Customers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationsZendeskSupportIssueEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationsZendeskSupportIssueEntity) UnmarshalBinary(b []byte) error {
	var res IntegrationsZendeskSupportIssueEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
