// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostV1SignalsWebhookTargets Create a Signals webhook target.
//
// swagger:model postV1SignalsWebhookTargets
type PostV1SignalsWebhookTargets struct {

	// An optional detailed description of the webhook target.
	Description string `json:"description,omitempty"`

	// The webhook target's name.
	// Required: true
	Name *string `json:"name"`

	// An optional secret we will provide in the `FH-Signature` header
	// when sending a payload to the webhook target. This key will not be
	// shown in any response once configured.
	//
	SigningKey string `json:"signing_key,omitempty"`

	// The URL that the webhook target will notify.
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this post v1 signals webhook targets
func (m *PostV1SignalsWebhookTargets) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostV1SignalsWebhookTargets) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PostV1SignalsWebhookTargets) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post v1 signals webhook targets based on context it is used
func (m *PostV1SignalsWebhookTargets) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PostV1SignalsWebhookTargets) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostV1SignalsWebhookTargets) UnmarshalBinary(b []byte) error {
	var res PostV1SignalsWebhookTargets
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
