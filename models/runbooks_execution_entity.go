// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RunbooksExecutionEntity Runbooks_ExecutionEntity model
//
// swagger:model Runbooks_ExecutionEntity
type RunbooksExecutionEntity struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// created by
	CreatedBy string `json:"created_by,omitempty"`

	// executed for
	ExecutedFor *RunbooksExecutionEntityExecutedForEntity `json:"executed_for,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// runbook
	Runbook *SlimRunbookEntity `json:"runbook,omitempty"`

	// steps
	Steps *RunbooksExecutionStepEntity `json:"steps,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this runbooks execution entity
func (m *RunbooksExecutionEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutedFor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunbook(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSteps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunbooksExecutionEntity) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RunbooksExecutionEntity) validateExecutedFor(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutedFor) { // not required
		return nil
	}

	if m.ExecutedFor != nil {
		if err := m.ExecutedFor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("executed_for")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("executed_for")
			}
			return err
		}
	}

	return nil
}

func (m *RunbooksExecutionEntity) validateRunbook(formats strfmt.Registry) error {
	if swag.IsZero(m.Runbook) { // not required
		return nil
	}

	if m.Runbook != nil {
		if err := m.Runbook.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runbook")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runbook")
			}
			return err
		}
	}

	return nil
}

func (m *RunbooksExecutionEntity) validateSteps(formats strfmt.Registry) error {
	if swag.IsZero(m.Steps) { // not required
		return nil
	}

	if m.Steps != nil {
		if err := m.Steps.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("steps")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("steps")
			}
			return err
		}
	}

	return nil
}

func (m *RunbooksExecutionEntity) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this runbooks execution entity based on the context it is used
func (m *RunbooksExecutionEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExecutedFor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunbook(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSteps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunbooksExecutionEntity) contextValidateExecutedFor(ctx context.Context, formats strfmt.Registry) error {

	if m.ExecutedFor != nil {

		if swag.IsZero(m.ExecutedFor) { // not required
			return nil
		}

		if err := m.ExecutedFor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("executed_for")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("executed_for")
			}
			return err
		}
	}

	return nil
}

func (m *RunbooksExecutionEntity) contextValidateRunbook(ctx context.Context, formats strfmt.Registry) error {

	if m.Runbook != nil {

		if swag.IsZero(m.Runbook) { // not required
			return nil
		}

		if err := m.Runbook.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runbook")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runbook")
			}
			return err
		}
	}

	return nil
}

func (m *RunbooksExecutionEntity) contextValidateSteps(ctx context.Context, formats strfmt.Registry) error {

	if m.Steps != nil {

		if swag.IsZero(m.Steps) { // not required
			return nil
		}

		if err := m.Steps.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("steps")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("steps")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RunbooksExecutionEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RunbooksExecutionEntity) UnmarshalBinary(b []byte) error {
	var res RunbooksExecutionEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
