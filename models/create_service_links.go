// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateServiceLinks Creates a service with the appropriate integration for each external service ID passed
//
// swagger:model create_service_links
type CreateServiceLinks struct {

	// ID for the integration. This can be found by going to the edit page for the integration
	// Required: true
	ConnectionID *string `json:"connection_id"`

	// ID of the service
	// Required: true
	ExternalServiceIds *string `json:"external_service_ids"`

	// The name of the service
	// Required: true
	// Enum: [pager_duty opsgenie victorops]
	Integration *string `json:"integration"`
}

// Validate validates this create service links
func (m *CreateServiceLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalServiceIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateServiceLinks) validateConnectionID(formats strfmt.Registry) error {

	if err := validate.Required("connection_id", "body", m.ConnectionID); err != nil {
		return err
	}

	return nil
}

func (m *CreateServiceLinks) validateExternalServiceIds(formats strfmt.Registry) error {

	if err := validate.Required("external_service_ids", "body", m.ExternalServiceIds); err != nil {
		return err
	}

	return nil
}

var createServiceLinksTypeIntegrationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pager_duty","opsgenie","victorops"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createServiceLinksTypeIntegrationPropEnum = append(createServiceLinksTypeIntegrationPropEnum, v)
	}
}

const (

	// CreateServiceLinksIntegrationPagerDuty captures enum value "pager_duty"
	CreateServiceLinksIntegrationPagerDuty string = "pager_duty"

	// CreateServiceLinksIntegrationOpsgenie captures enum value "opsgenie"
	CreateServiceLinksIntegrationOpsgenie string = "opsgenie"

	// CreateServiceLinksIntegrationVictorops captures enum value "victorops"
	CreateServiceLinksIntegrationVictorops string = "victorops"
)

// prop value enum
func (m *CreateServiceLinks) validateIntegrationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createServiceLinksTypeIntegrationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateServiceLinks) validateIntegration(formats strfmt.Registry) error {

	if err := validate.Required("integration", "body", m.Integration); err != nil {
		return err
	}

	// value enum
	if err := m.validateIntegrationEnum("integration", "body", *m.Integration); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create service links based on context it is used
func (m *CreateServiceLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateServiceLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateServiceLinks) UnmarshalBinary(b []byte) error {
	var res CreateServiceLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
