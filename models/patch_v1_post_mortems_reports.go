// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PatchV1PostMortemsReports Update a post mortem report
//
// swagger:model patchV1PostMortemsReports
type PatchV1PostMortemsReports struct {

	// additional details
	AdditionalDetails string `json:"additional_details,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// questions
	Questions []*PatchV1PostMortemsReportsQuestionsItems0 `json:"questions"`

	// summary
	Summary string `json:"summary,omitempty"`
}

// Validate validates this patch v1 post mortems reports
func (m *PatchV1PostMortemsReports) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuestions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchV1PostMortemsReports) validateQuestions(formats strfmt.Registry) error {
	if swag.IsZero(m.Questions) { // not required
		return nil
	}

	for i := 0; i < len(m.Questions); i++ {
		if swag.IsZero(m.Questions[i]) { // not required
			continue
		}

		if m.Questions[i] != nil {
			if err := m.Questions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("questions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("questions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this patch v1 post mortems reports based on the context it is used
func (m *PatchV1PostMortemsReports) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQuestions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchV1PostMortemsReports) contextValidateQuestions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Questions); i++ {

		if m.Questions[i] != nil {
			if err := m.Questions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("questions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("questions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchV1PostMortemsReports) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchV1PostMortemsReports) UnmarshalBinary(b []byte) error {
	var res PatchV1PostMortemsReports
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchV1PostMortemsReportsQuestionsItems0 patch v1 post mortems reports questions items0
//
// swagger:model PatchV1PostMortemsReportsQuestionsItems0
type PatchV1PostMortemsReportsQuestionsItems0 struct {

	// Answer to question
	Body string `json:"body,omitempty"`

	// ID of a question
	ID string `json:"id,omitempty"`
}

// Validate validates this patch v1 post mortems reports questions items0
func (m *PatchV1PostMortemsReportsQuestionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this patch v1 post mortems reports questions items0 based on context it is used
func (m *PatchV1PostMortemsReportsQuestionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchV1PostMortemsReportsQuestionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchV1PostMortemsReportsQuestionsItems0) UnmarshalBinary(b []byte) error {
	var res PatchV1PostMortemsReportsQuestionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
