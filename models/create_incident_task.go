// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateIncidentTask Create a task
//
// swagger:model create_incident_task
type CreateIncidentTask struct {

	// The ID of the user assigned to the task.
	AssigneeID string `json:"assignee_id,omitempty"`

	// A description of what the task is for.
	Description string `json:"description,omitempty"`

	// The due date of the task. Relative values are supported such as '5m'
	DueAt string `json:"due_at,omitempty"`

	// The state of the task. One of: open, in_progress, cancelled, done
	State string `json:"state,omitempty"`

	// The title of the task.
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this create incident task
func (m *CreateIncidentTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateIncidentTask) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create incident task based on context it is used
func (m *CreateIncidentTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateIncidentTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateIncidentTask) UnmarshalBinary(b []byte) error {
	var res CreateIncidentTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
