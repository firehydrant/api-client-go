// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateIncidentChangeEvent Add a related change to an incident. Changes added to an incident can be causes, fixes, or suspects. To remove a change from an incident, the type field should be set to dismissed.
//
// swagger:model create_incident_change_event
type CreateIncidentChangeEvent struct {

	// The ID of the change event to associate
	// Required: true
	ChangeEventID *string `json:"change_event_id"`

	// type
	// Required: true
	// Enum: [caused fixed suspect dismissed]
	Type *string `json:"type"`

	// A short description about why this change event is related
	Why string `json:"why,omitempty"`
}

// Validate validates this create incident change event
func (m *CreateIncidentChangeEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChangeEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateIncidentChangeEvent) validateChangeEventID(formats strfmt.Registry) error {

	if err := validate.Required("change_event_id", "body", m.ChangeEventID); err != nil {
		return err
	}

	return nil
}

var createIncidentChangeEventTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["caused","fixed","suspect","dismissed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createIncidentChangeEventTypeTypePropEnum = append(createIncidentChangeEventTypeTypePropEnum, v)
	}
}

const (

	// CreateIncidentChangeEventTypeCaused captures enum value "caused"
	CreateIncidentChangeEventTypeCaused string = "caused"

	// CreateIncidentChangeEventTypeFixed captures enum value "fixed"
	CreateIncidentChangeEventTypeFixed string = "fixed"

	// CreateIncidentChangeEventTypeSuspect captures enum value "suspect"
	CreateIncidentChangeEventTypeSuspect string = "suspect"

	// CreateIncidentChangeEventTypeDismissed captures enum value "dismissed"
	CreateIncidentChangeEventTypeDismissed string = "dismissed"
)

// prop value enum
func (m *CreateIncidentChangeEvent) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createIncidentChangeEventTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateIncidentChangeEvent) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create incident change event based on context it is used
func (m *CreateIncidentChangeEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateIncidentChangeEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateIncidentChangeEvent) UnmarshalBinary(b []byte) error {
	var res CreateIncidentChangeEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
