// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateTeamSignalRule Create a Signals rule for a team.
//
// swagger:model create_team_signal_rule
type CreateTeamSignalRule struct {

	// Determines when an incident should be created when this rule is matched
	// Enum: [WHEN_UNSPECIFIED WHEN_ALWAYS]
	CreateIncidentConditionWhen string `json:"create_incident_condition_when,omitempty"`

	// The amount of time alerts created from this rule will be deduplicated
	DeduplicationExpiry string `json:"deduplication_expiry,omitempty"`

	// The CEL expression that defines the rule.
	// Required: true
	Expression *string `json:"expression"`

	// The ID of an incident type that should be used when an alert is promoted to an incident
	IncidentTypeID string `json:"incident_type_id,omitempty"`

	// The rule's name.
	// Required: true
	Name *string `json:"name"`

	// A notification priority that will be set on the resulting alert (default: HIGH)
	// Enum: [HIGH MEDIUM LOW ]
	NotificationPriorityOverride string `json:"notification_priority_override,omitempty"`

	// The ID of the target that the rule will notify when matched.
	// Required: true
	TargetID *string `json:"target_id"`

	// The type of target that the rule will notify when matched.
	// Required: true
	// Enum: [EscalationPolicy OnCallSchedule User Webhook SlackChannel]
	TargetType *string `json:"target_type"`
}

// Validate validates this create team signal rule
func (m *CreateTeamSignalRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateIncidentConditionWhen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpression(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationPriorityOverride(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createTeamSignalRuleTypeCreateIncidentConditionWhenPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WHEN_UNSPECIFIED","WHEN_ALWAYS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createTeamSignalRuleTypeCreateIncidentConditionWhenPropEnum = append(createTeamSignalRuleTypeCreateIncidentConditionWhenPropEnum, v)
	}
}

const (

	// CreateTeamSignalRuleCreateIncidentConditionWhenWHENUNSPECIFIED captures enum value "WHEN_UNSPECIFIED"
	CreateTeamSignalRuleCreateIncidentConditionWhenWHENUNSPECIFIED string = "WHEN_UNSPECIFIED"

	// CreateTeamSignalRuleCreateIncidentConditionWhenWHENALWAYS captures enum value "WHEN_ALWAYS"
	CreateTeamSignalRuleCreateIncidentConditionWhenWHENALWAYS string = "WHEN_ALWAYS"
)

// prop value enum
func (m *CreateTeamSignalRule) validateCreateIncidentConditionWhenEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createTeamSignalRuleTypeCreateIncidentConditionWhenPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateTeamSignalRule) validateCreateIncidentConditionWhen(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateIncidentConditionWhen) { // not required
		return nil
	}

	// value enum
	if err := m.validateCreateIncidentConditionWhenEnum("create_incident_condition_when", "body", m.CreateIncidentConditionWhen); err != nil {
		return err
	}

	return nil
}

func (m *CreateTeamSignalRule) validateExpression(formats strfmt.Registry) error {

	if err := validate.Required("expression", "body", m.Expression); err != nil {
		return err
	}

	return nil
}

func (m *CreateTeamSignalRule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var createTeamSignalRuleTypeNotificationPriorityOverridePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HIGH","MEDIUM","LOW",""]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createTeamSignalRuleTypeNotificationPriorityOverridePropEnum = append(createTeamSignalRuleTypeNotificationPriorityOverridePropEnum, v)
	}
}

const (

	// CreateTeamSignalRuleNotificationPriorityOverrideHIGH captures enum value "HIGH"
	CreateTeamSignalRuleNotificationPriorityOverrideHIGH string = "HIGH"

	// CreateTeamSignalRuleNotificationPriorityOverrideMEDIUM captures enum value "MEDIUM"
	CreateTeamSignalRuleNotificationPriorityOverrideMEDIUM string = "MEDIUM"

	// CreateTeamSignalRuleNotificationPriorityOverrideLOW captures enum value "LOW"
	CreateTeamSignalRuleNotificationPriorityOverrideLOW string = "LOW"

	// CreateTeamSignalRuleNotificationPriorityOverrideEmpty captures enum value ""
	CreateTeamSignalRuleNotificationPriorityOverrideEmpty string = ""
)

// prop value enum
func (m *CreateTeamSignalRule) validateNotificationPriorityOverrideEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createTeamSignalRuleTypeNotificationPriorityOverridePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateTeamSignalRule) validateNotificationPriorityOverride(formats strfmt.Registry) error {
	if swag.IsZero(m.NotificationPriorityOverride) { // not required
		return nil
	}

	// value enum
	if err := m.validateNotificationPriorityOverrideEnum("notification_priority_override", "body", m.NotificationPriorityOverride); err != nil {
		return err
	}

	return nil
}

func (m *CreateTeamSignalRule) validateTargetID(formats strfmt.Registry) error {

	if err := validate.Required("target_id", "body", m.TargetID); err != nil {
		return err
	}

	return nil
}

var createTeamSignalRuleTypeTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EscalationPolicy","OnCallSchedule","User","Webhook","SlackChannel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createTeamSignalRuleTypeTargetTypePropEnum = append(createTeamSignalRuleTypeTargetTypePropEnum, v)
	}
}

const (

	// CreateTeamSignalRuleTargetTypeEscalationPolicy captures enum value "EscalationPolicy"
	CreateTeamSignalRuleTargetTypeEscalationPolicy string = "EscalationPolicy"

	// CreateTeamSignalRuleTargetTypeOnCallSchedule captures enum value "OnCallSchedule"
	CreateTeamSignalRuleTargetTypeOnCallSchedule string = "OnCallSchedule"

	// CreateTeamSignalRuleTargetTypeUser captures enum value "User"
	CreateTeamSignalRuleTargetTypeUser string = "User"

	// CreateTeamSignalRuleTargetTypeWebhook captures enum value "Webhook"
	CreateTeamSignalRuleTargetTypeWebhook string = "Webhook"

	// CreateTeamSignalRuleTargetTypeSlackChannel captures enum value "SlackChannel"
	CreateTeamSignalRuleTargetTypeSlackChannel string = "SlackChannel"
)

// prop value enum
func (m *CreateTeamSignalRule) validateTargetTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createTeamSignalRuleTypeTargetTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateTeamSignalRule) validateTargetType(formats strfmt.Registry) error {

	if err := validate.Required("target_type", "body", m.TargetType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetTypeEnum("target_type", "body", *m.TargetType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create team signal rule based on context it is used
func (m *CreateTeamSignalRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateTeamSignalRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateTeamSignalRule) UnmarshalBinary(b []byte) error {
	var res CreateTeamSignalRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
