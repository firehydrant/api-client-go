// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IncidentEventEntity Retrieve a single event for an incident
//
// swagger:model IncidentEventEntity
type IncidentEventEntity struct {

	// author
	Author *AuthorEntity `json:"author,omitempty"`

	// context
	Context string `json:"context,omitempty"`

	// conversations
	Conversations []*Reference `json:"conversations"`

	// data
	Data string `json:"data,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// incident id
	IncidentID string `json:"incident_id,omitempty"`

	// occurred at
	OccurredAt string `json:"occurred_at,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// visibility
	Visibility string `json:"visibility,omitempty"`

	// votes
	Votes *VotesEntity `json:"votes,omitempty"`
}

// Validate validates this incident event entity
func (m *IncidentEventEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVotes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IncidentEventEntity) validateAuthor(formats strfmt.Registry) error {
	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {
		if err := m.Author.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("author")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("author")
			}
			return err
		}
	}

	return nil
}

func (m *IncidentEventEntity) validateConversations(formats strfmt.Registry) error {
	if swag.IsZero(m.Conversations) { // not required
		return nil
	}

	for i := 0; i < len(m.Conversations); i++ {
		if swag.IsZero(m.Conversations[i]) { // not required
			continue
		}

		if m.Conversations[i] != nil {
			if err := m.Conversations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conversations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conversations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentEventEntity) validateVotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Votes) { // not required
		return nil
	}

	if m.Votes != nil {
		if err := m.Votes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("votes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("votes")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this incident event entity based on the context it is used
func (m *IncidentEventEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConversations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVotes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IncidentEventEntity) contextValidateAuthor(ctx context.Context, formats strfmt.Registry) error {

	if m.Author != nil {
		if err := m.Author.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("author")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("author")
			}
			return err
		}
	}

	return nil
}

func (m *IncidentEventEntity) contextValidateConversations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conversations); i++ {

		if m.Conversations[i] != nil {
			if err := m.Conversations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conversations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conversations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentEventEntity) contextValidateVotes(ctx context.Context, formats strfmt.Registry) error {

	if m.Votes != nil {
		if err := m.Votes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("votes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("votes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IncidentEventEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IncidentEventEntity) UnmarshalBinary(b []byte) error {
	var res IncidentEventEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
