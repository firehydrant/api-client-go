// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertsSirenAlertEntity alerts siren alert entity
//
// swagger:model Alerts_SirenAlertEntity
type AlertsSirenAlertEntity struct {

	// description
	Description string `json:"description,omitempty"`

	// ends at
	// Format: date-time
	EndsAt *strfmt.DateTime `json:"ends_at,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// Arbitrary key:value pairs of labels.
	Labels interface{} `json:"labels,omitempty"`

	// remote id
	RemoteID string `json:"remote_id,omitempty"`

	// remote url
	RemoteURL string `json:"remote_url,omitempty"`

	// signal id
	SignalID string `json:"signal_id,omitempty"`

	// signal rule
	SignalRule *SignalsAPIRuleEntity `json:"signal_rule,omitempty"`

	// starts at
	// Format: date-time
	StartsAt strfmt.DateTime `json:"starts_at,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// summary
	Summary string `json:"summary,omitempty"`

	// tags
	Tags []string `json:"tags"`
}

// Validate validates this alerts siren alert entity
func (m *AlertsSirenAlertEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndsAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignalRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartsAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertsSirenAlertEntity) validateEndsAt(formats strfmt.Registry) error {
	if swag.IsZero(m.EndsAt) { // not required
		return nil
	}

	if err := validate.FormatOf("ends_at", "body", "date-time", m.EndsAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AlertsSirenAlertEntity) validateSignalRule(formats strfmt.Registry) error {
	if swag.IsZero(m.SignalRule) { // not required
		return nil
	}

	if m.SignalRule != nil {
		if err := m.SignalRule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signal_rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signal_rule")
			}
			return err
		}
	}

	return nil
}

func (m *AlertsSirenAlertEntity) validateStartsAt(formats strfmt.Registry) error {
	if swag.IsZero(m.StartsAt) { // not required
		return nil
	}

	if err := validate.FormatOf("starts_at", "body", "date-time", m.StartsAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this alerts siren alert entity based on the context it is used
func (m *AlertsSirenAlertEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSignalRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertsSirenAlertEntity) contextValidateSignalRule(ctx context.Context, formats strfmt.Registry) error {

	if m.SignalRule != nil {
		if err := m.SignalRule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signal_rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signal_rule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertsSirenAlertEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertsSirenAlertEntity) UnmarshalBinary(b []byte) error {
	var res AlertsSirenAlertEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
