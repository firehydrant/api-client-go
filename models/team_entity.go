// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TeamEntity TeamEntity model
//
// swagger:model TeamEntity
type TeamEntity struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// created by
	CreatedBy *AuthorEntity `json:"created_by,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// functionalities
	Functionalities []*FunctionalityEntityLite `json:"functionalities"`

	// id
	ID string `json:"id,omitempty"`

	// in support hours
	InSupportHours bool `json:"in_support_hours,omitempty"`

	// memberships
	Memberships []*MembershipEntity `json:"memberships"`

	// ms teams channel
	MsTeamsChannel *IntegrationsMicrosoftTeamsV2ChannelEntity `json:"ms_teams_channel,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// owned checklist templates
	OwnedChecklistTemplates []*ChecklistTemplateEntity `json:"owned_checklist_templates"`

	// owned functionalities
	OwnedFunctionalities []*FunctionalityEntityLite `json:"owned_functionalities"`

	// owned runbooks
	OwnedRunbooks []*SlimRunbookEntity `json:"owned_runbooks"`

	// owned services
	OwnedServices []*ServiceEntity `json:"owned_services"`

	// responding services
	RespondingServices []*ServiceEntity `json:"responding_services"`

	// services
	Services []*ServiceEntity `json:"services"`

	// signals ical url
	SignalsIcalURL string `json:"signals_ical_url,omitempty"`

	// slack channel
	SlackChannel *IntegrationsSlackSlackChannelEntity `json:"slack_channel,omitempty"`

	// slug
	Slug string `json:"slug,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this team entity
func (m *TeamEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunctionalities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMsTeamsChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnedChecklistTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnedFunctionalities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnedRunbooks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnedServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRespondingServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlackChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamEntity) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TeamEntity) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *TeamEntity) validateFunctionalities(formats strfmt.Registry) error {
	if swag.IsZero(m.Functionalities) { // not required
		return nil
	}

	for i := 0; i < len(m.Functionalities); i++ {
		if swag.IsZero(m.Functionalities[i]) { // not required
			continue
		}

		if m.Functionalities[i] != nil {
			if err := m.Functionalities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("functionalities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("functionalities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TeamEntity) validateMemberships(formats strfmt.Registry) error {
	if swag.IsZero(m.Memberships) { // not required
		return nil
	}

	for i := 0; i < len(m.Memberships); i++ {
		if swag.IsZero(m.Memberships[i]) { // not required
			continue
		}

		if m.Memberships[i] != nil {
			if err := m.Memberships[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberships" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("memberships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TeamEntity) validateMsTeamsChannel(formats strfmt.Registry) error {
	if swag.IsZero(m.MsTeamsChannel) { // not required
		return nil
	}

	if m.MsTeamsChannel != nil {
		if err := m.MsTeamsChannel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ms_teams_channel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ms_teams_channel")
			}
			return err
		}
	}

	return nil
}

func (m *TeamEntity) validateOwnedChecklistTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnedChecklistTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.OwnedChecklistTemplates); i++ {
		if swag.IsZero(m.OwnedChecklistTemplates[i]) { // not required
			continue
		}

		if m.OwnedChecklistTemplates[i] != nil {
			if err := m.OwnedChecklistTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("owned_checklist_templates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("owned_checklist_templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TeamEntity) validateOwnedFunctionalities(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnedFunctionalities) { // not required
		return nil
	}

	for i := 0; i < len(m.OwnedFunctionalities); i++ {
		if swag.IsZero(m.OwnedFunctionalities[i]) { // not required
			continue
		}

		if m.OwnedFunctionalities[i] != nil {
			if err := m.OwnedFunctionalities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("owned_functionalities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("owned_functionalities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TeamEntity) validateOwnedRunbooks(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnedRunbooks) { // not required
		return nil
	}

	for i := 0; i < len(m.OwnedRunbooks); i++ {
		if swag.IsZero(m.OwnedRunbooks[i]) { // not required
			continue
		}

		if m.OwnedRunbooks[i] != nil {
			if err := m.OwnedRunbooks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("owned_runbooks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("owned_runbooks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TeamEntity) validateOwnedServices(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnedServices) { // not required
		return nil
	}

	for i := 0; i < len(m.OwnedServices); i++ {
		if swag.IsZero(m.OwnedServices[i]) { // not required
			continue
		}

		if m.OwnedServices[i] != nil {
			if err := m.OwnedServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("owned_services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("owned_services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TeamEntity) validateRespondingServices(formats strfmt.Registry) error {
	if swag.IsZero(m.RespondingServices) { // not required
		return nil
	}

	for i := 0; i < len(m.RespondingServices); i++ {
		if swag.IsZero(m.RespondingServices[i]) { // not required
			continue
		}

		if m.RespondingServices[i] != nil {
			if err := m.RespondingServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("responding_services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("responding_services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TeamEntity) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TeamEntity) validateSlackChannel(formats strfmt.Registry) error {
	if swag.IsZero(m.SlackChannel) { // not required
		return nil
	}

	if m.SlackChannel != nil {
		if err := m.SlackChannel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slack_channel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slack_channel")
			}
			return err
		}
	}

	return nil
}

func (m *TeamEntity) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this team entity based on the context it is used
func (m *TeamEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFunctionalities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemberships(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMsTeamsChannel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnedChecklistTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnedFunctionalities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnedRunbooks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnedServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRespondingServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSlackChannel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamEntity) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {
		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *TeamEntity) contextValidateFunctionalities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Functionalities); i++ {

		if m.Functionalities[i] != nil {
			if err := m.Functionalities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("functionalities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("functionalities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TeamEntity) contextValidateMemberships(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Memberships); i++ {

		if m.Memberships[i] != nil {
			if err := m.Memberships[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberships" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("memberships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TeamEntity) contextValidateMsTeamsChannel(ctx context.Context, formats strfmt.Registry) error {

	if m.MsTeamsChannel != nil {
		if err := m.MsTeamsChannel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ms_teams_channel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ms_teams_channel")
			}
			return err
		}
	}

	return nil
}

func (m *TeamEntity) contextValidateOwnedChecklistTemplates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OwnedChecklistTemplates); i++ {

		if m.OwnedChecklistTemplates[i] != nil {
			if err := m.OwnedChecklistTemplates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("owned_checklist_templates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("owned_checklist_templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TeamEntity) contextValidateOwnedFunctionalities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OwnedFunctionalities); i++ {

		if m.OwnedFunctionalities[i] != nil {
			if err := m.OwnedFunctionalities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("owned_functionalities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("owned_functionalities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TeamEntity) contextValidateOwnedRunbooks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OwnedRunbooks); i++ {

		if m.OwnedRunbooks[i] != nil {
			if err := m.OwnedRunbooks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("owned_runbooks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("owned_runbooks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TeamEntity) contextValidateOwnedServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OwnedServices); i++ {

		if m.OwnedServices[i] != nil {
			if err := m.OwnedServices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("owned_services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("owned_services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TeamEntity) contextValidateRespondingServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RespondingServices); i++ {

		if m.RespondingServices[i] != nil {
			if err := m.RespondingServices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("responding_services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("responding_services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TeamEntity) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Services); i++ {

		if m.Services[i] != nil {
			if err := m.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TeamEntity) contextValidateSlackChannel(ctx context.Context, formats strfmt.Registry) error {

	if m.SlackChannel != nil {
		if err := m.SlackChannel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slack_channel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slack_channel")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TeamEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeamEntity) UnmarshalBinary(b []byte) error {
	var res TeamEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
