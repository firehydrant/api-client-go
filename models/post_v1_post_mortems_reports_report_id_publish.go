// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostV1PostMortemsReportsReportIDPublish Marks an incident retrospective as published and emails all of the participants in the report the summary
//
// swagger:model postV1PostMortemsReportsReportIdPublish
type PostV1PostMortemsReportsReportIDPublish struct {

	// publish
	// Enum: [true]
	Publish string `json:"publish,omitempty"`

	// An array of team IDs with whom to share the report
	TeamIds []string `json:"team_ids"`

	// An array of user IDs with whom to share the report
	UserIds []string `json:"user_ids"`
}

// Validate validates this post v1 post mortems reports report Id publish
func (m *PostV1PostMortemsReportsReportIDPublish) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublish(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postV1PostMortemsReportsReportIdPublishTypePublishPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["true"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postV1PostMortemsReportsReportIdPublishTypePublishPropEnum = append(postV1PostMortemsReportsReportIdPublishTypePublishPropEnum, v)
	}
}

const (

	// PostV1PostMortemsReportsReportIDPublishPublishTrue captures enum value "true"
	PostV1PostMortemsReportsReportIDPublishPublishTrue string = "true"
)

// prop value enum
func (m *PostV1PostMortemsReportsReportIDPublish) validatePublishEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postV1PostMortemsReportsReportIdPublishTypePublishPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PostV1PostMortemsReportsReportIDPublish) validatePublish(formats strfmt.Registry) error {
	if swag.IsZero(m.Publish) { // not required
		return nil
	}

	// value enum
	if err := m.validatePublishEnum("publish", "body", m.Publish); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post v1 post mortems reports report Id publish based on context it is used
func (m *PostV1PostMortemsReportsReportIDPublish) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PostV1PostMortemsReportsReportIDPublish) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostV1PostMortemsReportsReportIDPublish) UnmarshalBinary(b []byte) error {
	var res PostV1PostMortemsReportsReportIDPublish
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
