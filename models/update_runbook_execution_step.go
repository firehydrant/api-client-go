// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateRunbookExecutionStep Updates a runbook step execution, especially for changing the state of a step execution.
//
// swagger:model update_runbook_execution_step
type UpdateRunbookExecutionStep struct {

	// Data for execution of this step
	Data interface{} `json:"data,omitempty"`

	// repeats at
	// Format: date-time
	RepeatsAt strfmt.DateTime `json:"repeats_at,omitempty"`

	// schedule for
	// Format: date-time
	ScheduleFor strfmt.DateTime `json:"schedule_for,omitempty"`

	// state
	// Required: true
	State *string `json:"state"`
}

// Validate validates this update runbook execution step
func (m *UpdateRunbookExecutionStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepeatsAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleFor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateRunbookExecutionStep) validateRepeatsAt(formats strfmt.Registry) error {
	if swag.IsZero(m.RepeatsAt) { // not required
		return nil
	}

	if err := validate.FormatOf("repeats_at", "body", "date-time", m.RepeatsAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateRunbookExecutionStep) validateScheduleFor(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduleFor) { // not required
		return nil
	}

	if err := validate.FormatOf("schedule_for", "body", "date-time", m.ScheduleFor.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateRunbookExecutionStep) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update runbook execution step based on context it is used
func (m *UpdateRunbookExecutionStep) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateRunbookExecutionStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateRunbookExecutionStep) UnmarshalBinary(b []byte) error {
	var res UpdateRunbookExecutionStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
