// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DebugSignalsExpression Debug Signals expressions
//
// swagger:model debug_signals_expression
type DebugSignalsExpression struct {

	// CEL expression
	// Required: true
	Expression *string `json:"expression"`

	// List of signals to evaluate rule expression against
	// Required: true
	Signals []*DebugSignalsExpressionSignalsItems0 `json:"signals"`
}

// Validate validates this debug signals expression
func (m *DebugSignalsExpression) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpression(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DebugSignalsExpression) validateExpression(formats strfmt.Registry) error {

	if err := validate.Required("expression", "body", m.Expression); err != nil {
		return err
	}

	return nil
}

func (m *DebugSignalsExpression) validateSignals(formats strfmt.Registry) error {

	if err := validate.Required("signals", "body", m.Signals); err != nil {
		return err
	}

	for i := 0; i < len(m.Signals); i++ {
		if swag.IsZero(m.Signals[i]) { // not required
			continue
		}

		if m.Signals[i] != nil {
			if err := m.Signals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("signals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("signals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this debug signals expression based on the context it is used
func (m *DebugSignalsExpression) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSignals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DebugSignalsExpression) contextValidateSignals(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Signals); i++ {

		if m.Signals[i] != nil {
			if err := m.Signals[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("signals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("signals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DebugSignalsExpression) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DebugSignalsExpression) UnmarshalBinary(b []byte) error {
	var res DebugSignalsExpression
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DebugSignalsExpressionSignalsItems0 debug signals expression signals items0
//
// swagger:model DebugSignalsExpressionSignalsItems0
type DebugSignalsExpressionSignalsItems0 struct {

	// annotations
	Annotations interface{} `json:"annotations,omitempty"`

	// body
	Body string `json:"body,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// images
	Images []*DebugSignalsExpressionSignalsItems0ImagesItems0 `json:"images"`

	// level
	Level string `json:"level,omitempty"`

	// links
	Links []*DebugSignalsExpressionSignalsItems0LinksItems0 `json:"links"`

	// organization id
	OrganizationID string `json:"organization_id,omitempty"`

	// summary
	Summary string `json:"summary,omitempty"`

	// tags
	Tags []string `json:"tags"`
}

// Validate validates this debug signals expression signals items0
func (m *DebugSignalsExpressionSignalsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DebugSignalsExpressionSignalsItems0) validateImages(formats strfmt.Registry) error {
	if swag.IsZero(m.Images) { // not required
		return nil
	}

	for i := 0; i < len(m.Images); i++ {
		if swag.IsZero(m.Images[i]) { // not required
			continue
		}

		if m.Images[i] != nil {
			if err := m.Images[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DebugSignalsExpressionSignalsItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this debug signals expression signals items0 based on the context it is used
func (m *DebugSignalsExpressionSignalsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DebugSignalsExpressionSignalsItems0) contextValidateImages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Images); i++ {

		if m.Images[i] != nil {
			if err := m.Images[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DebugSignalsExpressionSignalsItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Links); i++ {

		if m.Links[i] != nil {
			if err := m.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DebugSignalsExpressionSignalsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DebugSignalsExpressionSignalsItems0) UnmarshalBinary(b []byte) error {
	var res DebugSignalsExpressionSignalsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DebugSignalsExpressionSignalsItems0ImagesItems0 debug signals expression signals items0 images items0
//
// swagger:model DebugSignalsExpressionSignalsItems0ImagesItems0
type DebugSignalsExpressionSignalsItems0ImagesItems0 struct {

	// alt
	Alt string `json:"alt,omitempty"`

	// src
	Src string `json:"src,omitempty"`
}

// Validate validates this debug signals expression signals items0 images items0
func (m *DebugSignalsExpressionSignalsItems0ImagesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this debug signals expression signals items0 images items0 based on context it is used
func (m *DebugSignalsExpressionSignalsItems0ImagesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DebugSignalsExpressionSignalsItems0ImagesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DebugSignalsExpressionSignalsItems0ImagesItems0) UnmarshalBinary(b []byte) error {
	var res DebugSignalsExpressionSignalsItems0ImagesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DebugSignalsExpressionSignalsItems0LinksItems0 debug signals expression signals items0 links items0
//
// swagger:model DebugSignalsExpressionSignalsItems0LinksItems0
type DebugSignalsExpressionSignalsItems0LinksItems0 struct {

	// href
	Href string `json:"href,omitempty"`

	// text
	Text string `json:"text,omitempty"`
}

// Validate validates this debug signals expression signals items0 links items0
func (m *DebugSignalsExpressionSignalsItems0LinksItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this debug signals expression signals items0 links items0 based on context it is used
func (m *DebugSignalsExpressionSignalsItems0LinksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DebugSignalsExpressionSignalsItems0LinksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DebugSignalsExpressionSignalsItems0LinksItems0) UnmarshalBinary(b []byte) error {
	var res DebugSignalsExpressionSignalsItems0LinksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
