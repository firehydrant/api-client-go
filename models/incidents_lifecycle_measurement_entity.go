// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IncidentsLifecycleMeasurementEntity incidents lifecycle measurement entity
//
// swagger:model Incidents_LifecycleMeasurementEntity
type IncidentsLifecycleMeasurementEntity struct {

	// calculated at
	// Format: date-time
	CalculatedAt strfmt.DateTime `json:"calculated_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// ends at milestone
	EndsAtMilestone string `json:"ends_at_milestone,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// slug
	Slug string `json:"slug,omitempty"`

	// starts at milestone
	StartsAtMilestone string `json:"starts_at_milestone,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this incidents lifecycle measurement entity
func (m *IncidentsLifecycleMeasurementEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCalculatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IncidentsLifecycleMeasurementEntity) validateCalculatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("calculated_at", "body", "date-time", m.CalculatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this incidents lifecycle measurement entity based on context it is used
func (m *IncidentsLifecycleMeasurementEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IncidentsLifecycleMeasurementEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IncidentsLifecycleMeasurementEntity) UnmarshalBinary(b []byte) error {
	var res IncidentsLifecycleMeasurementEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
