// Code generated by go-swagger; DO NOT EDIT.

package communication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new communication API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for communication API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1StatusUpdateTemplatesStatusUpdateTemplateID(params *DeleteV1StatusUpdateTemplatesStatusUpdateTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1StatusUpdateTemplatesStatusUpdateTemplateIDOK, error)

	GetV1StatusUpdateTemplates(params *GetV1StatusUpdateTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1StatusUpdateTemplatesOK, error)

	GetV1StatusUpdateTemplatesStatusUpdateTemplateID(params *GetV1StatusUpdateTemplatesStatusUpdateTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1StatusUpdateTemplatesStatusUpdateTemplateIDOK, error)

	PatchV1StatusUpdateTemplatesStatusUpdateTemplateID(params *PatchV1StatusUpdateTemplatesStatusUpdateTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1StatusUpdateTemplatesStatusUpdateTemplateIDOK, error)

	PostV1StatusUpdateTemplates(params *PostV1StatusUpdateTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1StatusUpdateTemplatesCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1StatusUpdateTemplatesStatusUpdateTemplateID deletes a status update template

Delete a single status update template
*/
func (a *Client) DeleteV1StatusUpdateTemplatesStatusUpdateTemplateID(params *DeleteV1StatusUpdateTemplatesStatusUpdateTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1StatusUpdateTemplatesStatusUpdateTemplateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1StatusUpdateTemplatesStatusUpdateTemplateIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1StatusUpdateTemplatesStatusUpdateTemplateId",
		Method:             "DELETE",
		PathPattern:        "/v1/status_update_templates/{status_update_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1StatusUpdateTemplatesStatusUpdateTemplateIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1StatusUpdateTemplatesStatusUpdateTemplateIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1StatusUpdateTemplatesStatusUpdateTemplateId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1StatusUpdateTemplates lists status update templates

List all status update templates for your organization
*/
func (a *Client) GetV1StatusUpdateTemplates(params *GetV1StatusUpdateTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1StatusUpdateTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1StatusUpdateTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1StatusUpdateTemplates",
		Method:             "GET",
		PathPattern:        "/v1/status_update_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1StatusUpdateTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1StatusUpdateTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1StatusUpdateTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1StatusUpdateTemplatesStatusUpdateTemplateID gets a status update template

Get a single status update template by ID
*/
func (a *Client) GetV1StatusUpdateTemplatesStatusUpdateTemplateID(params *GetV1StatusUpdateTemplatesStatusUpdateTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1StatusUpdateTemplatesStatusUpdateTemplateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1StatusUpdateTemplatesStatusUpdateTemplateIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1StatusUpdateTemplatesStatusUpdateTemplateId",
		Method:             "GET",
		PathPattern:        "/v1/status_update_templates/{status_update_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1StatusUpdateTemplatesStatusUpdateTemplateIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1StatusUpdateTemplatesStatusUpdateTemplateIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1StatusUpdateTemplatesStatusUpdateTemplateId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1StatusUpdateTemplatesStatusUpdateTemplateID updates a status update template

Update a single status update template
*/
func (a *Client) PatchV1StatusUpdateTemplatesStatusUpdateTemplateID(params *PatchV1StatusUpdateTemplatesStatusUpdateTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1StatusUpdateTemplatesStatusUpdateTemplateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1StatusUpdateTemplatesStatusUpdateTemplateIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1StatusUpdateTemplatesStatusUpdateTemplateId",
		Method:             "PATCH",
		PathPattern:        "/v1/status_update_templates/{status_update_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1StatusUpdateTemplatesStatusUpdateTemplateIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1StatusUpdateTemplatesStatusUpdateTemplateIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1StatusUpdateTemplatesStatusUpdateTemplateId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1StatusUpdateTemplates creates a status update template

Create a status update template for your organization
*/
func (a *Client) PostV1StatusUpdateTemplates(params *PostV1StatusUpdateTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1StatusUpdateTemplatesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1StatusUpdateTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1StatusUpdateTemplates",
		Method:             "POST",
		PathPattern:        "/v1/status_update_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1StatusUpdateTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1StatusUpdateTemplatesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1StatusUpdateTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
