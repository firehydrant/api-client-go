// Code generated by go-swagger; DO NOT EDIT.

package communication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new communication API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for communication API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateStatusUpdateTemplate(params *CreateStatusUpdateTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStatusUpdateTemplateCreated, error)

	DeleteStatusUpdateTemplate(params *DeleteStatusUpdateTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStatusUpdateTemplateOK, error)

	GetStatusUpdateTemplate(params *GetStatusUpdateTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStatusUpdateTemplateOK, error)

	ListStatusUpdateTemplates(params *ListStatusUpdateTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListStatusUpdateTemplatesOK, error)

	UpdateStatusUpdateTemplate(params *UpdateStatusUpdateTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStatusUpdateTemplateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateStatusUpdateTemplate creates a status update template

Create a status update template for your organization
*/
func (a *Client) CreateStatusUpdateTemplate(params *CreateStatusUpdateTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStatusUpdateTemplateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStatusUpdateTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_status_update_template",
		Method:             "POST",
		PathPattern:        "/v1/status_update_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateStatusUpdateTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStatusUpdateTemplateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_status_update_template: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteStatusUpdateTemplate deletes a status update template

Delete a single status update template
*/
func (a *Client) DeleteStatusUpdateTemplate(params *DeleteStatusUpdateTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStatusUpdateTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStatusUpdateTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_status_update_template",
		Method:             "DELETE",
		PathPattern:        "/v1/status_update_templates/{status_update_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStatusUpdateTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStatusUpdateTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_status_update_template: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStatusUpdateTemplate gets a status update template

Get a single status update template by ID
*/
func (a *Client) GetStatusUpdateTemplate(params *GetStatusUpdateTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStatusUpdateTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatusUpdateTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_status_update_template",
		Method:             "GET",
		PathPattern:        "/v1/status_update_templates/{status_update_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStatusUpdateTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStatusUpdateTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_status_update_template: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListStatusUpdateTemplates lists status update templates

List all status update templates for your organization
*/
func (a *Client) ListStatusUpdateTemplates(params *ListStatusUpdateTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListStatusUpdateTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStatusUpdateTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_status_update_templates",
		Method:             "GET",
		PathPattern:        "/v1/status_update_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListStatusUpdateTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStatusUpdateTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_status_update_templates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateStatusUpdateTemplate updates a status update template

Update a single status update template
*/
func (a *Client) UpdateStatusUpdateTemplate(params *UpdateStatusUpdateTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStatusUpdateTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStatusUpdateTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_status_update_template",
		Method:             "PATCH",
		PathPattern:        "/v1/status_update_templates/{status_update_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStatusUpdateTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStatusUpdateTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_status_update_template: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
