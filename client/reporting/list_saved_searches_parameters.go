// Code generated by go-swagger; DO NOT EDIT.

package reporting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListSavedSearchesParams creates a new ListSavedSearchesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListSavedSearchesParams() *ListSavedSearchesParams {
	return &ListSavedSearchesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListSavedSearchesParamsWithTimeout creates a new ListSavedSearchesParams object
// with the ability to set a timeout on a request.
func NewListSavedSearchesParamsWithTimeout(timeout time.Duration) *ListSavedSearchesParams {
	return &ListSavedSearchesParams{
		timeout: timeout,
	}
}

// NewListSavedSearchesParamsWithContext creates a new ListSavedSearchesParams object
// with the ability to set a context for a request.
func NewListSavedSearchesParamsWithContext(ctx context.Context) *ListSavedSearchesParams {
	return &ListSavedSearchesParams{
		Context: ctx,
	}
}

// NewListSavedSearchesParamsWithHTTPClient creates a new ListSavedSearchesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListSavedSearchesParamsWithHTTPClient(client *http.Client) *ListSavedSearchesParams {
	return &ListSavedSearchesParams{
		HTTPClient: client,
	}
}

/*
ListSavedSearchesParams contains all the parameters to send to the API endpoint

	for the list saved searches operation.

	Typically these are written to a http.Request.
*/
type ListSavedSearchesParams struct {

	// Page.
	//
	// Format: int32
	Page *int32

	// PerPage.
	//
	// Format: int32
	PerPage *int32

	/* Query.

	   Filter saved searches with a query on their name
	*/
	Query *string

	// ResourceType.
	ResourceType string

	/* UserID.

	   The user ID used to filter saved searches.
	*/
	UserID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list saved searches params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListSavedSearchesParams) WithDefaults() *ListSavedSearchesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list saved searches params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListSavedSearchesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list saved searches params
func (o *ListSavedSearchesParams) WithTimeout(timeout time.Duration) *ListSavedSearchesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list saved searches params
func (o *ListSavedSearchesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list saved searches params
func (o *ListSavedSearchesParams) WithContext(ctx context.Context) *ListSavedSearchesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list saved searches params
func (o *ListSavedSearchesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list saved searches params
func (o *ListSavedSearchesParams) WithHTTPClient(client *http.Client) *ListSavedSearchesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list saved searches params
func (o *ListSavedSearchesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPage adds the page to the list saved searches params
func (o *ListSavedSearchesParams) WithPage(page *int32) *ListSavedSearchesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list saved searches params
func (o *ListSavedSearchesParams) SetPage(page *int32) {
	o.Page = page
}

// WithPerPage adds the perPage to the list saved searches params
func (o *ListSavedSearchesParams) WithPerPage(perPage *int32) *ListSavedSearchesParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the list saved searches params
func (o *ListSavedSearchesParams) SetPerPage(perPage *int32) {
	o.PerPage = perPage
}

// WithQuery adds the query to the list saved searches params
func (o *ListSavedSearchesParams) WithQuery(query *string) *ListSavedSearchesParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the list saved searches params
func (o *ListSavedSearchesParams) SetQuery(query *string) {
	o.Query = query
}

// WithResourceType adds the resourceType to the list saved searches params
func (o *ListSavedSearchesParams) WithResourceType(resourceType string) *ListSavedSearchesParams {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the list saved searches params
func (o *ListSavedSearchesParams) SetResourceType(resourceType string) {
	o.ResourceType = resourceType
}

// WithUserID adds the userID to the list saved searches params
func (o *ListSavedSearchesParams) WithUserID(userID *string) *ListSavedSearchesParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the list saved searches params
func (o *ListSavedSearchesParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *ListSavedSearchesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int32

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt32(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	// path param resource_type
	if err := r.SetPathParam("resource_type", o.ResourceType); err != nil {
		return err
	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID string

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {

			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
