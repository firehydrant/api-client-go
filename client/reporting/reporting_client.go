// Code generated by go-swagger; DO NOT EDIT.

package reporting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new reporting API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for reporting API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSavedSearch(params *CreateSavedSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSavedSearchCreated, error)

	DeleteSavedSearch(params *DeleteSavedSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSavedSearchOK, error)

	ExportSignalsShiftAnalytics(params *ExportSignalsShiftAnalyticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportSignalsShiftAnalyticsOK, error)

	GetMeanTimeReport(params *GetMeanTimeReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMeanTimeReportOK, error)

	GetSavedSearch(params *GetSavedSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedSearchOK, error)

	GetSignalsGroupedMetrics(params *GetSignalsGroupedMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSignalsGroupedMetricsOK, error)

	GetSignalsMttxAnalytics(params *GetSignalsMttxAnalyticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSignalsMttxAnalyticsOK, error)

	GetSignalsTimeseriesAnalytics(params *GetSignalsTimeseriesAnalyticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSignalsTimeseriesAnalyticsOK, error)

	ListIncidentMetrics(params *ListIncidentMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentMetricsOK, error)

	ListInfrastructureMetrics(params *ListInfrastructureMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListInfrastructureMetricsOK, error)

	ListInfrastructureTypeMetrics(params *ListInfrastructureTypeMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListInfrastructureTypeMetricsOK, error)

	ListMilestoneFunnelMetrics(params *ListMilestoneFunnelMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMilestoneFunnelMetricsOK, error)

	ListMttxMetrics(params *ListMttxMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMttxMetricsOK, error)

	ListRetrospectiveMetrics(params *ListRetrospectiveMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRetrospectiveMetricsOK, error)

	ListSavedSearches(params *ListSavedSearchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSavedSearchesOK, error)

	ListTicketFunnelMetrics(params *ListTicketFunnelMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTicketFunnelMetricsOK, error)

	ListUserInvolvementMetrics(params *ListUserInvolvementMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUserInvolvementMetricsOK, error)

	UpdateSavedSearch(params *UpdateSavedSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSavedSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateSavedSearch creates a saved search

Create a new saved search for a particular resource type
*/
func (a *Client) CreateSavedSearch(params *CreateSavedSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSavedSearchCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSavedSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_saved_search",
		Method:             "POST",
		PathPattern:        "/v1/saved_searches/{resource_type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSavedSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSavedSearchCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_saved_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSavedSearch deletes a saved search

Delete a specific saved search
*/
func (a *Client) DeleteSavedSearch(params *DeleteSavedSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSavedSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSavedSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_saved_search",
		Method:             "DELETE",
		PathPattern:        "/v1/saved_searches/{resource_type}/{saved_search_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSavedSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSavedSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_saved_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExportSignalsShiftAnalytics exports on call hours report

Export on-call hours report for users/teams during a time period
*/
func (a *Client) ExportSignalsShiftAnalytics(params *ExportSignalsShiftAnalyticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportSignalsShiftAnalyticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportSignalsShiftAnalyticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "export_signals_shift_analytics",
		Method:             "GET",
		PathPattern:        "/v1/signals/analytics/shifts/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExportSignalsShiftAnalyticsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportSignalsShiftAnalyticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for export_signals_shift_analytics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMeanTimeReport gets mean time metrics for incidents

Returns a report with time bucketed analytics data
*/
func (a *Client) GetMeanTimeReport(params *GetMeanTimeReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMeanTimeReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeanTimeReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_mean_time_report",
		Method:             "GET",
		PathPattern:        "/v1/reports/mean_time",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeanTimeReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMeanTimeReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_mean_time_report: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSavedSearch gets a saved search

Retrieve a specific save search
*/
func (a *Client) GetSavedSearch(params *GetSavedSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSavedSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_saved_search",
		Method:             "GET",
		PathPattern:        "/v1/saved_searches/{resource_type}/{saved_search_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSavedSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSavedSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_saved_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSignalsGroupedMetrics generates grouped alert metrics

Generate a report of grouped metrics for Signals alerts
*/
func (a *Client) GetSignalsGroupedMetrics(params *GetSignalsGroupedMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSignalsGroupedMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSignalsGroupedMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_signals_grouped_metrics",
		Method:             "GET",
		PathPattern:        "/v1/signals/analytics/grouped_metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSignalsGroupedMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSignalsGroupedMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_signals_grouped_metrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSignalsMttxAnalytics gets m t t x analytics for signals

Get mean-time-to-acknowledged (MTTA) and mean-time-to-resolved (MTTR) metrics for Signals alerts
*/
func (a *Client) GetSignalsMttxAnalytics(params *GetSignalsMttxAnalyticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSignalsMttxAnalyticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSignalsMttxAnalyticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_signals_mttx_analytics",
		Method:             "GET",
		PathPattern:        "/v1/signals/analytics/mttx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSignalsMttxAnalyticsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSignalsMttxAnalyticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_signals_mttx_analytics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSignalsTimeseriesAnalytics generates timeseries alert metrics

Generate a timeseries-based report of metrics for Signals alerts
*/
func (a *Client) GetSignalsTimeseriesAnalytics(params *GetSignalsTimeseriesAnalyticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSignalsTimeseriesAnalyticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSignalsTimeseriesAnalyticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_signals_timeseries_analytics",
		Method:             "GET",
		PathPattern:        "/v1/signals/analytics/timeseries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSignalsTimeseriesAnalyticsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSignalsTimeseriesAnalyticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_signals_timeseries_analytics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIncidentMetrics lists incident metrics and analytics

Returns a report with time bucketed analytics data
*/
func (a *Client) ListIncidentMetrics(params *ListIncidentMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIncidentMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_incident_metrics",
		Method:             "GET",
		PathPattern:        "/v1/metrics/incidents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIncidentMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIncidentMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_incident_metrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListInfrastructureMetrics gets metrics for a component

Return metrics for a specific component
*/
func (a *Client) ListInfrastructureMetrics(params *ListInfrastructureMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListInfrastructureMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInfrastructureMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_infrastructure_metrics",
		Method:             "GET",
		PathPattern:        "/v1/metrics/{infra_type}/{infra_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListInfrastructureMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListInfrastructureMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_infrastructure_metrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListInfrastructureTypeMetrics lists metrics for a component type

Returns metrics for all components of a given type
*/
func (a *Client) ListInfrastructureTypeMetrics(params *ListInfrastructureTypeMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListInfrastructureTypeMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInfrastructureTypeMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_infrastructure_type_metrics",
		Method:             "GET",
		PathPattern:        "/v1/metrics/{infra_type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListInfrastructureTypeMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListInfrastructureTypeMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_infrastructure_type_metrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListMilestoneFunnelMetrics lists milestone funnel metrics

Returns a report with time bucketed milestone data
*/
func (a *Client) ListMilestoneFunnelMetrics(params *ListMilestoneFunnelMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMilestoneFunnelMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMilestoneFunnelMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_milestone_funnel_metrics",
		Method:             "GET",
		PathPattern:        "/v1/metrics/milestone_funnel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMilestoneFunnelMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMilestoneFunnelMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_milestone_funnel_metrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListMttxMetrics gets infrastructure metrics

Fetch infrastructure metrics based on custom query
*/
func (a *Client) ListMttxMetrics(params *ListMttxMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMttxMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMttxMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_mttx_metrics",
		Method:             "GET",
		PathPattern:        "/v1/metrics/mttx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMttxMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMttxMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_mttx_metrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRetrospectiveMetrics lists retrospective metrics

Returns a report with retrospective analytics data
*/
func (a *Client) ListRetrospectiveMetrics(params *ListRetrospectiveMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRetrospectiveMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRetrospectiveMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_retrospective_metrics",
		Method:             "GET",
		PathPattern:        "/v1/metrics/retrospectives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRetrospectiveMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRetrospectiveMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_retrospective_metrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSavedSearches lists saved searches

Lists saved searches
*/
func (a *Client) ListSavedSearches(params *ListSavedSearchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSavedSearchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSavedSearchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_saved_searches",
		Method:             "GET",
		PathPattern:        "/v1/saved_searches/{resource_type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSavedSearchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSavedSearchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_saved_searches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTicketFunnelMetrics lists ticket task and follow up creation and completion metrics

Returns a report with task and follow up creation and completion data
*/
func (a *Client) ListTicketFunnelMetrics(params *ListTicketFunnelMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTicketFunnelMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTicketFunnelMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_ticket_funnel_metrics",
		Method:             "GET",
		PathPattern:        "/v1/metrics/ticket_funnel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTicketFunnelMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTicketFunnelMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_ticket_funnel_metrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListUserInvolvementMetrics lists user metrics

Returns a report with time bucketed analytics data
*/
func (a *Client) ListUserInvolvementMetrics(params *ListUserInvolvementMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUserInvolvementMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUserInvolvementMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_user_involvement_metrics",
		Method:             "GET",
		PathPattern:        "/v1/metrics/user_involvements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListUserInvolvementMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUserInvolvementMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_user_involvement_metrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSavedSearch updates a saved search

Update a specific saved search
*/
func (a *Client) UpdateSavedSearch(params *UpdateSavedSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSavedSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSavedSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_saved_search",
		Method:             "PATCH",
		PathPattern:        "/v1/saved_searches/{resource_type}/{saved_search_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSavedSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSavedSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_saved_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
