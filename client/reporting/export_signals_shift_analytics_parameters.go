// Code generated by go-swagger; DO NOT EDIT.

package reporting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewExportSignalsShiftAnalyticsParams creates a new ExportSignalsShiftAnalyticsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewExportSignalsShiftAnalyticsParams() *ExportSignalsShiftAnalyticsParams {
	return &ExportSignalsShiftAnalyticsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewExportSignalsShiftAnalyticsParamsWithTimeout creates a new ExportSignalsShiftAnalyticsParams object
// with the ability to set a timeout on a request.
func NewExportSignalsShiftAnalyticsParamsWithTimeout(timeout time.Duration) *ExportSignalsShiftAnalyticsParams {
	return &ExportSignalsShiftAnalyticsParams{
		timeout: timeout,
	}
}

// NewExportSignalsShiftAnalyticsParamsWithContext creates a new ExportSignalsShiftAnalyticsParams object
// with the ability to set a context for a request.
func NewExportSignalsShiftAnalyticsParamsWithContext(ctx context.Context) *ExportSignalsShiftAnalyticsParams {
	return &ExportSignalsShiftAnalyticsParams{
		Context: ctx,
	}
}

// NewExportSignalsShiftAnalyticsParamsWithHTTPClient creates a new ExportSignalsShiftAnalyticsParams object
// with the ability to set a custom HTTPClient for a request.
func NewExportSignalsShiftAnalyticsParamsWithHTTPClient(client *http.Client) *ExportSignalsShiftAnalyticsParams {
	return &ExportSignalsShiftAnalyticsParams{
		HTTPClient: client,
	}
}

/*
ExportSignalsShiftAnalyticsParams contains all the parameters to send to the API endpoint

	for the export signals shift analytics operation.

	Typically these are written to a http.Request.
*/
type ExportSignalsShiftAnalyticsParams struct {

	/* PeriodEnd.

	   End of the period to fetch hours for (UTC)

	   Format: date-time
	*/
	PeriodEnd strfmt.DateTime

	/* PeriodStart.

	   Start of the period to fetch hours for (UTC)

	   Format: date-time
	*/
	PeriodStart strfmt.DateTime

	/* TeamIds.

	   Array of team IDs to fetch oncall hours for
	*/
	TeamIds []string

	/* UserIds.

	   Array of user IDs to fetch oncall hours for
	*/
	UserIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the export signals shift analytics params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExportSignalsShiftAnalyticsParams) WithDefaults() *ExportSignalsShiftAnalyticsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the export signals shift analytics params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExportSignalsShiftAnalyticsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the export signals shift analytics params
func (o *ExportSignalsShiftAnalyticsParams) WithTimeout(timeout time.Duration) *ExportSignalsShiftAnalyticsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the export signals shift analytics params
func (o *ExportSignalsShiftAnalyticsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the export signals shift analytics params
func (o *ExportSignalsShiftAnalyticsParams) WithContext(ctx context.Context) *ExportSignalsShiftAnalyticsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the export signals shift analytics params
func (o *ExportSignalsShiftAnalyticsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the export signals shift analytics params
func (o *ExportSignalsShiftAnalyticsParams) WithHTTPClient(client *http.Client) *ExportSignalsShiftAnalyticsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the export signals shift analytics params
func (o *ExportSignalsShiftAnalyticsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPeriodEnd adds the periodEnd to the export signals shift analytics params
func (o *ExportSignalsShiftAnalyticsParams) WithPeriodEnd(periodEnd strfmt.DateTime) *ExportSignalsShiftAnalyticsParams {
	o.SetPeriodEnd(periodEnd)
	return o
}

// SetPeriodEnd adds the periodEnd to the export signals shift analytics params
func (o *ExportSignalsShiftAnalyticsParams) SetPeriodEnd(periodEnd strfmt.DateTime) {
	o.PeriodEnd = periodEnd
}

// WithPeriodStart adds the periodStart to the export signals shift analytics params
func (o *ExportSignalsShiftAnalyticsParams) WithPeriodStart(periodStart strfmt.DateTime) *ExportSignalsShiftAnalyticsParams {
	o.SetPeriodStart(periodStart)
	return o
}

// SetPeriodStart adds the periodStart to the export signals shift analytics params
func (o *ExportSignalsShiftAnalyticsParams) SetPeriodStart(periodStart strfmt.DateTime) {
	o.PeriodStart = periodStart
}

// WithTeamIds adds the teamIds to the export signals shift analytics params
func (o *ExportSignalsShiftAnalyticsParams) WithTeamIds(teamIds []string) *ExportSignalsShiftAnalyticsParams {
	o.SetTeamIds(teamIds)
	return o
}

// SetTeamIds adds the teamIds to the export signals shift analytics params
func (o *ExportSignalsShiftAnalyticsParams) SetTeamIds(teamIds []string) {
	o.TeamIds = teamIds
}

// WithUserIds adds the userIds to the export signals shift analytics params
func (o *ExportSignalsShiftAnalyticsParams) WithUserIds(userIds []string) *ExportSignalsShiftAnalyticsParams {
	o.SetUserIds(userIds)
	return o
}

// SetUserIds adds the userIds to the export signals shift analytics params
func (o *ExportSignalsShiftAnalyticsParams) SetUserIds(userIds []string) {
	o.UserIds = userIds
}

// WriteToRequest writes these params to a swagger request
func (o *ExportSignalsShiftAnalyticsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param period_end
	qrPeriodEnd := o.PeriodEnd
	qPeriodEnd := qrPeriodEnd.String()
	if qPeriodEnd != "" {

		if err := r.SetQueryParam("period_end", qPeriodEnd); err != nil {
			return err
		}
	}

	// query param period_start
	qrPeriodStart := o.PeriodStart
	qPeriodStart := qrPeriodStart.String()
	if qPeriodStart != "" {

		if err := r.SetQueryParam("period_start", qPeriodStart); err != nil {
			return err
		}
	}

	if o.TeamIds != nil {

		// binding items for team_ids
		joinedTeamIds := o.bindParamTeamIds(reg)

		// form array param team_ids
		if err := r.SetFormParam("team_ids", joinedTeamIds...); err != nil {
			return err
		}
	}

	if o.UserIds != nil {

		// binding items for user_ids
		joinedUserIds := o.bindParamUserIds(reg)

		// form array param user_ids
		if err := r.SetFormParam("user_ids", joinedUserIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamExportSignalsShiftAnalytics binds the parameter team_ids
func (o *ExportSignalsShiftAnalyticsParams) bindParamTeamIds(formats strfmt.Registry) []string {
	teamIdsIR := o.TeamIds

	var teamIdsIC []string
	for _, teamIdsIIR := range teamIdsIR { // explode []string

		teamIdsIIV := teamIdsIIR // string as string
		teamIdsIC = append(teamIdsIC, teamIdsIIV)
	}

	// items.CollectionFormat: ""
	teamIdsIS := swag.JoinByFormat(teamIdsIC, "")

	return teamIdsIS
}

// bindParamExportSignalsShiftAnalytics binds the parameter user_ids
func (o *ExportSignalsShiftAnalyticsParams) bindParamUserIds(formats strfmt.Registry) []string {
	userIdsIR := o.UserIds

	var userIdsIC []string
	for _, userIdsIIR := range userIdsIR { // explode []string

		userIdsIIV := userIdsIIR // string as string
		userIdsIC = append(userIdsIC, userIdsIIV)
	}

	// items.CollectionFormat: ""
	userIdsIS := swag.JoinByFormat(userIdsIC, "")

	return userIdsIS
}
