// Code generated by go-swagger; DO NOT EDIT.

package reporting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListIncidentMetricsParams creates a new ListIncidentMetricsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListIncidentMetricsParams() *ListIncidentMetricsParams {
	return &ListIncidentMetricsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListIncidentMetricsParamsWithTimeout creates a new ListIncidentMetricsParams object
// with the ability to set a timeout on a request.
func NewListIncidentMetricsParamsWithTimeout(timeout time.Duration) *ListIncidentMetricsParams {
	return &ListIncidentMetricsParams{
		timeout: timeout,
	}
}

// NewListIncidentMetricsParamsWithContext creates a new ListIncidentMetricsParams object
// with the ability to set a context for a request.
func NewListIncidentMetricsParamsWithContext(ctx context.Context) *ListIncidentMetricsParams {
	return &ListIncidentMetricsParams{
		Context: ctx,
	}
}

// NewListIncidentMetricsParamsWithHTTPClient creates a new ListIncidentMetricsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListIncidentMetricsParamsWithHTTPClient(client *http.Client) *ListIncidentMetricsParams {
	return &ListIncidentMetricsParams{
		HTTPClient: client,
	}
}

/*
ListIncidentMetricsParams contains all the parameters to send to the API endpoint

	for the list incident metrics operation.

	Typically these are written to a http.Request.
*/
type ListIncidentMetricsParams struct {

	// BucketSize.
	BucketSize *string

	// By.
	By *string

	// Conditions.
	Conditions *string

	/* EndDate.

	   The end date to return metrics from

	   Format: date
	*/
	EndDate *strfmt.Date

	// SortDirection.
	SortDirection *string

	// SortField.
	SortField *string

	// SortLimit.
	//
	// Format: int32
	SortLimit *int32

	/* StartDate.

	   The start date to return metrics from

	   Format: date
	*/
	StartDate *strfmt.Date

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list incident metrics params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListIncidentMetricsParams) WithDefaults() *ListIncidentMetricsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list incident metrics params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListIncidentMetricsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list incident metrics params
func (o *ListIncidentMetricsParams) WithTimeout(timeout time.Duration) *ListIncidentMetricsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list incident metrics params
func (o *ListIncidentMetricsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list incident metrics params
func (o *ListIncidentMetricsParams) WithContext(ctx context.Context) *ListIncidentMetricsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list incident metrics params
func (o *ListIncidentMetricsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list incident metrics params
func (o *ListIncidentMetricsParams) WithHTTPClient(client *http.Client) *ListIncidentMetricsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list incident metrics params
func (o *ListIncidentMetricsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBucketSize adds the bucketSize to the list incident metrics params
func (o *ListIncidentMetricsParams) WithBucketSize(bucketSize *string) *ListIncidentMetricsParams {
	o.SetBucketSize(bucketSize)
	return o
}

// SetBucketSize adds the bucketSize to the list incident metrics params
func (o *ListIncidentMetricsParams) SetBucketSize(bucketSize *string) {
	o.BucketSize = bucketSize
}

// WithBy adds the by to the list incident metrics params
func (o *ListIncidentMetricsParams) WithBy(by *string) *ListIncidentMetricsParams {
	o.SetBy(by)
	return o
}

// SetBy adds the by to the list incident metrics params
func (o *ListIncidentMetricsParams) SetBy(by *string) {
	o.By = by
}

// WithConditions adds the conditions to the list incident metrics params
func (o *ListIncidentMetricsParams) WithConditions(conditions *string) *ListIncidentMetricsParams {
	o.SetConditions(conditions)
	return o
}

// SetConditions adds the conditions to the list incident metrics params
func (o *ListIncidentMetricsParams) SetConditions(conditions *string) {
	o.Conditions = conditions
}

// WithEndDate adds the endDate to the list incident metrics params
func (o *ListIncidentMetricsParams) WithEndDate(endDate *strfmt.Date) *ListIncidentMetricsParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the list incident metrics params
func (o *ListIncidentMetricsParams) SetEndDate(endDate *strfmt.Date) {
	o.EndDate = endDate
}

// WithSortDirection adds the sortDirection to the list incident metrics params
func (o *ListIncidentMetricsParams) WithSortDirection(sortDirection *string) *ListIncidentMetricsParams {
	o.SetSortDirection(sortDirection)
	return o
}

// SetSortDirection adds the sortDirection to the list incident metrics params
func (o *ListIncidentMetricsParams) SetSortDirection(sortDirection *string) {
	o.SortDirection = sortDirection
}

// WithSortField adds the sortField to the list incident metrics params
func (o *ListIncidentMetricsParams) WithSortField(sortField *string) *ListIncidentMetricsParams {
	o.SetSortField(sortField)
	return o
}

// SetSortField adds the sortField to the list incident metrics params
func (o *ListIncidentMetricsParams) SetSortField(sortField *string) {
	o.SortField = sortField
}

// WithSortLimit adds the sortLimit to the list incident metrics params
func (o *ListIncidentMetricsParams) WithSortLimit(sortLimit *int32) *ListIncidentMetricsParams {
	o.SetSortLimit(sortLimit)
	return o
}

// SetSortLimit adds the sortLimit to the list incident metrics params
func (o *ListIncidentMetricsParams) SetSortLimit(sortLimit *int32) {
	o.SortLimit = sortLimit
}

// WithStartDate adds the startDate to the list incident metrics params
func (o *ListIncidentMetricsParams) WithStartDate(startDate *strfmt.Date) *ListIncidentMetricsParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the list incident metrics params
func (o *ListIncidentMetricsParams) SetStartDate(startDate *strfmt.Date) {
	o.StartDate = startDate
}

// WriteToRequest writes these params to a swagger request
func (o *ListIncidentMetricsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BucketSize != nil {

		// query param bucket_size
		var qrBucketSize string

		if o.BucketSize != nil {
			qrBucketSize = *o.BucketSize
		}
		qBucketSize := qrBucketSize
		if qBucketSize != "" {

			if err := r.SetQueryParam("bucket_size", qBucketSize); err != nil {
				return err
			}
		}
	}

	if o.By != nil {

		// query param by
		var qrBy string

		if o.By != nil {
			qrBy = *o.By
		}
		qBy := qrBy
		if qBy != "" {

			if err := r.SetQueryParam("by", qBy); err != nil {
				return err
			}
		}
	}

	if o.Conditions != nil {

		// query param conditions
		var qrConditions string

		if o.Conditions != nil {
			qrConditions = *o.Conditions
		}
		qConditions := qrConditions
		if qConditions != "" {

			if err := r.SetQueryParam("conditions", qConditions); err != nil {
				return err
			}
		}
	}

	if o.EndDate != nil {

		// query param end_date
		var qrEndDate strfmt.Date

		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate.String()
		if qEndDate != "" {

			if err := r.SetQueryParam("end_date", qEndDate); err != nil {
				return err
			}
		}
	}

	if o.SortDirection != nil {

		// query param sort_direction
		var qrSortDirection string

		if o.SortDirection != nil {
			qrSortDirection = *o.SortDirection
		}
		qSortDirection := qrSortDirection
		if qSortDirection != "" {

			if err := r.SetQueryParam("sort_direction", qSortDirection); err != nil {
				return err
			}
		}
	}

	if o.SortField != nil {

		// query param sort_field
		var qrSortField string

		if o.SortField != nil {
			qrSortField = *o.SortField
		}
		qSortField := qrSortField
		if qSortField != "" {

			if err := r.SetQueryParam("sort_field", qSortField); err != nil {
				return err
			}
		}
	}

	if o.SortLimit != nil {

		// query param sort_limit
		var qrSortLimit int32

		if o.SortLimit != nil {
			qrSortLimit = *o.SortLimit
		}
		qSortLimit := swag.FormatInt32(qrSortLimit)
		if qSortLimit != "" {

			if err := r.SetQueryParam("sort_limit", qSortLimit); err != nil {
				return err
			}
		}
	}

	if o.StartDate != nil {

		// query param start_date
		var qrStartDate strfmt.Date

		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate.String()
		if qStartDate != "" {

			if err := r.SetQueryParam("start_date", qStartDate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
