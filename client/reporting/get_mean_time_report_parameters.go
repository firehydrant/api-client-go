// Code generated by go-swagger; DO NOT EDIT.

package reporting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetMeanTimeReportParams creates a new GetMeanTimeReportParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetMeanTimeReportParams() *GetMeanTimeReportParams {
	return &GetMeanTimeReportParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetMeanTimeReportParamsWithTimeout creates a new GetMeanTimeReportParams object
// with the ability to set a timeout on a request.
func NewGetMeanTimeReportParamsWithTimeout(timeout time.Duration) *GetMeanTimeReportParams {
	return &GetMeanTimeReportParams{
		timeout: timeout,
	}
}

// NewGetMeanTimeReportParamsWithContext creates a new GetMeanTimeReportParams object
// with the ability to set a context for a request.
func NewGetMeanTimeReportParamsWithContext(ctx context.Context) *GetMeanTimeReportParams {
	return &GetMeanTimeReportParams{
		Context: ctx,
	}
}

// NewGetMeanTimeReportParamsWithHTTPClient creates a new GetMeanTimeReportParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetMeanTimeReportParamsWithHTTPClient(client *http.Client) *GetMeanTimeReportParams {
	return &GetMeanTimeReportParams{
		HTTPClient: client,
	}
}

/*
GetMeanTimeReportParams contains all the parameters to send to the API endpoint

	for the get mean time report operation.

	Typically these are written to a http.Request.
*/
type GetMeanTimeReportParams struct {

	/* CurrentMilestones.

	   A comma separated list of current milestones
	*/
	CurrentMilestones *string

	/* EndDate.

	   The end date to return incidents from

	   Format: date
	*/
	EndDate *strfmt.Date

	/* Environments.

	   A comma separated list of environment IDs
	*/
	Environments *string

	/* Priorities.

	   A comma separated list of priorities
	*/
	Priorities *string

	/* PriorityNotSet.

	   Flag for including incidents where priority has not been set
	*/
	PriorityNotSet *bool

	/* Query.

	   A text query for an incident that searches on name, summary, and desciption
	*/
	Query *string

	/* SavedSearchID.

	   The id of a previously saved search.
	*/
	SavedSearchID *string

	/* Services.

	   A comma separated list of service IDs
	*/
	Services *string

	/* Severities.

	   A comma separated list of severities
	*/
	Severities *string

	/* SeverityNotSet.

	   Flag for including incidents where severity has not been set
	*/
	SeverityNotSet *bool

	/* StartDate.

	   The start date to return incidents from

	   Format: date
	*/
	StartDate *strfmt.Date

	/* Status.

	   Incident status
	*/
	Status *string

	/* Teams.

	   A comma separated list of team IDs
	*/
	Teams *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get mean time report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMeanTimeReportParams) WithDefaults() *GetMeanTimeReportParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get mean time report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMeanTimeReportParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get mean time report params
func (o *GetMeanTimeReportParams) WithTimeout(timeout time.Duration) *GetMeanTimeReportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get mean time report params
func (o *GetMeanTimeReportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get mean time report params
func (o *GetMeanTimeReportParams) WithContext(ctx context.Context) *GetMeanTimeReportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get mean time report params
func (o *GetMeanTimeReportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get mean time report params
func (o *GetMeanTimeReportParams) WithHTTPClient(client *http.Client) *GetMeanTimeReportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get mean time report params
func (o *GetMeanTimeReportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCurrentMilestones adds the currentMilestones to the get mean time report params
func (o *GetMeanTimeReportParams) WithCurrentMilestones(currentMilestones *string) *GetMeanTimeReportParams {
	o.SetCurrentMilestones(currentMilestones)
	return o
}

// SetCurrentMilestones adds the currentMilestones to the get mean time report params
func (o *GetMeanTimeReportParams) SetCurrentMilestones(currentMilestones *string) {
	o.CurrentMilestones = currentMilestones
}

// WithEndDate adds the endDate to the get mean time report params
func (o *GetMeanTimeReportParams) WithEndDate(endDate *strfmt.Date) *GetMeanTimeReportParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the get mean time report params
func (o *GetMeanTimeReportParams) SetEndDate(endDate *strfmt.Date) {
	o.EndDate = endDate
}

// WithEnvironments adds the environments to the get mean time report params
func (o *GetMeanTimeReportParams) WithEnvironments(environments *string) *GetMeanTimeReportParams {
	o.SetEnvironments(environments)
	return o
}

// SetEnvironments adds the environments to the get mean time report params
func (o *GetMeanTimeReportParams) SetEnvironments(environments *string) {
	o.Environments = environments
}

// WithPriorities adds the priorities to the get mean time report params
func (o *GetMeanTimeReportParams) WithPriorities(priorities *string) *GetMeanTimeReportParams {
	o.SetPriorities(priorities)
	return o
}

// SetPriorities adds the priorities to the get mean time report params
func (o *GetMeanTimeReportParams) SetPriorities(priorities *string) {
	o.Priorities = priorities
}

// WithPriorityNotSet adds the priorityNotSet to the get mean time report params
func (o *GetMeanTimeReportParams) WithPriorityNotSet(priorityNotSet *bool) *GetMeanTimeReportParams {
	o.SetPriorityNotSet(priorityNotSet)
	return o
}

// SetPriorityNotSet adds the priorityNotSet to the get mean time report params
func (o *GetMeanTimeReportParams) SetPriorityNotSet(priorityNotSet *bool) {
	o.PriorityNotSet = priorityNotSet
}

// WithQuery adds the query to the get mean time report params
func (o *GetMeanTimeReportParams) WithQuery(query *string) *GetMeanTimeReportParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get mean time report params
func (o *GetMeanTimeReportParams) SetQuery(query *string) {
	o.Query = query
}

// WithSavedSearchID adds the savedSearchID to the get mean time report params
func (o *GetMeanTimeReportParams) WithSavedSearchID(savedSearchID *string) *GetMeanTimeReportParams {
	o.SetSavedSearchID(savedSearchID)
	return o
}

// SetSavedSearchID adds the savedSearchId to the get mean time report params
func (o *GetMeanTimeReportParams) SetSavedSearchID(savedSearchID *string) {
	o.SavedSearchID = savedSearchID
}

// WithServices adds the services to the get mean time report params
func (o *GetMeanTimeReportParams) WithServices(services *string) *GetMeanTimeReportParams {
	o.SetServices(services)
	return o
}

// SetServices adds the services to the get mean time report params
func (o *GetMeanTimeReportParams) SetServices(services *string) {
	o.Services = services
}

// WithSeverities adds the severities to the get mean time report params
func (o *GetMeanTimeReportParams) WithSeverities(severities *string) *GetMeanTimeReportParams {
	o.SetSeverities(severities)
	return o
}

// SetSeverities adds the severities to the get mean time report params
func (o *GetMeanTimeReportParams) SetSeverities(severities *string) {
	o.Severities = severities
}

// WithSeverityNotSet adds the severityNotSet to the get mean time report params
func (o *GetMeanTimeReportParams) WithSeverityNotSet(severityNotSet *bool) *GetMeanTimeReportParams {
	o.SetSeverityNotSet(severityNotSet)
	return o
}

// SetSeverityNotSet adds the severityNotSet to the get mean time report params
func (o *GetMeanTimeReportParams) SetSeverityNotSet(severityNotSet *bool) {
	o.SeverityNotSet = severityNotSet
}

// WithStartDate adds the startDate to the get mean time report params
func (o *GetMeanTimeReportParams) WithStartDate(startDate *strfmt.Date) *GetMeanTimeReportParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get mean time report params
func (o *GetMeanTimeReportParams) SetStartDate(startDate *strfmt.Date) {
	o.StartDate = startDate
}

// WithStatus adds the status to the get mean time report params
func (o *GetMeanTimeReportParams) WithStatus(status *string) *GetMeanTimeReportParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get mean time report params
func (o *GetMeanTimeReportParams) SetStatus(status *string) {
	o.Status = status
}

// WithTeams adds the teams to the get mean time report params
func (o *GetMeanTimeReportParams) WithTeams(teams *string) *GetMeanTimeReportParams {
	o.SetTeams(teams)
	return o
}

// SetTeams adds the teams to the get mean time report params
func (o *GetMeanTimeReportParams) SetTeams(teams *string) {
	o.Teams = teams
}

// WriteToRequest writes these params to a swagger request
func (o *GetMeanTimeReportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CurrentMilestones != nil {

		// query param current_milestones
		var qrCurrentMilestones string

		if o.CurrentMilestones != nil {
			qrCurrentMilestones = *o.CurrentMilestones
		}
		qCurrentMilestones := qrCurrentMilestones
		if qCurrentMilestones != "" {

			if err := r.SetQueryParam("current_milestones", qCurrentMilestones); err != nil {
				return err
			}
		}
	}

	if o.EndDate != nil {

		// query param end_date
		var qrEndDate strfmt.Date

		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate.String()
		if qEndDate != "" {

			if err := r.SetQueryParam("end_date", qEndDate); err != nil {
				return err
			}
		}
	}

	if o.Environments != nil {

		// query param environments
		var qrEnvironments string

		if o.Environments != nil {
			qrEnvironments = *o.Environments
		}
		qEnvironments := qrEnvironments
		if qEnvironments != "" {

			if err := r.SetQueryParam("environments", qEnvironments); err != nil {
				return err
			}
		}
	}

	if o.Priorities != nil {

		// query param priorities
		var qrPriorities string

		if o.Priorities != nil {
			qrPriorities = *o.Priorities
		}
		qPriorities := qrPriorities
		if qPriorities != "" {

			if err := r.SetQueryParam("priorities", qPriorities); err != nil {
				return err
			}
		}
	}

	if o.PriorityNotSet != nil {

		// query param priority_not_set
		var qrPriorityNotSet bool

		if o.PriorityNotSet != nil {
			qrPriorityNotSet = *o.PriorityNotSet
		}
		qPriorityNotSet := swag.FormatBool(qrPriorityNotSet)
		if qPriorityNotSet != "" {

			if err := r.SetQueryParam("priority_not_set", qPriorityNotSet); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.SavedSearchID != nil {

		// query param saved_search_id
		var qrSavedSearchID string

		if o.SavedSearchID != nil {
			qrSavedSearchID = *o.SavedSearchID
		}
		qSavedSearchID := qrSavedSearchID
		if qSavedSearchID != "" {

			if err := r.SetQueryParam("saved_search_id", qSavedSearchID); err != nil {
				return err
			}
		}
	}

	if o.Services != nil {

		// query param services
		var qrServices string

		if o.Services != nil {
			qrServices = *o.Services
		}
		qServices := qrServices
		if qServices != "" {

			if err := r.SetQueryParam("services", qServices); err != nil {
				return err
			}
		}
	}

	if o.Severities != nil {

		// query param severities
		var qrSeverities string

		if o.Severities != nil {
			qrSeverities = *o.Severities
		}
		qSeverities := qrSeverities
		if qSeverities != "" {

			if err := r.SetQueryParam("severities", qSeverities); err != nil {
				return err
			}
		}
	}

	if o.SeverityNotSet != nil {

		// query param severity_not_set
		var qrSeverityNotSet bool

		if o.SeverityNotSet != nil {
			qrSeverityNotSet = *o.SeverityNotSet
		}
		qSeverityNotSet := swag.FormatBool(qrSeverityNotSet)
		if qSeverityNotSet != "" {

			if err := r.SetQueryParam("severity_not_set", qSeverityNotSet); err != nil {
				return err
			}
		}
	}

	if o.StartDate != nil {

		// query param start_date
		var qrStartDate strfmt.Date

		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate.String()
		if qStartDate != "" {

			if err := r.SetQueryParam("start_date", qStartDate); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.Teams != nil {

		// query param teams
		var qrTeams string

		if o.Teams != nil {
			qrTeams = *o.Teams
		}
		qTeams := qrTeams
		if qTeams != "" {

			if err := r.SetQueryParam("teams", qTeams); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
