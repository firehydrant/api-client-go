// Code generated by go-swagger; DO NOT EDIT.

package retrospective_templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new retrospective templates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for retrospective templates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1RetrospectiveTemplatesRetrospectiveTemplateID(params *DeleteV1RetrospectiveTemplatesRetrospectiveTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1RetrospectiveTemplatesRetrospectiveTemplateIDOK, error)

	GetV1RetrospectiveTemplates(params *GetV1RetrospectiveTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RetrospectiveTemplatesOK, error)

	GetV1RetrospectiveTemplatesRetrospectiveTemplateID(params *GetV1RetrospectiveTemplatesRetrospectiveTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RetrospectiveTemplatesRetrospectiveTemplateIDOK, error)

	PatchV1RetrospectiveTemplatesRetrospectiveTemplateID(params *PatchV1RetrospectiveTemplatesRetrospectiveTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1RetrospectiveTemplatesRetrospectiveTemplateIDOK, error)

	PostV1RetrospectiveTemplates(params *PostV1RetrospectiveTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1RetrospectiveTemplatesCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1RetrospectiveTemplatesRetrospectiveTemplateID deletes a retrospective template

Delete a single retrospective template
*/
func (a *Client) DeleteV1RetrospectiveTemplatesRetrospectiveTemplateID(params *DeleteV1RetrospectiveTemplatesRetrospectiveTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1RetrospectiveTemplatesRetrospectiveTemplateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1RetrospectiveTemplatesRetrospectiveTemplateIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1RetrospectiveTemplatesRetrospectiveTemplateId",
		Method:             "DELETE",
		PathPattern:        "/v1/retrospective_templates/{retrospective_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1RetrospectiveTemplatesRetrospectiveTemplateIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1RetrospectiveTemplatesRetrospectiveTemplateIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1RetrospectiveTemplatesRetrospectiveTemplateId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1RetrospectiveTemplates lists all retrospective templates

List all retrospective templates
*/
func (a *Client) GetV1RetrospectiveTemplates(params *GetV1RetrospectiveTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RetrospectiveTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1RetrospectiveTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1RetrospectiveTemplates",
		Method:             "GET",
		PathPattern:        "/v1/retrospective_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1RetrospectiveTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1RetrospectiveTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1RetrospectiveTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1RetrospectiveTemplatesRetrospectiveTemplateID retrieves a single retrospective template

Retrieve a single retrospective template by ID
*/
func (a *Client) GetV1RetrospectiveTemplatesRetrospectiveTemplateID(params *GetV1RetrospectiveTemplatesRetrospectiveTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RetrospectiveTemplatesRetrospectiveTemplateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1RetrospectiveTemplatesRetrospectiveTemplateIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1RetrospectiveTemplatesRetrospectiveTemplateId",
		Method:             "GET",
		PathPattern:        "/v1/retrospective_templates/{retrospective_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1RetrospectiveTemplatesRetrospectiveTemplateIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1RetrospectiveTemplatesRetrospectiveTemplateIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1RetrospectiveTemplatesRetrospectiveTemplateId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1RetrospectiveTemplatesRetrospectiveTemplateID updates a retrospective template

Update a single retrospective template
*/
func (a *Client) PatchV1RetrospectiveTemplatesRetrospectiveTemplateID(params *PatchV1RetrospectiveTemplatesRetrospectiveTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1RetrospectiveTemplatesRetrospectiveTemplateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1RetrospectiveTemplatesRetrospectiveTemplateIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1RetrospectiveTemplatesRetrospectiveTemplateId",
		Method:             "PATCH",
		PathPattern:        "/v1/retrospective_templates/{retrospective_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1RetrospectiveTemplatesRetrospectiveTemplateIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1RetrospectiveTemplatesRetrospectiveTemplateIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1RetrospectiveTemplatesRetrospectiveTemplateId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1RetrospectiveTemplates creates a retrospective template

Create a new retrospective template
*/
func (a *Client) PostV1RetrospectiveTemplates(params *PostV1RetrospectiveTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1RetrospectiveTemplatesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1RetrospectiveTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1RetrospectiveTemplates",
		Method:             "POST",
		PathPattern:        "/v1/retrospective_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1RetrospectiveTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1RetrospectiveTemplatesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1RetrospectiveTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
