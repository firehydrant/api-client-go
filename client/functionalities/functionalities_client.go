// Code generated by go-swagger; DO NOT EDIT.

package functionalities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new functionalities API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for functionalities API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1FunctionalitiesFunctionalityID(params *DeleteV1FunctionalitiesFunctionalityIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1FunctionalitiesFunctionalityIDOK, error)

	GetV1Functionalities(params *GetV1FunctionalitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1FunctionalitiesOK, error)

	GetV1FunctionalitiesFunctionalityID(params *GetV1FunctionalitiesFunctionalityIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1FunctionalitiesFunctionalityIDOK, error)

	GetV1FunctionalitiesFunctionalityIDServices(params *GetV1FunctionalitiesFunctionalityIDServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1FunctionalitiesFunctionalityIDServicesOK, error)

	PatchV1FunctionalitiesFunctionalityID(params *PatchV1FunctionalitiesFunctionalityIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1FunctionalitiesFunctionalityIDOK, error)

	PostV1Functionalities(params *PostV1FunctionalitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1FunctionalitiesCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1FunctionalitiesFunctionalityID archives a functionality

Archive a functionality
*/
func (a *Client) DeleteV1FunctionalitiesFunctionalityID(params *DeleteV1FunctionalitiesFunctionalityIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1FunctionalitiesFunctionalityIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1FunctionalitiesFunctionalityIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1FunctionalitiesFunctionalityId",
		Method:             "DELETE",
		PathPattern:        "/v1/functionalities/{functionality_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1FunctionalitiesFunctionalityIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1FunctionalitiesFunctionalityIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1FunctionalitiesFunctionalityId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Functionalities lists functionalities

List all of the functionalities that have been added to the organiation
*/
func (a *Client) GetV1Functionalities(params *GetV1FunctionalitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1FunctionalitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1FunctionalitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1Functionalities",
		Method:             "GET",
		PathPattern:        "/v1/functionalities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1FunctionalitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1FunctionalitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1Functionalities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1FunctionalitiesFunctionalityID gets a functionality

Retrieves a single functionality by ID
*/
func (a *Client) GetV1FunctionalitiesFunctionalityID(params *GetV1FunctionalitiesFunctionalityIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1FunctionalitiesFunctionalityIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1FunctionalitiesFunctionalityIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1FunctionalitiesFunctionalityId",
		Method:             "GET",
		PathPattern:        "/v1/functionalities/{functionality_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1FunctionalitiesFunctionalityIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1FunctionalitiesFunctionalityIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1FunctionalitiesFunctionalityId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1FunctionalitiesFunctionalityIDServices lists services for a functionality

List services for a functionality
*/
func (a *Client) GetV1FunctionalitiesFunctionalityIDServices(params *GetV1FunctionalitiesFunctionalityIDServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1FunctionalitiesFunctionalityIDServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1FunctionalitiesFunctionalityIDServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1FunctionalitiesFunctionalityIdServices",
		Method:             "GET",
		PathPattern:        "/v1/functionalities/{functionality_id}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1FunctionalitiesFunctionalityIDServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1FunctionalitiesFunctionalityIDServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1FunctionalitiesFunctionalityIdServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1FunctionalitiesFunctionalityID updates a functionality

Update a functionalities attributes
*/
func (a *Client) PatchV1FunctionalitiesFunctionalityID(params *PatchV1FunctionalitiesFunctionalityIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1FunctionalitiesFunctionalityIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1FunctionalitiesFunctionalityIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1FunctionalitiesFunctionalityId",
		Method:             "PATCH",
		PathPattern:        "/v1/functionalities/{functionality_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1FunctionalitiesFunctionalityIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1FunctionalitiesFunctionalityIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1FunctionalitiesFunctionalityId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1Functionalities creates a functionality

Creates a functionality for the organization
*/
func (a *Client) PostV1Functionalities(params *PostV1FunctionalitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1FunctionalitiesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1FunctionalitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1Functionalities",
		Method:             "POST",
		PathPattern:        "/v1/functionalities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1FunctionalitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1FunctionalitiesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1Functionalities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
