// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListCommentsParams creates a new ListCommentsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListCommentsParams() *ListCommentsParams {
	return &ListCommentsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListCommentsParamsWithTimeout creates a new ListCommentsParams object
// with the ability to set a timeout on a request.
func NewListCommentsParamsWithTimeout(timeout time.Duration) *ListCommentsParams {
	return &ListCommentsParams{
		timeout: timeout,
	}
}

// NewListCommentsParamsWithContext creates a new ListCommentsParams object
// with the ability to set a context for a request.
func NewListCommentsParamsWithContext(ctx context.Context) *ListCommentsParams {
	return &ListCommentsParams{
		Context: ctx,
	}
}

// NewListCommentsParamsWithHTTPClient creates a new ListCommentsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListCommentsParamsWithHTTPClient(client *http.Client) *ListCommentsParams {
	return &ListCommentsParams{
		HTTPClient: client,
	}
}

/*
ListCommentsParams contains all the parameters to send to the API endpoint

	for the list comments operation.

	Typically these are written to a http.Request.
*/
type ListCommentsParams struct {

	/* After.

	   An ISO8601 timestamp that allows filtering for comments posted after the provided time.

	   Format: date-time
	*/
	After *strfmt.DateTime

	/* Before.

	   An ISO8601 timestamp that allows filtering for comments posted before the provided time.

	   Format: date-time
	*/
	Before *strfmt.DateTime

	// ConversationID.
	ConversationID string

	/* Sort.

	   Allows sorting comments by the time they were posted, ascending or descending.

	   Default: "asc"
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list comments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListCommentsParams) WithDefaults() *ListCommentsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list comments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListCommentsParams) SetDefaults() {
	var (
		sortDefault = string("asc")
	)

	val := ListCommentsParams{
		Sort: &sortDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list comments params
func (o *ListCommentsParams) WithTimeout(timeout time.Duration) *ListCommentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list comments params
func (o *ListCommentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list comments params
func (o *ListCommentsParams) WithContext(ctx context.Context) *ListCommentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list comments params
func (o *ListCommentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list comments params
func (o *ListCommentsParams) WithHTTPClient(client *http.Client) *ListCommentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list comments params
func (o *ListCommentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the list comments params
func (o *ListCommentsParams) WithAfter(after *strfmt.DateTime) *ListCommentsParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the list comments params
func (o *ListCommentsParams) SetAfter(after *strfmt.DateTime) {
	o.After = after
}

// WithBefore adds the before to the list comments params
func (o *ListCommentsParams) WithBefore(before *strfmt.DateTime) *ListCommentsParams {
	o.SetBefore(before)
	return o
}

// SetBefore adds the before to the list comments params
func (o *ListCommentsParams) SetBefore(before *strfmt.DateTime) {
	o.Before = before
}

// WithConversationID adds the conversationID to the list comments params
func (o *ListCommentsParams) WithConversationID(conversationID string) *ListCommentsParams {
	o.SetConversationID(conversationID)
	return o
}

// SetConversationID adds the conversationId to the list comments params
func (o *ListCommentsParams) SetConversationID(conversationID string) {
	o.ConversationID = conversationID
}

// WithSort adds the sort to the list comments params
func (o *ListCommentsParams) WithSort(sort *string) *ListCommentsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the list comments params
func (o *ListCommentsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *ListCommentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter strfmt.DateTime

		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter.String()
		if qAfter != "" {

			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}
	}

	if o.Before != nil {

		// query param before
		var qrBefore strfmt.DateTime

		if o.Before != nil {
			qrBefore = *o.Before
		}
		qBefore := qrBefore.String()
		if qBefore != "" {

			if err := r.SetQueryParam("before", qBefore); err != nil {
				return err
			}
		}
	}

	// path param conversation_id
	if err := r.SetPathParam("conversation_id", o.ConversationID); err != nil {
		return err
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
