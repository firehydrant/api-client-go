// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new conversations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for conversations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateComment(params *CreateCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCommentCreated, error)

	CreateCommentReaction(params *CreateCommentReactionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCommentReactionCreated, error)

	DeleteComment(params *DeleteCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCommentNoContent, error)

	DeleteCommentReaction(params *DeleteCommentReactionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCommentReactionNoContent, error)

	GetComment(params *GetCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCommentOK, error)

	GetVoteStatus(params *GetVoteStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVoteStatusOK, error)

	ListCommentReactions(params *ListCommentReactionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCommentReactionsOK, error)

	ListComments(params *ListCommentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCommentsOK, error)

	UpdateComment(params *UpdateCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCommentOK, error)

	UpdateVote(params *UpdateVoteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVoteOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateComment creates a conversation comment

ALPHA - Creates a comment for a project
*/
func (a *Client) CreateComment(params *CreateCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCommentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCommentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_comment",
		Method:             "POST",
		PathPattern:        "/v1/conversations/{conversation_id}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCommentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_comment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateCommentReaction creates a reaction for a conversation comment

ALPHA - Create a reaction on a comment
*/
func (a *Client) CreateCommentReaction(params *CreateCommentReactionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCommentReactionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCommentReactionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_comment_reaction",
		Method:             "POST",
		PathPattern:        "/v1/conversations/{conversation_id}/comments/{comment_id}/reactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCommentReactionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCommentReactionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_comment_reaction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteComment archives a conversation comment

ALPHA - Archive a comment
*/
func (a *Client) DeleteComment(params *DeleteCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCommentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCommentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_comment",
		Method:             "DELETE",
		PathPattern:        "/v1/conversations/{conversation_id}/comments/{comment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCommentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_comment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCommentReaction deletes a reaction from a conversation comment

ALPHA - Archive a reaction
*/
func (a *Client) DeleteCommentReaction(params *DeleteCommentReactionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCommentReactionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCommentReactionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_comment_reaction",
		Method:             "DELETE",
		PathPattern:        "/v1/conversations/{conversation_id}/comments/{comment_id}/reactions/{reaction_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCommentReactionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCommentReactionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_comment_reaction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComment gets a conversation comment

ALPHA - Retrieves a single comment by ID
*/
func (a *Client) GetComment(params *GetCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCommentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_comment",
		Method:             "GET",
		PathPattern:        "/v1/conversations/{conversation_id}/comments/{comment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCommentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_comment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVoteStatus gets votes

Get an object's current vote counts
*/
func (a *Client) GetVoteStatus(params *GetVoteStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVoteStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVoteStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_vote_status",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/events/{event_id}/votes/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVoteStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVoteStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_vote_status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListCommentReactions lists reactions for a conversation comment

ALPHA - List all of the reactions that have been added to a comment
*/
func (a *Client) ListCommentReactions(params *ListCommentReactionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCommentReactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCommentReactionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_comment_reactions",
		Method:             "GET",
		PathPattern:        "/v1/conversations/{conversation_id}/comments/{comment_id}/reactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCommentReactionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCommentReactionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_comment_reactions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListComments lists comments for a conversation

ALPHA - List all of the comments that have been added to the organization
*/
func (a *Client) ListComments(params *ListCommentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCommentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_comments",
		Method:             "GET",
		PathPattern:        "/v1/conversations/{conversation_id}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCommentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCommentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_comments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateComment updates a conversation comment

ALPHA - Update a comment's attributes
*/
func (a *Client) UpdateComment(params *UpdateCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCommentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCommentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_comment",
		Method:             "PATCH",
		PathPattern:        "/v1/conversations/{conversation_id}/comments/{comment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCommentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_comment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVote updates votes

Upvote or downvote an object
*/
func (a *Client) UpdateVote(params *UpdateVoteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVoteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_vote",
		Method:             "PATCH",
		PathPattern:        "/v1/incidents/{incident_id}/events/{event_id}/votes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVoteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_vote: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
