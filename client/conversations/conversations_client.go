// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new conversations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for conversations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1ConversationsConversationIDCommentsCommentID(params *DeleteV1ConversationsConversationIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1ConversationsConversationIDCommentsCommentIDNoContent, error)

	DeleteV1ConversationsConversationIDCommentsCommentIDReactionsReactionID(params *DeleteV1ConversationsConversationIDCommentsCommentIDReactionsReactionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1ConversationsConversationIDCommentsCommentIDReactionsReactionIDNoContent, error)

	GetV1ConversationsConversationIDComments(params *GetV1ConversationsConversationIDCommentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ConversationsConversationIDCommentsOK, error)

	GetV1ConversationsConversationIDCommentsCommentID(params *GetV1ConversationsConversationIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ConversationsConversationIDCommentsCommentIDOK, error)

	GetV1ConversationsConversationIDCommentsCommentIDReactions(params *GetV1ConversationsConversationIDCommentsCommentIDReactionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ConversationsConversationIDCommentsCommentIDReactionsOK, error)

	PatchV1ConversationsConversationIDCommentsCommentID(params *PatchV1ConversationsConversationIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1ConversationsConversationIDCommentsCommentIDOK, error)

	PostV1ConversationsConversationIDComments(params *PostV1ConversationsConversationIDCommentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ConversationsConversationIDCommentsCreated, error)

	PostV1ConversationsConversationIDCommentsCommentIDReactions(params *PostV1ConversationsConversationIDCommentsCommentIDReactionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ConversationsConversationIDCommentsCommentIDReactionsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1ConversationsConversationIDCommentsCommentID archives a comment

ALPHA - Archive a comment
*/
func (a *Client) DeleteV1ConversationsConversationIDCommentsCommentID(params *DeleteV1ConversationsConversationIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1ConversationsConversationIDCommentsCommentIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ConversationsConversationIDCommentsCommentIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1ConversationsConversationIdCommentsCommentId",
		Method:             "DELETE",
		PathPattern:        "/v1/conversations/{conversation_id}/comments/{comment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1ConversationsConversationIDCommentsCommentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1ConversationsConversationIDCommentsCommentIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1ConversationsConversationIdCommentsCommentId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1ConversationsConversationIDCommentsCommentIDReactionsReactionID archives a reaction

ALPHA - Archive a reaction
*/
func (a *Client) DeleteV1ConversationsConversationIDCommentsCommentIDReactionsReactionID(params *DeleteV1ConversationsConversationIDCommentsCommentIDReactionsReactionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1ConversationsConversationIDCommentsCommentIDReactionsReactionIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ConversationsConversationIDCommentsCommentIDReactionsReactionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1ConversationsConversationIdCommentsCommentIdReactionsReactionId",
		Method:             "DELETE",
		PathPattern:        "/v1/conversations/{conversation_id}/comments/{comment_id}/reactions/{reaction_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1ConversationsConversationIDCommentsCommentIDReactionsReactionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1ConversationsConversationIDCommentsCommentIDReactionsReactionIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1ConversationsConversationIdCommentsCommentIdReactionsReactionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ConversationsConversationIDComments lists all comments

ALPHA - List all of the comments that have been added to the organization
*/
func (a *Client) GetV1ConversationsConversationIDComments(params *GetV1ConversationsConversationIDCommentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ConversationsConversationIDCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ConversationsConversationIDCommentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1ConversationsConversationIdComments",
		Method:             "GET",
		PathPattern:        "/v1/conversations/{conversation_id}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ConversationsConversationIDCommentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ConversationsConversationIDCommentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1ConversationsConversationIdComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ConversationsConversationIDCommentsCommentID retrieves a single comment

ALPHA - Retrieves a single comment by ID
*/
func (a *Client) GetV1ConversationsConversationIDCommentsCommentID(params *GetV1ConversationsConversationIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ConversationsConversationIDCommentsCommentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ConversationsConversationIDCommentsCommentIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1ConversationsConversationIdCommentsCommentId",
		Method:             "GET",
		PathPattern:        "/v1/conversations/{conversation_id}/comments/{comment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ConversationsConversationIDCommentsCommentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ConversationsConversationIDCommentsCommentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1ConversationsConversationIdCommentsCommentId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ConversationsConversationIDCommentsCommentIDReactions lists all reactions for a comment

ALPHA - List all of the reactions that have been added to a comment
*/
func (a *Client) GetV1ConversationsConversationIDCommentsCommentIDReactions(params *GetV1ConversationsConversationIDCommentsCommentIDReactionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ConversationsConversationIDCommentsCommentIDReactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ConversationsConversationIDCommentsCommentIDReactionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1ConversationsConversationIdCommentsCommentIdReactions",
		Method:             "GET",
		PathPattern:        "/v1/conversations/{conversation_id}/comments/{comment_id}/reactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ConversationsConversationIDCommentsCommentIDReactionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ConversationsConversationIDCommentsCommentIDReactionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1ConversationsConversationIdCommentsCommentIdReactions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1ConversationsConversationIDCommentsCommentID updates a comment

ALPHA - Update a comment's attributes
*/
func (a *Client) PatchV1ConversationsConversationIDCommentsCommentID(params *PatchV1ConversationsConversationIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1ConversationsConversationIDCommentsCommentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ConversationsConversationIDCommentsCommentIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1ConversationsConversationIdCommentsCommentId",
		Method:             "PATCH",
		PathPattern:        "/v1/conversations/{conversation_id}/comments/{comment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1ConversationsConversationIDCommentsCommentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1ConversationsConversationIDCommentsCommentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1ConversationsConversationIdCommentsCommentId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ConversationsConversationIDComments creates a comment

ALPHA - Creates a comment for a project
*/
func (a *Client) PostV1ConversationsConversationIDComments(params *PostV1ConversationsConversationIDCommentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ConversationsConversationIDCommentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ConversationsConversationIDCommentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1ConversationsConversationIdComments",
		Method:             "POST",
		PathPattern:        "/v1/conversations/{conversation_id}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ConversationsConversationIDCommentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ConversationsConversationIDCommentsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1ConversationsConversationIdComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ConversationsConversationIDCommentsCommentIDReactions creates a reaction

ALPHA - Create a reaction on a comment
*/
func (a *Client) PostV1ConversationsConversationIDCommentsCommentIDReactions(params *PostV1ConversationsConversationIDCommentsCommentIDReactionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ConversationsConversationIDCommentsCommentIDReactionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ConversationsConversationIDCommentsCommentIDReactionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1ConversationsConversationIdCommentsCommentIdReactions",
		Method:             "POST",
		PathPattern:        "/v1/conversations/{conversation_id}/comments/{comment_id}/reactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ConversationsConversationIDCommentsCommentIDReactionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ConversationsConversationIDCommentsCommentIDReactionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1ConversationsConversationIdCommentsCommentIdReactions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
