// Code generated by go-swagger; DO NOT EDIT.

package changes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetChangeEventParams creates a new GetChangeEventParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetChangeEventParams() *GetChangeEventParams {
	return &GetChangeEventParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetChangeEventParamsWithTimeout creates a new GetChangeEventParams object
// with the ability to set a timeout on a request.
func NewGetChangeEventParamsWithTimeout(timeout time.Duration) *GetChangeEventParams {
	return &GetChangeEventParams{
		timeout: timeout,
	}
}

// NewGetChangeEventParamsWithContext creates a new GetChangeEventParams object
// with the ability to set a context for a request.
func NewGetChangeEventParamsWithContext(ctx context.Context) *GetChangeEventParams {
	return &GetChangeEventParams{
		Context: ctx,
	}
}

// NewGetChangeEventParamsWithHTTPClient creates a new GetChangeEventParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetChangeEventParamsWithHTTPClient(client *http.Client) *GetChangeEventParams {
	return &GetChangeEventParams{
		HTTPClient: client,
	}
}

/*
GetChangeEventParams contains all the parameters to send to the API endpoint

	for the get change event operation.

	Typically these are written to a http.Request.
*/
type GetChangeEventParams struct {

	// ChangeEventID.
	ChangeEventID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get change event params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetChangeEventParams) WithDefaults() *GetChangeEventParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get change event params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetChangeEventParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get change event params
func (o *GetChangeEventParams) WithTimeout(timeout time.Duration) *GetChangeEventParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get change event params
func (o *GetChangeEventParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get change event params
func (o *GetChangeEventParams) WithContext(ctx context.Context) *GetChangeEventParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get change event params
func (o *GetChangeEventParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get change event params
func (o *GetChangeEventParams) WithHTTPClient(client *http.Client) *GetChangeEventParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get change event params
func (o *GetChangeEventParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChangeEventID adds the changeEventID to the get change event params
func (o *GetChangeEventParams) WithChangeEventID(changeEventID string) *GetChangeEventParams {
	o.SetChangeEventID(changeEventID)
	return o
}

// SetChangeEventID adds the changeEventId to the get change event params
func (o *GetChangeEventParams) SetChangeEventID(changeEventID string) {
	o.ChangeEventID = changeEventID
}

// WriteToRequest writes these params to a swagger request
func (o *GetChangeEventParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param change_event_id
	if err := r.SetPathParam("change_event_id", o.ChangeEventID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
