// Code generated by go-swagger; DO NOT EDIT.

package changes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/firehydrant/api-client-go/models"
)

// GetV1ChangesEventsReader is a Reader for the GetV1ChangesEvents structure.
type GetV1ChangesEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV1ChangesEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetV1ChangesEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /v1/changes/events] getV1ChangesEvents", response, response.Code())
	}
}

// NewGetV1ChangesEventsOK creates a GetV1ChangesEventsOK with default headers values
func NewGetV1ChangesEventsOK() *GetV1ChangesEventsOK {
	return &GetV1ChangesEventsOK{}
}

/*
GetV1ChangesEventsOK describes a response with status code 200, with default header values.

List change events for the organization. Note: Not all information is included on a change event like attachments and related changes. You must fetch a change event separately to retrieve all of the information about it
*/
type GetV1ChangesEventsOK struct {
	Payload *models.ChangeEventSlimEntityPaginated
}

// IsSuccess returns true when this get v1 changes events o k response has a 2xx status code
func (o *GetV1ChangesEventsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v1 changes events o k response has a 3xx status code
func (o *GetV1ChangesEventsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 changes events o k response has a 4xx status code
func (o *GetV1ChangesEventsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 changes events o k response has a 5xx status code
func (o *GetV1ChangesEventsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 changes events o k response a status code equal to that given
func (o *GetV1ChangesEventsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get v1 changes events o k response
func (o *GetV1ChangesEventsOK) Code() int {
	return 200
}

func (o *GetV1ChangesEventsOK) Error() string {
	return fmt.Sprintf("[GET /v1/changes/events][%d] getV1ChangesEventsOK  %+v", 200, o.Payload)
}

func (o *GetV1ChangesEventsOK) String() string {
	return fmt.Sprintf("[GET /v1/changes/events][%d] getV1ChangesEventsOK  %+v", 200, o.Payload)
}

func (o *GetV1ChangesEventsOK) GetPayload() *models.ChangeEventSlimEntityPaginated {
	return o.Payload
}

func (o *GetV1ChangesEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChangeEventSlimEntityPaginated)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
