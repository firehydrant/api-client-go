// Code generated by go-swagger; DO NOT EDIT.

package changes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new changes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for changes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateChange(params *CreateChangeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateChangeCreated, error)

	CreateChangeEvent(params *CreateChangeEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateChangeEventCreated, error)

	CreateChangeIdentity(params *CreateChangeIdentityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateChangeIdentityCreated, error)

	DeleteChange(params *DeleteChangeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteChangeNoContent, error)

	DeleteChangeEvent(params *DeleteChangeEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteChangeEventNoContent, error)

	DeleteChangeIdentity(params *DeleteChangeIdentityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteChangeIdentityNoContent, error)

	GetChangeEvent(params *GetChangeEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetChangeEventOK, error)

	ListChangeEvents(params *ListChangeEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListChangeEventsOK, error)

	ListChangeIdentities(params *ListChangeIdentitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListChangeIdentitiesOK, error)

	ListChangeTypes(params *ListChangeTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListChangeTypesOK, error)

	ListChanges(params *ListChangesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListChangesOK, error)

	UpdateChange(params *UpdateChangeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateChangeOK, error)

	UpdateChangeEvent(params *UpdateChangeEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateChangeEventOK, error)

	UpdateChangeIdentity(params *UpdateChangeIdentityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateChangeIdentityOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateChange creates a new change entry

Create a new change entry
*/
func (a *Client) CreateChange(params *CreateChangeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateChangeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateChangeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_change",
		Method:             "POST",
		PathPattern:        "/v1/changes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateChangeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateChangeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_change: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateChangeEvent creates a change event

Create a change event
*/
func (a *Client) CreateChangeEvent(params *CreateChangeEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateChangeEventCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateChangeEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_change_event",
		Method:             "POST",
		PathPattern:        "/v1/changes/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateChangeEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateChangeEventCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_change_event: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateChangeIdentity creates an identity for a change entry

Create an identity for the change entry
*/
func (a *Client) CreateChangeIdentity(params *CreateChangeIdentityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateChangeIdentityCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateChangeIdentityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_change_identity",
		Method:             "POST",
		PathPattern:        "/v1/changes/{change_id}/identities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateChangeIdentityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateChangeIdentityCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_change_identity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteChange archives a change entry

Archive a change entry
*/
func (a *Client) DeleteChange(params *DeleteChangeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteChangeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteChangeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_change",
		Method:             "DELETE",
		PathPattern:        "/v1/changes/{change_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteChangeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteChangeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_change: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteChangeEvent deletes a change event

Delete a change event
*/
func (a *Client) DeleteChangeEvent(params *DeleteChangeEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteChangeEventNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteChangeEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_change_event",
		Method:             "DELETE",
		PathPattern:        "/v1/changes/events/{change_event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteChangeEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteChangeEventNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_change_event: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteChangeIdentity deletes an identity from a change entry

Delete an identity from the change entry
*/
func (a *Client) DeleteChangeIdentity(params *DeleteChangeIdentityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteChangeIdentityNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteChangeIdentityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_change_identity",
		Method:             "DELETE",
		PathPattern:        "/v1/changes/{change_id}/identities/{identity_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteChangeIdentityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteChangeIdentityNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_change_identity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetChangeEvent gets a change event

Retrieve a change event
*/
func (a *Client) GetChangeEvent(params *GetChangeEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetChangeEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_change_event",
		Method:             "GET",
		PathPattern:        "/v1/changes/events/{change_event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChangeEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_change_event: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListChangeEvents lists change events

List change events for the organization. Note: Not all information is included on a change event like attachments and related changes. You must fetch a change event separately to retrieve all of the information about it
*/
func (a *Client) ListChangeEvents(params *ListChangeEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListChangeEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListChangeEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_change_events",
		Method:             "GET",
		PathPattern:        "/v1/changes/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListChangeEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListChangeEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_change_events: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListChangeIdentities lists identities for a change entry

Retrieve all identities for the change entry
*/
func (a *Client) ListChangeIdentities(params *ListChangeIdentitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListChangeIdentitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListChangeIdentitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_change_identities",
		Method:             "GET",
		PathPattern:        "/v1/changes/{change_id}/identities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListChangeIdentitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListChangeIdentitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_change_identities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListChangeTypes lists change types

List change types for the organization
*/
func (a *Client) ListChangeTypes(params *ListChangeTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListChangeTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListChangeTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_change_types",
		Method:             "GET",
		PathPattern:        "/v1/change_types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListChangeTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListChangeTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_change_types: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListChanges lists changes

List changes for the organization
*/
func (a *Client) ListChanges(params *ListChangesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListChangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListChangesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_changes",
		Method:             "GET",
		PathPattern:        "/v1/changes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListChangesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListChangesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_changes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateChange updates a change entry

Update a change entry
*/
func (a *Client) UpdateChange(params *UpdateChangeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateChangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateChangeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_change",
		Method:             "PATCH",
		PathPattern:        "/v1/changes/{change_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateChangeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateChangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_change: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateChangeEvent updates a change event

Update a change event
*/
func (a *Client) UpdateChangeEvent(params *UpdateChangeEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateChangeEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateChangeEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_change_event",
		Method:             "PATCH",
		PathPattern:        "/v1/changes/events/{change_event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateChangeEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateChangeEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_change_event: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateChangeIdentity updates an identity for a change entry

Update an identity for the change entry
*/
func (a *Client) UpdateChangeIdentity(params *UpdateChangeIdentityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateChangeIdentityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateChangeIdentityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_change_identity",
		Method:             "PATCH",
		PathPattern:        "/v1/changes/{change_id}/identities/{identity_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateChangeIdentityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateChangeIdentityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_change_identity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
