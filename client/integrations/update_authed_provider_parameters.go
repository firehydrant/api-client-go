// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUpdateAuthedProviderParams creates a new UpdateAuthedProviderParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateAuthedProviderParams() *UpdateAuthedProviderParams {
	return &UpdateAuthedProviderParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateAuthedProviderParamsWithTimeout creates a new UpdateAuthedProviderParams object
// with the ability to set a timeout on a request.
func NewUpdateAuthedProviderParamsWithTimeout(timeout time.Duration) *UpdateAuthedProviderParams {
	return &UpdateAuthedProviderParams{
		timeout: timeout,
	}
}

// NewUpdateAuthedProviderParamsWithContext creates a new UpdateAuthedProviderParams object
// with the ability to set a context for a request.
func NewUpdateAuthedProviderParamsWithContext(ctx context.Context) *UpdateAuthedProviderParams {
	return &UpdateAuthedProviderParams{
		Context: ctx,
	}
}

// NewUpdateAuthedProviderParamsWithHTTPClient creates a new UpdateAuthedProviderParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateAuthedProviderParamsWithHTTPClient(client *http.Client) *UpdateAuthedProviderParams {
	return &UpdateAuthedProviderParams{
		HTTPClient: client,
	}
}

/*
UpdateAuthedProviderParams contains all the parameters to send to the API endpoint

	for the update authed provider operation.

	Typically these are written to a http.Request.
*/
type UpdateAuthedProviderParams struct {

	/* AuthedProviderID.

	   Authed provider ID
	*/
	AuthedProviderID string

	/* ConnectionID.

	   Connection ID
	*/
	ConnectionID string

	/* IntegrationDefault.

	   Set as the default integration for the account
	*/
	IntegrationDefault *bool

	/* IntegrationSlug.

	   Integration slug
	*/
	IntegrationSlug string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update authed provider params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateAuthedProviderParams) WithDefaults() *UpdateAuthedProviderParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update authed provider params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateAuthedProviderParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update authed provider params
func (o *UpdateAuthedProviderParams) WithTimeout(timeout time.Duration) *UpdateAuthedProviderParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update authed provider params
func (o *UpdateAuthedProviderParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update authed provider params
func (o *UpdateAuthedProviderParams) WithContext(ctx context.Context) *UpdateAuthedProviderParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update authed provider params
func (o *UpdateAuthedProviderParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update authed provider params
func (o *UpdateAuthedProviderParams) WithHTTPClient(client *http.Client) *UpdateAuthedProviderParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update authed provider params
func (o *UpdateAuthedProviderParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthedProviderID adds the authedProviderID to the update authed provider params
func (o *UpdateAuthedProviderParams) WithAuthedProviderID(authedProviderID string) *UpdateAuthedProviderParams {
	o.SetAuthedProviderID(authedProviderID)
	return o
}

// SetAuthedProviderID adds the authedProviderId to the update authed provider params
func (o *UpdateAuthedProviderParams) SetAuthedProviderID(authedProviderID string) {
	o.AuthedProviderID = authedProviderID
}

// WithConnectionID adds the connectionID to the update authed provider params
func (o *UpdateAuthedProviderParams) WithConnectionID(connectionID string) *UpdateAuthedProviderParams {
	o.SetConnectionID(connectionID)
	return o
}

// SetConnectionID adds the connectionId to the update authed provider params
func (o *UpdateAuthedProviderParams) SetConnectionID(connectionID string) {
	o.ConnectionID = connectionID
}

// WithIntegrationDefault adds the integrationDefault to the update authed provider params
func (o *UpdateAuthedProviderParams) WithIntegrationDefault(integrationDefault *bool) *UpdateAuthedProviderParams {
	o.SetIntegrationDefault(integrationDefault)
	return o
}

// SetIntegrationDefault adds the integrationDefault to the update authed provider params
func (o *UpdateAuthedProviderParams) SetIntegrationDefault(integrationDefault *bool) {
	o.IntegrationDefault = integrationDefault
}

// WithIntegrationSlug adds the integrationSlug to the update authed provider params
func (o *UpdateAuthedProviderParams) WithIntegrationSlug(integrationSlug string) *UpdateAuthedProviderParams {
	o.SetIntegrationSlug(integrationSlug)
	return o
}

// SetIntegrationSlug adds the integrationSlug to the update authed provider params
func (o *UpdateAuthedProviderParams) SetIntegrationSlug(integrationSlug string) {
	o.IntegrationSlug = integrationSlug
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateAuthedProviderParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param authed_provider_id
	if err := r.SetPathParam("authed_provider_id", o.AuthedProviderID); err != nil {
		return err
	}

	// path param connection_id
	if err := r.SetPathParam("connection_id", o.ConnectionID); err != nil {
		return err
	}

	if o.IntegrationDefault != nil {

		// form param integration_default
		var frIntegrationDefault bool
		if o.IntegrationDefault != nil {
			frIntegrationDefault = *o.IntegrationDefault
		}
		fIntegrationDefault := swag.FormatBool(frIntegrationDefault)
		if fIntegrationDefault != "" {
			if err := r.SetFormParam("integration_default", fIntegrationDefault); err != nil {
				return err
			}
		}
	}

	// path param integration_slug
	if err := r.SetPathParam("integration_slug", o.IntegrationSlug); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
