// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListAuthedProvidersParams creates a new ListAuthedProvidersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListAuthedProvidersParams() *ListAuthedProvidersParams {
	return &ListAuthedProvidersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListAuthedProvidersParamsWithTimeout creates a new ListAuthedProvidersParams object
// with the ability to set a timeout on a request.
func NewListAuthedProvidersParamsWithTimeout(timeout time.Duration) *ListAuthedProvidersParams {
	return &ListAuthedProvidersParams{
		timeout: timeout,
	}
}

// NewListAuthedProvidersParamsWithContext creates a new ListAuthedProvidersParams object
// with the ability to set a context for a request.
func NewListAuthedProvidersParamsWithContext(ctx context.Context) *ListAuthedProvidersParams {
	return &ListAuthedProvidersParams{
		Context: ctx,
	}
}

// NewListAuthedProvidersParamsWithHTTPClient creates a new ListAuthedProvidersParams object
// with the ability to set a custom HTTPClient for a request.
func NewListAuthedProvidersParamsWithHTTPClient(client *http.Client) *ListAuthedProvidersParams {
	return &ListAuthedProvidersParams{
		HTTPClient: client,
	}
}

/*
ListAuthedProvidersParams contains all the parameters to send to the API endpoint

	for the list authed providers operation.

	Typically these are written to a http.Request.
*/
type ListAuthedProvidersParams struct {

	/* ConnectionID.

	   Connection ID
	*/
	ConnectionID string

	/* IntegrationSlug.

	   Integration slug
	*/
	IntegrationSlug string

	/* Query.

	   Query for users by name
	*/
	Query *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list authed providers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListAuthedProvidersParams) WithDefaults() *ListAuthedProvidersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list authed providers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListAuthedProvidersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list authed providers params
func (o *ListAuthedProvidersParams) WithTimeout(timeout time.Duration) *ListAuthedProvidersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list authed providers params
func (o *ListAuthedProvidersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list authed providers params
func (o *ListAuthedProvidersParams) WithContext(ctx context.Context) *ListAuthedProvidersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list authed providers params
func (o *ListAuthedProvidersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list authed providers params
func (o *ListAuthedProvidersParams) WithHTTPClient(client *http.Client) *ListAuthedProvidersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list authed providers params
func (o *ListAuthedProvidersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConnectionID adds the connectionID to the list authed providers params
func (o *ListAuthedProvidersParams) WithConnectionID(connectionID string) *ListAuthedProvidersParams {
	o.SetConnectionID(connectionID)
	return o
}

// SetConnectionID adds the connectionId to the list authed providers params
func (o *ListAuthedProvidersParams) SetConnectionID(connectionID string) {
	o.ConnectionID = connectionID
}

// WithIntegrationSlug adds the integrationSlug to the list authed providers params
func (o *ListAuthedProvidersParams) WithIntegrationSlug(integrationSlug string) *ListAuthedProvidersParams {
	o.SetIntegrationSlug(integrationSlug)
	return o
}

// SetIntegrationSlug adds the integrationSlug to the list authed providers params
func (o *ListAuthedProvidersParams) SetIntegrationSlug(integrationSlug string) {
	o.IntegrationSlug = integrationSlug
}

// WithQuery adds the query to the list authed providers params
func (o *ListAuthedProvidersParams) WithQuery(query *string) *ListAuthedProvidersParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the list authed providers params
func (o *ListAuthedProvidersParams) SetQuery(query *string) {
	o.Query = query
}

// WriteToRequest writes these params to a swagger request
func (o *ListAuthedProvidersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param connection_id
	if err := r.SetPathParam("connection_id", o.ConnectionID); err != nil {
		return err
	}

	// path param integration_slug
	if err := r.SetPathParam("integration_slug", o.IntegrationSlug); err != nil {
		return err
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
