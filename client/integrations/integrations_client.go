// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new integrations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for integrations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1IntegrationsStatuspageConnectionsConnectionID(params *DeleteV1IntegrationsStatuspageConnectionsConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1IntegrationsStatuspageConnectionsConnectionIDOK, error)

	GetV1Integrations(params *GetV1IntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsOK, error)

	GetV1IntegrationsAwsCloudtrailBatches(params *GetV1IntegrationsAwsCloudtrailBatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsAwsCloudtrailBatchesOK, error)

	GetV1IntegrationsAwsCloudtrailBatchesID(params *GetV1IntegrationsAwsCloudtrailBatchesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsAwsCloudtrailBatchesIDOK, error)

	GetV1IntegrationsAwsCloudtrailBatchesIDEvents(params *GetV1IntegrationsAwsCloudtrailBatchesIDEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsAwsCloudtrailBatchesIDEventsOK, error)

	GetV1IntegrationsAwsConnections(params *GetV1IntegrationsAwsConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsAwsConnectionsOK, error)

	GetV1IntegrationsAwsConnectionsID(params *GetV1IntegrationsAwsConnectionsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsAwsConnectionsIDOK, error)

	GetV1IntegrationsConfluenceCloudConnectionsIDSpaceSearch(params *GetV1IntegrationsConfluenceCloudConnectionsIDSpaceSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsConfluenceCloudConnectionsIDSpaceSearchOK, error)

	GetV1IntegrationsConnections(params *GetV1IntegrationsConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsConnectionsOK, error)

	GetV1IntegrationsDataExportExportRequests(params *GetV1IntegrationsDataExportExportRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsDataExportExportRequestsOK, error)

	GetV1IntegrationsDataExportExportRequestsExportRequestID(params *GetV1IntegrationsDataExportExportRequestsExportRequestIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsDataExportExportRequestsExportRequestIDOK, error)

	GetV1IntegrationsFieldMapsFieldMapIDAvailableFields(params *GetV1IntegrationsFieldMapsFieldMapIDAvailableFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsFieldMapsFieldMapIDAvailableFieldsOK, error)

	GetV1IntegrationsIntegrationID(params *GetV1IntegrationsIntegrationIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsIntegrationIDOK, error)

	GetV1IntegrationsSlackConnectionsConnectionIDWorkspaces(params *GetV1IntegrationsSlackConnectionsConnectionIDWorkspacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsSlackConnectionsConnectionIDWorkspacesOK, error)

	GetV1IntegrationsStatusesSlug(params *GetV1IntegrationsStatusesSlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsStatusesSlugOK, error)

	GetV1IntegrationsStatuspageConnections(params *GetV1IntegrationsStatuspageConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsStatuspageConnectionsOK, error)

	GetV1IntegrationsStatuspageConnectionsConnectionID(params *GetV1IntegrationsStatuspageConnectionsConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsStatuspageConnectionsConnectionIDOK, error)

	GetV1IntegrationsStatuspageConnectionsConnectionIDPages(params *GetV1IntegrationsStatuspageConnectionsConnectionIDPagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsStatuspageConnectionsConnectionIDPagesOK, error)

	GetV1IntegrationsZendeskSearch(params *GetV1IntegrationsZendeskSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsZendeskSearchOK, error)

	PatchV1IntegrationsAwsCloudtrailBatchesID(params *PatchV1IntegrationsAwsCloudtrailBatchesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IntegrationsAwsCloudtrailBatchesIDOK, error)

	PatchV1IntegrationsAwsConnectionsID(params *PatchV1IntegrationsAwsConnectionsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IntegrationsAwsConnectionsIDOK, error)

	PatchV1IntegrationsConnectionsSlugConnectionID(params *PatchV1IntegrationsConnectionsSlugConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IntegrationsConnectionsSlugConnectionIDOK, error)

	PatchV1IntegrationsConnectionsSlugConnectionIDRefresh(params *PatchV1IntegrationsConnectionsSlugConnectionIDRefreshParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IntegrationsConnectionsSlugConnectionIDRefreshOK, error)

	PatchV1IntegrationsFieldMapsFieldMapID(params *PatchV1IntegrationsFieldMapsFieldMapIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IntegrationsFieldMapsFieldMapIDOK, error)

	PatchV1IntegrationsStatuspageConnectionsConnectionID(params *PatchV1IntegrationsStatuspageConnectionsConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IntegrationsStatuspageConnectionsConnectionIDOK, error)

	PostV1IntegrationsConnectionsSlug(params *PostV1IntegrationsConnectionsSlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IntegrationsConnectionsSlugCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1IntegrationsStatuspageConnectionsConnectionID deletes a statuspage connection

Deletes the given Statuspage integration connection.
*/
func (a *Client) DeleteV1IntegrationsStatuspageConnectionsConnectionID(params *DeleteV1IntegrationsStatuspageConnectionsConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1IntegrationsStatuspageConnectionsConnectionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1IntegrationsStatuspageConnectionsConnectionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1IntegrationsStatuspageConnectionsConnectionId",
		Method:             "DELETE",
		PathPattern:        "/v1/integrations/statuspage/connections/{connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1IntegrationsStatuspageConnectionsConnectionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1IntegrationsStatuspageConnectionsConnectionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1IntegrationsStatuspageConnectionsConnectionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Integrations get v1 integrations API
*/
func (a *Client) GetV1Integrations(params *GetV1IntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1Integrations",
		Method:             "GET",
		PathPattern:        "/v1/integrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1Integrations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IntegrationsAwsCloudtrailBatches lists cloud trail batches

Lists CloudTrail batches for the authenticated organization.
*/
func (a *Client) GetV1IntegrationsAwsCloudtrailBatches(params *GetV1IntegrationsAwsCloudtrailBatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsAwsCloudtrailBatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsAwsCloudtrailBatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IntegrationsAwsCloudtrailBatches",
		Method:             "GET",
		PathPattern:        "/v1/integrations/aws/cloudtrail_batches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsAwsCloudtrailBatchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsAwsCloudtrailBatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IntegrationsAwsCloudtrailBatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IntegrationsAwsCloudtrailBatchesID retrieves a cloud trail batch

Retrieve a single CloudTrail batch.
*/
func (a *Client) GetV1IntegrationsAwsCloudtrailBatchesID(params *GetV1IntegrationsAwsCloudtrailBatchesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsAwsCloudtrailBatchesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsAwsCloudtrailBatchesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IntegrationsAwsCloudtrailBatchesId",
		Method:             "GET",
		PathPattern:        "/v1/integrations/aws/cloudtrail_batches/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsAwsCloudtrailBatchesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsAwsCloudtrailBatchesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IntegrationsAwsCloudtrailBatchesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IntegrationsAwsCloudtrailBatchesIDEvents get v1 integrations aws cloudtrail batches Id events API
*/
func (a *Client) GetV1IntegrationsAwsCloudtrailBatchesIDEvents(params *GetV1IntegrationsAwsCloudtrailBatchesIDEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsAwsCloudtrailBatchesIDEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsAwsCloudtrailBatchesIDEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IntegrationsAwsCloudtrailBatchesIdEvents",
		Method:             "GET",
		PathPattern:        "/v1/integrations/aws/cloudtrail_batches/{id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsAwsCloudtrailBatchesIDEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsAwsCloudtrailBatchesIDEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IntegrationsAwsCloudtrailBatchesIdEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IntegrationsAwsConnections lists a w s connections

Lists the available and configured AWS integration connections for the authenticated organization.
*/
func (a *Client) GetV1IntegrationsAwsConnections(params *GetV1IntegrationsAwsConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsAwsConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsAwsConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IntegrationsAwsConnections",
		Method:             "GET",
		PathPattern:        "/v1/integrations/aws/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsAwsConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsAwsConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IntegrationsAwsConnections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IntegrationsAwsConnectionsID retrieves an a w s connection

Retrieves the information about the AWS connection.
*/
func (a *Client) GetV1IntegrationsAwsConnectionsID(params *GetV1IntegrationsAwsConnectionsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsAwsConnectionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsAwsConnectionsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IntegrationsAwsConnectionsId",
		Method:             "GET",
		PathPattern:        "/v1/integrations/aws/connections/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsAwsConnectionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsAwsConnectionsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IntegrationsAwsConnectionsId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IntegrationsConfluenceCloudConnectionsIDSpaceSearch lists available space keys

Lists available space keys for the Confluence integration connection.
*/
func (a *Client) GetV1IntegrationsConfluenceCloudConnectionsIDSpaceSearch(params *GetV1IntegrationsConfluenceCloudConnectionsIDSpaceSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsConfluenceCloudConnectionsIDSpaceSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsConfluenceCloudConnectionsIDSpaceSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IntegrationsConfluenceCloudConnectionsIdSpaceSearch",
		Method:             "GET",
		PathPattern:        "/v1/integrations/confluence_cloud/connections/{id}/space/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsConfluenceCloudConnectionsIDSpaceSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsConfluenceCloudConnectionsIDSpaceSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IntegrationsConfluenceCloudConnectionsIdSpaceSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IntegrationsConnections get v1 integrations connections API
*/
func (a *Client) GetV1IntegrationsConnections(params *GetV1IntegrationsConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IntegrationsConnections",
		Method:             "GET",
		PathPattern:        "/v1/integrations/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IntegrationsConnections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IntegrationsDataExportExportRequests lists export requests

Lists export requests for data exporting
*/
func (a *Client) GetV1IntegrationsDataExportExportRequests(params *GetV1IntegrationsDataExportExportRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsDataExportExportRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsDataExportExportRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IntegrationsDataExportExportRequests",
		Method:             "GET",
		PathPattern:        "/v1/integrations/data_export/export_requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsDataExportExportRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsDataExportExportRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IntegrationsDataExportExportRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IntegrationsDataExportExportRequestsExportRequestID retrieves a single export requests

Retrieves a single export request for data exporting
*/
func (a *Client) GetV1IntegrationsDataExportExportRequestsExportRequestID(params *GetV1IntegrationsDataExportExportRequestsExportRequestIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsDataExportExportRequestsExportRequestIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsDataExportExportRequestsExportRequestIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IntegrationsDataExportExportRequestsExportRequestId",
		Method:             "GET",
		PathPattern:        "/v1/integrations/data_export/export_requests/{export_request_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsDataExportExportRequestsExportRequestIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsDataExportExportRequestsExportRequestIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IntegrationsDataExportExportRequestsExportRequestId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IntegrationsFieldMapsFieldMapIDAvailableFields gets mappable fields

Get a description of the fields to which data can be mapped
*/
func (a *Client) GetV1IntegrationsFieldMapsFieldMapIDAvailableFields(params *GetV1IntegrationsFieldMapsFieldMapIDAvailableFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsFieldMapsFieldMapIDAvailableFieldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsFieldMapsFieldMapIDAvailableFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IntegrationsFieldMapsFieldMapIdAvailableFields",
		Method:             "GET",
		PathPattern:        "/v1/integrations/field_maps/{field_map_id}/available_fields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsFieldMapsFieldMapIDAvailableFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsFieldMapsFieldMapIDAvailableFieldsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IntegrationsFieldMapsFieldMapIdAvailableFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IntegrationsIntegrationID Retrieve a single integration
*/
func (a *Client) GetV1IntegrationsIntegrationID(params *GetV1IntegrationsIntegrationIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsIntegrationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsIntegrationIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IntegrationsIntegrationId",
		Method:             "GET",
		PathPattern:        "/v1/integrations/{integration_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsIntegrationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsIntegrationIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IntegrationsIntegrationId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IntegrationsSlackConnectionsConnectionIDWorkspaces get v1 integrations slack connections connection Id workspaces API
*/
func (a *Client) GetV1IntegrationsSlackConnectionsConnectionIDWorkspaces(params *GetV1IntegrationsSlackConnectionsConnectionIDWorkspacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsSlackConnectionsConnectionIDWorkspacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsSlackConnectionsConnectionIDWorkspacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IntegrationsSlackConnectionsConnectionIdWorkspaces",
		Method:             "GET",
		PathPattern:        "/v1/integrations/slack/connections/{connection_id}/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsSlackConnectionsConnectionIDWorkspacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsSlackConnectionsConnectionIDWorkspacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IntegrationsSlackConnectionsConnectionIdWorkspaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IntegrationsStatusesSlug get v1 integrations statuses slug API
*/
func (a *Client) GetV1IntegrationsStatusesSlug(params *GetV1IntegrationsStatusesSlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsStatusesSlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsStatusesSlugParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IntegrationsStatusesSlug",
		Method:             "GET",
		PathPattern:        "/v1/integrations/statuses/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsStatusesSlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsStatusesSlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IntegrationsStatusesSlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IntegrationsStatuspageConnections lists statuspage connections

Lists the available and configured Statuspage integrations connections for the authenticated organization.
*/
func (a *Client) GetV1IntegrationsStatuspageConnections(params *GetV1IntegrationsStatuspageConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsStatuspageConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsStatuspageConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IntegrationsStatuspageConnections",
		Method:             "GET",
		PathPattern:        "/v1/integrations/statuspage/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsStatuspageConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsStatuspageConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IntegrationsStatuspageConnections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IntegrationsStatuspageConnectionsConnectionID retrieves a statuspage connection

Retrieve the information about the Statuspage connection.
*/
func (a *Client) GetV1IntegrationsStatuspageConnectionsConnectionID(params *GetV1IntegrationsStatuspageConnectionsConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsStatuspageConnectionsConnectionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsStatuspageConnectionsConnectionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IntegrationsStatuspageConnectionsConnectionId",
		Method:             "GET",
		PathPattern:        "/v1/integrations/statuspage/connections/{connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsStatuspageConnectionsConnectionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsStatuspageConnectionsConnectionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IntegrationsStatuspageConnectionsConnectionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IntegrationsStatuspageConnectionsConnectionIDPages get v1 integrations statuspage connections connection Id pages API
*/
func (a *Client) GetV1IntegrationsStatuspageConnectionsConnectionIDPages(params *GetV1IntegrationsStatuspageConnectionsConnectionIDPagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsStatuspageConnectionsConnectionIDPagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsStatuspageConnectionsConnectionIDPagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IntegrationsStatuspageConnectionsConnectionIdPages",
		Method:             "GET",
		PathPattern:        "/v1/integrations/statuspage/connections/{connection_id}/pages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsStatuspageConnectionsConnectionIDPagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsStatuspageConnectionsConnectionIDPagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IntegrationsStatuspageConnectionsConnectionIdPages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IntegrationsZendeskSearch get v1 integrations zendesk search API
*/
func (a *Client) GetV1IntegrationsZendeskSearch(params *GetV1IntegrationsZendeskSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IntegrationsZendeskSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IntegrationsZendeskSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IntegrationsZendeskSearch",
		Method:             "GET",
		PathPattern:        "/v1/integrations/zendesk/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IntegrationsZendeskSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IntegrationsZendeskSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IntegrationsZendeskSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1IntegrationsAwsCloudtrailBatchesID updates a cloud trail batch

Update a CloudTrail batch with new information.
*/
func (a *Client) PatchV1IntegrationsAwsCloudtrailBatchesID(params *PatchV1IntegrationsAwsCloudtrailBatchesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IntegrationsAwsCloudtrailBatchesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1IntegrationsAwsCloudtrailBatchesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1IntegrationsAwsCloudtrailBatchesId",
		Method:             "PATCH",
		PathPattern:        "/v1/integrations/aws/cloudtrail_batches/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1IntegrationsAwsCloudtrailBatchesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1IntegrationsAwsCloudtrailBatchesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1IntegrationsAwsCloudtrailBatchesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1IntegrationsAwsConnectionsID updates an a w s connection

Update the AWS connection with the provided data.
*/
func (a *Client) PatchV1IntegrationsAwsConnectionsID(params *PatchV1IntegrationsAwsConnectionsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IntegrationsAwsConnectionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1IntegrationsAwsConnectionsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1IntegrationsAwsConnectionsId",
		Method:             "PATCH",
		PathPattern:        "/v1/integrations/aws/connections/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1IntegrationsAwsConnectionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1IntegrationsAwsConnectionsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1IntegrationsAwsConnectionsId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1IntegrationsConnectionsSlugConnectionID patch v1 integrations connections slug connection Id API
*/
func (a *Client) PatchV1IntegrationsConnectionsSlugConnectionID(params *PatchV1IntegrationsConnectionsSlugConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IntegrationsConnectionsSlugConnectionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1IntegrationsConnectionsSlugConnectionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1IntegrationsConnectionsSlugConnectionId",
		Method:             "PATCH",
		PathPattern:        "/v1/integrations/connections/{slug}/{connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1IntegrationsConnectionsSlugConnectionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1IntegrationsConnectionsSlugConnectionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1IntegrationsConnectionsSlugConnectionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1IntegrationsConnectionsSlugConnectionIDRefresh patch v1 integrations connections slug connection Id refresh API
*/
func (a *Client) PatchV1IntegrationsConnectionsSlugConnectionIDRefresh(params *PatchV1IntegrationsConnectionsSlugConnectionIDRefreshParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IntegrationsConnectionsSlugConnectionIDRefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1IntegrationsConnectionsSlugConnectionIDRefreshParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1IntegrationsConnectionsSlugConnectionIdRefresh",
		Method:             "PATCH",
		PathPattern:        "/v1/integrations/connections/{slug}/{connection_id}/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1IntegrationsConnectionsSlugConnectionIDRefreshReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1IntegrationsConnectionsSlugConnectionIDRefreshOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1IntegrationsConnectionsSlugConnectionIdRefresh: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1IntegrationsFieldMapsFieldMapID updates field map

Update field map
*/
func (a *Client) PatchV1IntegrationsFieldMapsFieldMapID(params *PatchV1IntegrationsFieldMapsFieldMapIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IntegrationsFieldMapsFieldMapIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1IntegrationsFieldMapsFieldMapIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1IntegrationsFieldMapsFieldMapId",
		Method:             "PATCH",
		PathPattern:        "/v1/integrations/field_maps/{field_map_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1IntegrationsFieldMapsFieldMapIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1IntegrationsFieldMapsFieldMapIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1IntegrationsFieldMapsFieldMapId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1IntegrationsStatuspageConnectionsConnectionID updates a statuspage connection

Update the given Statuspage integration connection.
*/
func (a *Client) PatchV1IntegrationsStatuspageConnectionsConnectionID(params *PatchV1IntegrationsStatuspageConnectionsConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IntegrationsStatuspageConnectionsConnectionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1IntegrationsStatuspageConnectionsConnectionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1IntegrationsStatuspageConnectionsConnectionId",
		Method:             "PATCH",
		PathPattern:        "/v1/integrations/statuspage/connections/{connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1IntegrationsStatuspageConnectionsConnectionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1IntegrationsStatuspageConnectionsConnectionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1IntegrationsStatuspageConnectionsConnectionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1IntegrationsConnectionsSlug post v1 integrations connections slug API
*/
func (a *Client) PostV1IntegrationsConnectionsSlug(params *PostV1IntegrationsConnectionsSlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IntegrationsConnectionsSlugCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1IntegrationsConnectionsSlugParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1IntegrationsConnectionsSlug",
		Method:             "POST",
		PathPattern:        "/v1/integrations/connections/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1IntegrationsConnectionsSlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1IntegrationsConnectionsSlugCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1IntegrationsConnectionsSlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
