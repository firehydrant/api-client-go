// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new integrations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for integrations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateConnection(params *CreateConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateConnectionCreated, error)

	CreateSlackEmojiAction(params *CreateSlackEmojiActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSlackEmojiActionCreated, error)

	DeleteSlackEmojiAction(params *DeleteSlackEmojiActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSlackEmojiActionNoContent, error)

	DeleteStatuspageConnection(params *DeleteStatuspageConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStatuspageConnectionOK, error)

	GetAwsCloudtrailBatch(params *GetAwsCloudtrailBatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAwsCloudtrailBatchOK, error)

	GetAwsConnection(params *GetAwsConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAwsConnectionOK, error)

	GetIntegration(params *GetIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIntegrationOK, error)

	GetSlackEmojiAction(params *GetSlackEmojiActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSlackEmojiActionOK, error)

	GetStatuspageConnection(params *GetStatuspageConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStatuspageConnectionOK, error)

	GetZendeskCustomerSupportIssue(params *GetZendeskCustomerSupportIssueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetZendeskCustomerSupportIssueOK, error)

	ListAuthedProviders(params *ListAuthedProvidersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAuthedProvidersOK, error)

	ListAwsCloudtrailBatchEvents(params *ListAwsCloudtrailBatchEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAwsCloudtrailBatchEventsOK, error)

	ListAwsCloudtrailBatches(params *ListAwsCloudtrailBatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAwsCloudtrailBatchesOK, error)

	ListAwsConnections(params *ListAwsConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAwsConnectionsOK, error)

	ListConnectionStatuses(params *ListConnectionStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListConnectionStatusesOK, error)

	ListConnectionStatusesBySlug(params *ListConnectionStatusesBySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListConnectionStatusesBySlugOK, error)

	ListConnections(params *ListConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListConnectionsOK, error)

	ListFieldMapAvailableFields(params *ListFieldMapAvailableFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFieldMapAvailableFieldsOK, error)

	ListIntegrations(params *ListIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIntegrationsOK, error)

	ListSlackEmojiActions(params *ListSlackEmojiActionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSlackEmojiActionsOK, error)

	ListSlackUsergroups(params *ListSlackUsergroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSlackUsergroupsOK, error)

	ListSlackWorkspaces(params *ListSlackWorkspacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSlackWorkspacesOK, error)

	ListStatuspageConnectionPages(params *ListStatuspageConnectionPagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListStatuspageConnectionPagesOK, error)

	ListStatuspageConnections(params *ListStatuspageConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListStatuspageConnectionsOK, error)

	RefreshConnection(params *RefreshConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshConnectionOK, error)

	SearchConfluenceSpaces(params *SearchConfluenceSpacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchConfluenceSpacesOK, error)

	SearchZendeskTickets(params *SearchZendeskTicketsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchZendeskTicketsOK, error)

	UpdateAuthedProvider(params *UpdateAuthedProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAuthedProviderOK, error)

	UpdateAwsCloudtrailBatch(params *UpdateAwsCloudtrailBatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAwsCloudtrailBatchOK, error)

	UpdateAwsConnection(params *UpdateAwsConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAwsConnectionOK, error)

	UpdateConnection(params *UpdateConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateConnectionOK, error)

	UpdateFieldMap(params *UpdateFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFieldMapOK, error)

	UpdateSlackEmojiAction(params *UpdateSlackEmojiActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSlackEmojiActionOK, error)

	UpdateStatuspageConnection(params *UpdateStatuspageConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStatuspageConnectionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateConnection creates a new integration connection

Create a new integration connection
*/
func (a *Client) CreateConnection(params *CreateConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateConnectionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_connection",
		Method:             "POST",
		PathPattern:        "/v1/integrations/connections/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateConnectionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_connection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSlackEmojiAction creates a new slack emoji action

Creates a new Slack emoji action
*/
func (a *Client) CreateSlackEmojiAction(params *CreateSlackEmojiActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSlackEmojiActionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSlackEmojiActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_slack_emoji_action",
		Method:             "POST",
		PathPattern:        "/v1/integrations/slack/connections/{connection_id}/emoji_actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSlackEmojiActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSlackEmojiActionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_slack_emoji_action: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSlackEmojiAction deletes a slack emoji action

Deletes a Slack emoji action
*/
func (a *Client) DeleteSlackEmojiAction(params *DeleteSlackEmojiActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSlackEmojiActionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSlackEmojiActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_slack_emoji_action",
		Method:             "DELETE",
		PathPattern:        "/v1/integrations/slack/connections/{connection_id}/emoji_actions/{emoji_action_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSlackEmojiActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSlackEmojiActionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_slack_emoji_action: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteStatuspageConnection deletes a statuspage connection

Deletes the given Statuspage integration connection.
*/
func (a *Client) DeleteStatuspageConnection(params *DeleteStatuspageConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStatuspageConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStatuspageConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_statuspage_connection",
		Method:             "DELETE",
		PathPattern:        "/v1/integrations/statuspage/connections/{connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStatuspageConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStatuspageConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_statuspage_connection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAwsCloudtrailBatch gets a cloud trail batch

Retrieve a single CloudTrail batch.
*/
func (a *Client) GetAwsCloudtrailBatch(params *GetAwsCloudtrailBatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAwsCloudtrailBatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsCloudtrailBatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_aws_cloudtrail_batch",
		Method:             "GET",
		PathPattern:        "/v1/integrations/aws/cloudtrail_batches/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsCloudtrailBatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAwsCloudtrailBatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_aws_cloudtrail_batch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAwsConnection gets an a w s connection

Retrieves the information about the AWS connection.
*/
func (a *Client) GetAwsConnection(params *GetAwsConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAwsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_aws_connection",
		Method:             "GET",
		PathPattern:        "/v1/integrations/aws/connections/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAwsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_aws_connection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntegration gets an integration

Retrieve a single integration
*/
func (a *Client) GetIntegration(params *GetIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_integration",
		Method:             "GET",
		PathPattern:        "/v1/integrations/{integration_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_integration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSlackEmojiAction gets a slack emoji action

Retrieves a Slack emoji action
*/
func (a *Client) GetSlackEmojiAction(params *GetSlackEmojiActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSlackEmojiActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSlackEmojiActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_slack_emoji_action",
		Method:             "GET",
		PathPattern:        "/v1/integrations/slack/connections/{connection_id}/emoji_actions/{emoji_action_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSlackEmojiActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSlackEmojiActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_slack_emoji_action: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStatuspageConnection gets a statuspage connection

Retrieve the information about the Statuspage connection.
*/
func (a *Client) GetStatuspageConnection(params *GetStatuspageConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStatuspageConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatuspageConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_statuspage_connection",
		Method:             "GET",
		PathPattern:        "/v1/integrations/statuspage/connections/{connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStatuspageConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStatuspageConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_statuspage_connection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetZendeskCustomerSupportIssue searches for zendesk tickets

Search for Zendesk tickets
*/
func (a *Client) GetZendeskCustomerSupportIssue(params *GetZendeskCustomerSupportIssueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetZendeskCustomerSupportIssueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZendeskCustomerSupportIssueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_zendesk_customer_support_issue",
		Method:             "GET",
		PathPattern:        "/v1/integrations/zendesk/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetZendeskCustomerSupportIssueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetZendeskCustomerSupportIssueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_zendesk_customer_support_issue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAuthedProviders lists the available and configured integrations

Lists the available and configured integrations
*/
func (a *Client) ListAuthedProviders(params *ListAuthedProvidersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAuthedProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAuthedProvidersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_authed_providers",
		Method:             "GET",
		PathPattern:        "/v1/integrations/authed_providers/{integration_slug}/{connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAuthedProvidersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAuthedProvidersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_authed_providers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAwsCloudtrailBatchEvents lists events for an a w s cloud trail batch

List events for an AWS CloudTrail batch
*/
func (a *Client) ListAwsCloudtrailBatchEvents(params *ListAwsCloudtrailBatchEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAwsCloudtrailBatchEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAwsCloudtrailBatchEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_aws_cloudtrail_batch_events",
		Method:             "GET",
		PathPattern:        "/v1/integrations/aws/cloudtrail_batches/{id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAwsCloudtrailBatchEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAwsCloudtrailBatchEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_aws_cloudtrail_batch_events: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAwsCloudtrailBatches lists cloud trail batches

Lists CloudTrail batches for the authenticated organization.
*/
func (a *Client) ListAwsCloudtrailBatches(params *ListAwsCloudtrailBatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAwsCloudtrailBatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAwsCloudtrailBatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_aws_cloudtrail_batches",
		Method:             "GET",
		PathPattern:        "/v1/integrations/aws/cloudtrail_batches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAwsCloudtrailBatchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAwsCloudtrailBatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_aws_cloudtrail_batches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAwsConnections lists a w s connections

Lists the available and configured AWS integration connections for the authenticated organization.
*/
func (a *Client) ListAwsConnections(params *ListAwsConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAwsConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAwsConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_aws_connections",
		Method:             "GET",
		PathPattern:        "/v1/integrations/aws/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAwsConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAwsConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_aws_connections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListConnectionStatuses gets integration connection status

Retrieve overall integration connection status
*/
func (a *Client) ListConnectionStatuses(params *ListConnectionStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListConnectionStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListConnectionStatusesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_connection_statuses",
		Method:             "GET",
		PathPattern:        "/v1/integrations/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListConnectionStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListConnectionStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_connection_statuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListConnectionStatusesBySlug gets an integration connection status

Retrieve a single integration connection status
*/
func (a *Client) ListConnectionStatusesBySlug(params *ListConnectionStatusesBySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListConnectionStatusesBySlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListConnectionStatusesBySlugParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_connection_statuses_by_slug",
		Method:             "GET",
		PathPattern:        "/v1/integrations/statuses/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListConnectionStatusesBySlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListConnectionStatusesBySlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_connection_statuses_by_slug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListConnections lists integration connections

List available integration connections
*/
func (a *Client) ListConnections(params *ListConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_connections",
		Method:             "GET",
		PathPattern:        "/v1/integrations/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_connections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListFieldMapAvailableFields lists available fields for field mapping

Get a description of the fields to which data can be mapped
*/
func (a *Client) ListFieldMapAvailableFields(params *ListFieldMapAvailableFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFieldMapAvailableFieldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFieldMapAvailableFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_field_map_available_fields",
		Method:             "GET",
		PathPattern:        "/v1/integrations/field_maps/{field_map_id}/available_fields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListFieldMapAvailableFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFieldMapAvailableFieldsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_field_map_available_fields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIntegrations lists integrations

Lists the available and configured integrations
*/
func (a *Client) ListIntegrations(params *ListIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIntegrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIntegrationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_integrations",
		Method:             "GET",
		PathPattern:        "/v1/integrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIntegrationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIntegrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_integrations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSlackEmojiActions lists slack emoji actions

Lists Slack emoji actions
*/
func (a *Client) ListSlackEmojiActions(params *ListSlackEmojiActionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSlackEmojiActionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSlackEmojiActionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_slack_emoji_actions",
		Method:             "GET",
		PathPattern:        "/v1/integrations/slack/connections/{connection_id}/emoji_actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSlackEmojiActionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSlackEmojiActionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_slack_emoji_actions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSlackUsergroups lists slack user groups

Lists all Slack user groups
*/
func (a *Client) ListSlackUsergroups(params *ListSlackUsergroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSlackUsergroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSlackUsergroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_slack_usergroups",
		Method:             "GET",
		PathPattern:        "/v1/integrations/slack/usergroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSlackUsergroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSlackUsergroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_slack_usergroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSlackWorkspaces lists slack workspaces

Lists all Slack workspaces
*/
func (a *Client) ListSlackWorkspaces(params *ListSlackWorkspacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSlackWorkspacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSlackWorkspacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_slack_workspaces",
		Method:             "GET",
		PathPattern:        "/v1/integrations/slack/connections/{connection_id}/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSlackWorkspacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSlackWorkspacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_slack_workspaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListStatuspageConnectionPages lists status page pages for a connection

Lists available page IDs for the Statuspage integration connection.
*/
func (a *Client) ListStatuspageConnectionPages(params *ListStatuspageConnectionPagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListStatuspageConnectionPagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStatuspageConnectionPagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_statuspage_connection_pages",
		Method:             "GET",
		PathPattern:        "/v1/integrations/statuspage/connections/{connection_id}/pages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListStatuspageConnectionPagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStatuspageConnectionPagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_statuspage_connection_pages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListStatuspageConnections lists statuspage connections

Lists the available and configured Statuspage integrations connections for the authenticated organization.
*/
func (a *Client) ListStatuspageConnections(params *ListStatuspageConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListStatuspageConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStatuspageConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_statuspage_connections",
		Method:             "GET",
		PathPattern:        "/v1/integrations/statuspage/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListStatuspageConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStatuspageConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_statuspage_connections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RefreshConnection refreshes an integration connection

Refresh the integration connection with the provided data
*/
func (a *Client) RefreshConnection(params *RefreshConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refresh_connection",
		Method:             "PATCH",
		PathPattern:        "/v1/integrations/connections/{slug}/{connection_id}/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RefreshConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refresh_connection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchConfluenceSpaces lists confluence spaces

Lists available space keys for the Confluence integration connection.
*/
func (a *Client) SearchConfluenceSpaces(params *SearchConfluenceSpacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchConfluenceSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchConfluenceSpacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "search_confluence_spaces",
		Method:             "GET",
		PathPattern:        "/v1/integrations/confluence_cloud/connections/{id}/space/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchConfluenceSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchConfluenceSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search_confluence_spaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchZendeskTickets searches for zendesk tickets

Search for Zendesk tickets
*/
func (a *Client) SearchZendeskTickets(params *SearchZendeskTicketsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchZendeskTicketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchZendeskTicketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "search_zendesk_tickets",
		Method:             "GET",
		PathPattern:        "/v1/integrations/zendesk/{connection_id}/tickets/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchZendeskTicketsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchZendeskTicketsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search_zendesk_tickets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAuthedProvider gets an authed provider

Retrieve a single authed provider
*/
func (a *Client) UpdateAuthedProvider(params *UpdateAuthedProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAuthedProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAuthedProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_authed_provider",
		Method:             "PATCH",
		PathPattern:        "/v1/integrations/authed_providers/{integration_slug}/{connection_id}/{authed_provider_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAuthedProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAuthedProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_authed_provider: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAwsCloudtrailBatch updates a cloud trail batch

Update a CloudTrail batch with new information.
*/
func (a *Client) UpdateAwsCloudtrailBatch(params *UpdateAwsCloudtrailBatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAwsCloudtrailBatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAwsCloudtrailBatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_aws_cloudtrail_batch",
		Method:             "PATCH",
		PathPattern:        "/v1/integrations/aws/cloudtrail_batches/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAwsCloudtrailBatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAwsCloudtrailBatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_aws_cloudtrail_batch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAwsConnection updates an a w s connection

Update the AWS connection with the provided data.
*/
func (a *Client) UpdateAwsConnection(params *UpdateAwsConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAwsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAwsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_aws_connection",
		Method:             "PATCH",
		PathPattern:        "/v1/integrations/aws/connections/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAwsConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAwsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_aws_connection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateConnection updates an integration connection

Update the integration connection with the provided data
*/
func (a *Client) UpdateConnection(params *UpdateConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_connection",
		Method:             "PATCH",
		PathPattern:        "/v1/integrations/connections/{slug}/{connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_connection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateFieldMap updates field mapping

Update field mapping
*/
func (a *Client) UpdateFieldMap(params *UpdateFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFieldMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFieldMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_field_map",
		Method:             "PATCH",
		PathPattern:        "/v1/integrations/field_maps/{field_map_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateFieldMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFieldMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_field_map: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSlackEmojiAction updates a slack emoji action

Updates a Slack emoji action
*/
func (a *Client) UpdateSlackEmojiAction(params *UpdateSlackEmojiActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSlackEmojiActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSlackEmojiActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_slack_emoji_action",
		Method:             "PATCH",
		PathPattern:        "/v1/integrations/slack/connections/{connection_id}/emoji_actions/{emoji_action_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSlackEmojiActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSlackEmojiActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_slack_emoji_action: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateStatuspageConnection updates a statuspage connection

Update the given Statuspage integration connection.
*/
func (a *Client) UpdateStatuspageConnection(params *UpdateStatuspageConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStatuspageConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStatuspageConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_statuspage_connection",
		Method:             "PATCH",
		PathPattern:        "/v1/integrations/statuspage/connections/{connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStatuspageConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStatuspageConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_statuspage_connection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
