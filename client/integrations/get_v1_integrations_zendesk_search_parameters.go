// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetV1IntegrationsZendeskSearchParams creates a new GetV1IntegrationsZendeskSearchParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetV1IntegrationsZendeskSearchParams() *GetV1IntegrationsZendeskSearchParams {
	return &GetV1IntegrationsZendeskSearchParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetV1IntegrationsZendeskSearchParamsWithTimeout creates a new GetV1IntegrationsZendeskSearchParams object
// with the ability to set a timeout on a request.
func NewGetV1IntegrationsZendeskSearchParamsWithTimeout(timeout time.Duration) *GetV1IntegrationsZendeskSearchParams {
	return &GetV1IntegrationsZendeskSearchParams{
		timeout: timeout,
	}
}

// NewGetV1IntegrationsZendeskSearchParamsWithContext creates a new GetV1IntegrationsZendeskSearchParams object
// with the ability to set a context for a request.
func NewGetV1IntegrationsZendeskSearchParamsWithContext(ctx context.Context) *GetV1IntegrationsZendeskSearchParams {
	return &GetV1IntegrationsZendeskSearchParams{
		Context: ctx,
	}
}

// NewGetV1IntegrationsZendeskSearchParamsWithHTTPClient creates a new GetV1IntegrationsZendeskSearchParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetV1IntegrationsZendeskSearchParamsWithHTTPClient(client *http.Client) *GetV1IntegrationsZendeskSearchParams {
	return &GetV1IntegrationsZendeskSearchParams{
		HTTPClient: client,
	}
}

/*
GetV1IntegrationsZendeskSearchParams contains all the parameters to send to the API endpoint

	for the get v1 integrations zendesk search operation.

	Typically these are written to a http.Request.
*/
type GetV1IntegrationsZendeskSearchParams struct {

	/* Include.

	   Use to include attached_incidents
	*/
	Include []string

	/* TicketID.

	   Zendesk ticket ID
	*/
	TicketID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get v1 integrations zendesk search params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1IntegrationsZendeskSearchParams) WithDefaults() *GetV1IntegrationsZendeskSearchParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get v1 integrations zendesk search params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1IntegrationsZendeskSearchParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get v1 integrations zendesk search params
func (o *GetV1IntegrationsZendeskSearchParams) WithTimeout(timeout time.Duration) *GetV1IntegrationsZendeskSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v1 integrations zendesk search params
func (o *GetV1IntegrationsZendeskSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v1 integrations zendesk search params
func (o *GetV1IntegrationsZendeskSearchParams) WithContext(ctx context.Context) *GetV1IntegrationsZendeskSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v1 integrations zendesk search params
func (o *GetV1IntegrationsZendeskSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v1 integrations zendesk search params
func (o *GetV1IntegrationsZendeskSearchParams) WithHTTPClient(client *http.Client) *GetV1IntegrationsZendeskSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v1 integrations zendesk search params
func (o *GetV1IntegrationsZendeskSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInclude adds the include to the get v1 integrations zendesk search params
func (o *GetV1IntegrationsZendeskSearchParams) WithInclude(include []string) *GetV1IntegrationsZendeskSearchParams {
	o.SetInclude(include)
	return o
}

// SetInclude adds the include to the get v1 integrations zendesk search params
func (o *GetV1IntegrationsZendeskSearchParams) SetInclude(include []string) {
	o.Include = include
}

// WithTicketID adds the ticketID to the get v1 integrations zendesk search params
func (o *GetV1IntegrationsZendeskSearchParams) WithTicketID(ticketID string) *GetV1IntegrationsZendeskSearchParams {
	o.SetTicketID(ticketID)
	return o
}

// SetTicketID adds the ticketId to the get v1 integrations zendesk search params
func (o *GetV1IntegrationsZendeskSearchParams) SetTicketID(ticketID string) {
	o.TicketID = ticketID
}

// WriteToRequest writes these params to a swagger request
func (o *GetV1IntegrationsZendeskSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Include != nil {

		// binding items for include
		joinedInclude := o.bindParamInclude(reg)

		// query array param include
		if err := r.SetQueryParam("include", joinedInclude...); err != nil {
			return err
		}
	}

	// query param ticket_id
	qrTicketID := o.TicketID
	qTicketID := qrTicketID
	if qTicketID != "" {

		if err := r.SetQueryParam("ticket_id", qTicketID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetV1IntegrationsZendeskSearch binds the parameter include
func (o *GetV1IntegrationsZendeskSearchParams) bindParamInclude(formats strfmt.Registry) []string {
	includeIR := o.Include

	var includeIC []string
	for _, includeIIR := range includeIR { // explode []string

		includeIIV := includeIIR // string as string
		includeIC = append(includeIC, includeIIV)
	}

	// items.CollectionFormat: ""
	includeIS := swag.JoinByFormat(includeIC, "")

	return includeIS
}
