// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetV1IntegrationsMicrosoftTeamsV2OnCallParams creates a new GetV1IntegrationsMicrosoftTeamsV2OnCallParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetV1IntegrationsMicrosoftTeamsV2OnCallParams() *GetV1IntegrationsMicrosoftTeamsV2OnCallParams {
	return &GetV1IntegrationsMicrosoftTeamsV2OnCallParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetV1IntegrationsMicrosoftTeamsV2OnCallParamsWithTimeout creates a new GetV1IntegrationsMicrosoftTeamsV2OnCallParams object
// with the ability to set a timeout on a request.
func NewGetV1IntegrationsMicrosoftTeamsV2OnCallParamsWithTimeout(timeout time.Duration) *GetV1IntegrationsMicrosoftTeamsV2OnCallParams {
	return &GetV1IntegrationsMicrosoftTeamsV2OnCallParams{
		timeout: timeout,
	}
}

// NewGetV1IntegrationsMicrosoftTeamsV2OnCallParamsWithContext creates a new GetV1IntegrationsMicrosoftTeamsV2OnCallParams object
// with the ability to set a context for a request.
func NewGetV1IntegrationsMicrosoftTeamsV2OnCallParamsWithContext(ctx context.Context) *GetV1IntegrationsMicrosoftTeamsV2OnCallParams {
	return &GetV1IntegrationsMicrosoftTeamsV2OnCallParams{
		Context: ctx,
	}
}

// NewGetV1IntegrationsMicrosoftTeamsV2OnCallParamsWithHTTPClient creates a new GetV1IntegrationsMicrosoftTeamsV2OnCallParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetV1IntegrationsMicrosoftTeamsV2OnCallParamsWithHTTPClient(client *http.Client) *GetV1IntegrationsMicrosoftTeamsV2OnCallParams {
	return &GetV1IntegrationsMicrosoftTeamsV2OnCallParams{
		HTTPClient: client,
	}
}

/*
GetV1IntegrationsMicrosoftTeamsV2OnCallParams contains all the parameters to send to the API endpoint

	for the get v1 integrations microsoft teams v2 on call operation.

	Typically these are written to a http.Request.
*/
type GetV1IntegrationsMicrosoftTeamsV2OnCallParams struct {

	/* CatalogEntries.

	   The catalog entries to retrieve on-call information for
	*/
	CatalogEntries []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get v1 integrations microsoft teams v2 on call params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1IntegrationsMicrosoftTeamsV2OnCallParams) WithDefaults() *GetV1IntegrationsMicrosoftTeamsV2OnCallParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get v1 integrations microsoft teams v2 on call params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1IntegrationsMicrosoftTeamsV2OnCallParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get v1 integrations microsoft teams v2 on call params
func (o *GetV1IntegrationsMicrosoftTeamsV2OnCallParams) WithTimeout(timeout time.Duration) *GetV1IntegrationsMicrosoftTeamsV2OnCallParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v1 integrations microsoft teams v2 on call params
func (o *GetV1IntegrationsMicrosoftTeamsV2OnCallParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v1 integrations microsoft teams v2 on call params
func (o *GetV1IntegrationsMicrosoftTeamsV2OnCallParams) WithContext(ctx context.Context) *GetV1IntegrationsMicrosoftTeamsV2OnCallParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v1 integrations microsoft teams v2 on call params
func (o *GetV1IntegrationsMicrosoftTeamsV2OnCallParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v1 integrations microsoft teams v2 on call params
func (o *GetV1IntegrationsMicrosoftTeamsV2OnCallParams) WithHTTPClient(client *http.Client) *GetV1IntegrationsMicrosoftTeamsV2OnCallParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v1 integrations microsoft teams v2 on call params
func (o *GetV1IntegrationsMicrosoftTeamsV2OnCallParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCatalogEntries adds the catalogEntries to the get v1 integrations microsoft teams v2 on call params
func (o *GetV1IntegrationsMicrosoftTeamsV2OnCallParams) WithCatalogEntries(catalogEntries []string) *GetV1IntegrationsMicrosoftTeamsV2OnCallParams {
	o.SetCatalogEntries(catalogEntries)
	return o
}

// SetCatalogEntries adds the catalogEntries to the get v1 integrations microsoft teams v2 on call params
func (o *GetV1IntegrationsMicrosoftTeamsV2OnCallParams) SetCatalogEntries(catalogEntries []string) {
	o.CatalogEntries = catalogEntries
}

// WriteToRequest writes these params to a swagger request
func (o *GetV1IntegrationsMicrosoftTeamsV2OnCallParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CatalogEntries != nil {

		// binding items for catalog_entries
		joinedCatalogEntries := o.bindParamCatalogEntries(reg)

		// form array param catalog_entries
		if err := r.SetFormParam("catalog_entries", joinedCatalogEntries...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetV1IntegrationsMicrosoftTeamsV2OnCall binds the parameter catalog_entries
func (o *GetV1IntegrationsMicrosoftTeamsV2OnCallParams) bindParamCatalogEntries(formats strfmt.Registry) []string {
	catalogEntriesIR := o.CatalogEntries

	var catalogEntriesIC []string
	for _, catalogEntriesIIR := range catalogEntriesIR { // explode []string

		catalogEntriesIIV := catalogEntriesIIR // string as string
		catalogEntriesIC = append(catalogEntriesIC, catalogEntriesIIV)
	}

	// items.CollectionFormat: ""
	catalogEntriesIS := swag.JoinByFormat(catalogEntriesIC, "")

	return catalogEntriesIS
}
