// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams creates a new GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams() *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams {
	return &GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParamsWithTimeout creates a new GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams object
// with the ability to set a timeout on a request.
func NewGetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParamsWithTimeout(timeout time.Duration) *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams {
	return &GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams{
		timeout: timeout,
	}
}

// NewGetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParamsWithContext creates a new GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams object
// with the ability to set a context for a request.
func NewGetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParamsWithContext(ctx context.Context) *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams {
	return &GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams{
		Context: ctx,
	}
}

// NewGetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParamsWithHTTPClient creates a new GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParamsWithHTTPClient(client *http.Client) *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams {
	return &GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams{
		HTTPClient: client,
	}
}

/*
GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams contains all the parameters to send to the API endpoint

	for the get v1 integrations microsoft teams v2 channels ms channel Id messages message Id votes status operation.

	Typically these are written to a http.Request.
*/
type GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams struct {

	// MessageID.
	MessageID string

	// MsChannelID.
	MsChannelID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get v1 integrations microsoft teams v2 channels ms channel Id messages message Id votes status params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams) WithDefaults() *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get v1 integrations microsoft teams v2 channels ms channel Id messages message Id votes status params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get v1 integrations microsoft teams v2 channels ms channel Id messages message Id votes status params
func (o *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams) WithTimeout(timeout time.Duration) *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v1 integrations microsoft teams v2 channels ms channel Id messages message Id votes status params
func (o *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v1 integrations microsoft teams v2 channels ms channel Id messages message Id votes status params
func (o *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams) WithContext(ctx context.Context) *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v1 integrations microsoft teams v2 channels ms channel Id messages message Id votes status params
func (o *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v1 integrations microsoft teams v2 channels ms channel Id messages message Id votes status params
func (o *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams) WithHTTPClient(client *http.Client) *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v1 integrations microsoft teams v2 channels ms channel Id messages message Id votes status params
func (o *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMessageID adds the messageID to the get v1 integrations microsoft teams v2 channels ms channel Id messages message Id votes status params
func (o *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams) WithMessageID(messageID string) *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams {
	o.SetMessageID(messageID)
	return o
}

// SetMessageID adds the messageId to the get v1 integrations microsoft teams v2 channels ms channel Id messages message Id votes status params
func (o *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams) SetMessageID(messageID string) {
	o.MessageID = messageID
}

// WithMsChannelID adds the msChannelID to the get v1 integrations microsoft teams v2 channels ms channel Id messages message Id votes status params
func (o *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams) WithMsChannelID(msChannelID string) *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams {
	o.SetMsChannelID(msChannelID)
	return o
}

// SetMsChannelID adds the msChannelId to the get v1 integrations microsoft teams v2 channels ms channel Id messages message Id votes status params
func (o *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams) SetMsChannelID(msChannelID string) {
	o.MsChannelID = msChannelID
}

// WriteToRequest writes these params to a swagger request
func (o *GetV1IntegrationsMicrosoftTeamsV2ChannelsMsChannelIDMessagesMessageIDVotesStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param message_id
	if err := r.SetPathParam("message_id", o.MessageID); err != nil {
		return err
	}

	// path param ms_channel_id
	if err := r.SetPathParam("ms_channel_id", o.MsChannelID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
