// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetZendeskCustomerSupportIssueParams creates a new GetZendeskCustomerSupportIssueParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetZendeskCustomerSupportIssueParams() *GetZendeskCustomerSupportIssueParams {
	return &GetZendeskCustomerSupportIssueParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetZendeskCustomerSupportIssueParamsWithTimeout creates a new GetZendeskCustomerSupportIssueParams object
// with the ability to set a timeout on a request.
func NewGetZendeskCustomerSupportIssueParamsWithTimeout(timeout time.Duration) *GetZendeskCustomerSupportIssueParams {
	return &GetZendeskCustomerSupportIssueParams{
		timeout: timeout,
	}
}

// NewGetZendeskCustomerSupportIssueParamsWithContext creates a new GetZendeskCustomerSupportIssueParams object
// with the ability to set a context for a request.
func NewGetZendeskCustomerSupportIssueParamsWithContext(ctx context.Context) *GetZendeskCustomerSupportIssueParams {
	return &GetZendeskCustomerSupportIssueParams{
		Context: ctx,
	}
}

// NewGetZendeskCustomerSupportIssueParamsWithHTTPClient creates a new GetZendeskCustomerSupportIssueParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetZendeskCustomerSupportIssueParamsWithHTTPClient(client *http.Client) *GetZendeskCustomerSupportIssueParams {
	return &GetZendeskCustomerSupportIssueParams{
		HTTPClient: client,
	}
}

/*
GetZendeskCustomerSupportIssueParams contains all the parameters to send to the API endpoint

	for the get zendesk customer support issue operation.

	Typically these are written to a http.Request.
*/
type GetZendeskCustomerSupportIssueParams struct {

	/* Include.

	   Use to include attached_incidents
	*/
	Include *string

	/* TicketID.

	   Zendesk ticket ID
	*/
	TicketID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get zendesk customer support issue params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetZendeskCustomerSupportIssueParams) WithDefaults() *GetZendeskCustomerSupportIssueParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get zendesk customer support issue params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetZendeskCustomerSupportIssueParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get zendesk customer support issue params
func (o *GetZendeskCustomerSupportIssueParams) WithTimeout(timeout time.Duration) *GetZendeskCustomerSupportIssueParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get zendesk customer support issue params
func (o *GetZendeskCustomerSupportIssueParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get zendesk customer support issue params
func (o *GetZendeskCustomerSupportIssueParams) WithContext(ctx context.Context) *GetZendeskCustomerSupportIssueParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get zendesk customer support issue params
func (o *GetZendeskCustomerSupportIssueParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get zendesk customer support issue params
func (o *GetZendeskCustomerSupportIssueParams) WithHTTPClient(client *http.Client) *GetZendeskCustomerSupportIssueParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get zendesk customer support issue params
func (o *GetZendeskCustomerSupportIssueParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInclude adds the include to the get zendesk customer support issue params
func (o *GetZendeskCustomerSupportIssueParams) WithInclude(include *string) *GetZendeskCustomerSupportIssueParams {
	o.SetInclude(include)
	return o
}

// SetInclude adds the include to the get zendesk customer support issue params
func (o *GetZendeskCustomerSupportIssueParams) SetInclude(include *string) {
	o.Include = include
}

// WithTicketID adds the ticketID to the get zendesk customer support issue params
func (o *GetZendeskCustomerSupportIssueParams) WithTicketID(ticketID string) *GetZendeskCustomerSupportIssueParams {
	o.SetTicketID(ticketID)
	return o
}

// SetTicketID adds the ticketId to the get zendesk customer support issue params
func (o *GetZendeskCustomerSupportIssueParams) SetTicketID(ticketID string) {
	o.TicketID = ticketID
}

// WriteToRequest writes these params to a swagger request
func (o *GetZendeskCustomerSupportIssueParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Include != nil {

		// query param include
		var qrInclude string

		if o.Include != nil {
			qrInclude = *o.Include
		}
		qInclude := qrInclude
		if qInclude != "" {

			if err := r.SetQueryParam("include", qInclude); err != nil {
				return err
			}
		}
	}

	// query param ticket_id
	qrTicketID := o.TicketID
	qTicketID := qrTicketID
	if qTicketID != "" {

		if err := r.SetQueryParam("ticket_id", qTicketID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
