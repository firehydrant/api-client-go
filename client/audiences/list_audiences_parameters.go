// Code generated by go-swagger; DO NOT EDIT.

package audiences

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListAudiencesParams creates a new ListAudiencesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListAudiencesParams() *ListAudiencesParams {
	return &ListAudiencesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListAudiencesParamsWithTimeout creates a new ListAudiencesParams object
// with the ability to set a timeout on a request.
func NewListAudiencesParamsWithTimeout(timeout time.Duration) *ListAudiencesParams {
	return &ListAudiencesParams{
		timeout: timeout,
	}
}

// NewListAudiencesParamsWithContext creates a new ListAudiencesParams object
// with the ability to set a context for a request.
func NewListAudiencesParamsWithContext(ctx context.Context) *ListAudiencesParams {
	return &ListAudiencesParams{
		Context: ctx,
	}
}

// NewListAudiencesParamsWithHTTPClient creates a new ListAudiencesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListAudiencesParamsWithHTTPClient(client *http.Client) *ListAudiencesParams {
	return &ListAudiencesParams{
		HTTPClient: client,
	}
}

/*
ListAudiencesParams contains all the parameters to send to the API endpoint

	for the list audiences operation.

	Typically these are written to a http.Request.
*/
type ListAudiencesParams struct {

	/* IncludeArchived.

	   Include archived (discarded) audiences
	*/
	IncludeArchived *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list audiences params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListAudiencesParams) WithDefaults() *ListAudiencesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list audiences params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListAudiencesParams) SetDefaults() {
	var (
		includeArchivedDefault = bool(false)
	)

	val := ListAudiencesParams{
		IncludeArchived: &includeArchivedDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list audiences params
func (o *ListAudiencesParams) WithTimeout(timeout time.Duration) *ListAudiencesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list audiences params
func (o *ListAudiencesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list audiences params
func (o *ListAudiencesParams) WithContext(ctx context.Context) *ListAudiencesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list audiences params
func (o *ListAudiencesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list audiences params
func (o *ListAudiencesParams) WithHTTPClient(client *http.Client) *ListAudiencesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list audiences params
func (o *ListAudiencesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeArchived adds the includeArchived to the list audiences params
func (o *ListAudiencesParams) WithIncludeArchived(includeArchived *bool) *ListAudiencesParams {
	o.SetIncludeArchived(includeArchived)
	return o
}

// SetIncludeArchived adds the includeArchived to the list audiences params
func (o *ListAudiencesParams) SetIncludeArchived(includeArchived *bool) {
	o.IncludeArchived = includeArchived
}

// WriteToRequest writes these params to a swagger request
func (o *ListAudiencesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeArchived != nil {

		// query param include_archived
		var qrIncludeArchived bool

		if o.IncludeArchived != nil {
			qrIncludeArchived = *o.IncludeArchived
		}
		qIncludeArchived := swag.FormatBool(qrIncludeArchived)
		if qIncludeArchived != "" {

			if err := r.SetQueryParam("include_archived", qIncludeArchived); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
