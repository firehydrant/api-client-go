// Code generated by go-swagger; DO NOT EDIT.

package audiences

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPostV1AudiencesAudienceIDDetailsParams creates a new PostV1AudiencesAudienceIDDetailsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostV1AudiencesAudienceIDDetailsParams() *PostV1AudiencesAudienceIDDetailsParams {
	return &PostV1AudiencesAudienceIDDetailsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostV1AudiencesAudienceIDDetailsParamsWithTimeout creates a new PostV1AudiencesAudienceIDDetailsParams object
// with the ability to set a timeout on a request.
func NewPostV1AudiencesAudienceIDDetailsParamsWithTimeout(timeout time.Duration) *PostV1AudiencesAudienceIDDetailsParams {
	return &PostV1AudiencesAudienceIDDetailsParams{
		timeout: timeout,
	}
}

// NewPostV1AudiencesAudienceIDDetailsParamsWithContext creates a new PostV1AudiencesAudienceIDDetailsParams object
// with the ability to set a context for a request.
func NewPostV1AudiencesAudienceIDDetailsParamsWithContext(ctx context.Context) *PostV1AudiencesAudienceIDDetailsParams {
	return &PostV1AudiencesAudienceIDDetailsParams{
		Context: ctx,
	}
}

// NewPostV1AudiencesAudienceIDDetailsParamsWithHTTPClient creates a new PostV1AudiencesAudienceIDDetailsParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostV1AudiencesAudienceIDDetailsParamsWithHTTPClient(client *http.Client) *PostV1AudiencesAudienceIDDetailsParams {
	return &PostV1AudiencesAudienceIDDetailsParams{
		HTTPClient: client,
	}
}

/*
PostV1AudiencesAudienceIDDetailsParams contains all the parameters to send to the API endpoint

	for the post v1 audiences audience Id details operation.

	Typically these are written to a http.Request.
*/
type PostV1AudiencesAudienceIDDetailsParams struct {

	/* AudienceID.

	   Unique identifier of the audience
	*/
	AudienceID string

	/* Position.

	   Position of the question in the list (1-based indexing). If not provided, appends to the end

	   Format: int32
	*/
	Position *int32

	/* Question.

	   The incident detail question to be added to the audience (max 255 characters)
	*/
	Question string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post v1 audiences audience Id details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostV1AudiencesAudienceIDDetailsParams) WithDefaults() *PostV1AudiencesAudienceIDDetailsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post v1 audiences audience Id details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostV1AudiencesAudienceIDDetailsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post v1 audiences audience Id details params
func (o *PostV1AudiencesAudienceIDDetailsParams) WithTimeout(timeout time.Duration) *PostV1AudiencesAudienceIDDetailsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post v1 audiences audience Id details params
func (o *PostV1AudiencesAudienceIDDetailsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post v1 audiences audience Id details params
func (o *PostV1AudiencesAudienceIDDetailsParams) WithContext(ctx context.Context) *PostV1AudiencesAudienceIDDetailsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post v1 audiences audience Id details params
func (o *PostV1AudiencesAudienceIDDetailsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post v1 audiences audience Id details params
func (o *PostV1AudiencesAudienceIDDetailsParams) WithHTTPClient(client *http.Client) *PostV1AudiencesAudienceIDDetailsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post v1 audiences audience Id details params
func (o *PostV1AudiencesAudienceIDDetailsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAudienceID adds the audienceID to the post v1 audiences audience Id details params
func (o *PostV1AudiencesAudienceIDDetailsParams) WithAudienceID(audienceID string) *PostV1AudiencesAudienceIDDetailsParams {
	o.SetAudienceID(audienceID)
	return o
}

// SetAudienceID adds the audienceId to the post v1 audiences audience Id details params
func (o *PostV1AudiencesAudienceIDDetailsParams) SetAudienceID(audienceID string) {
	o.AudienceID = audienceID
}

// WithPosition adds the position to the post v1 audiences audience Id details params
func (o *PostV1AudiencesAudienceIDDetailsParams) WithPosition(position *int32) *PostV1AudiencesAudienceIDDetailsParams {
	o.SetPosition(position)
	return o
}

// SetPosition adds the position to the post v1 audiences audience Id details params
func (o *PostV1AudiencesAudienceIDDetailsParams) SetPosition(position *int32) {
	o.Position = position
}

// WithQuestion adds the question to the post v1 audiences audience Id details params
func (o *PostV1AudiencesAudienceIDDetailsParams) WithQuestion(question string) *PostV1AudiencesAudienceIDDetailsParams {
	o.SetQuestion(question)
	return o
}

// SetQuestion adds the question to the post v1 audiences audience Id details params
func (o *PostV1AudiencesAudienceIDDetailsParams) SetQuestion(question string) {
	o.Question = question
}

// WriteToRequest writes these params to a swagger request
func (o *PostV1AudiencesAudienceIDDetailsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param audience_id
	if err := r.SetPathParam("audience_id", o.AudienceID); err != nil {
		return err
	}

	if o.Position != nil {

		// form param position
		var frPosition int32
		if o.Position != nil {
			frPosition = *o.Position
		}
		fPosition := swag.FormatInt32(frPosition)
		if fPosition != "" {
			if err := r.SetFormParam("position", fPosition); err != nil {
				return err
			}
		}
	}

	// form param question
	frQuestion := o.Question
	fQuestion := frQuestion
	if fQuestion != "" {
		if err := r.SetFormParam("question", fQuestion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
