// Code generated by go-swagger; DO NOT EDIT.

package audiences

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new audiences API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for audiences API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ArchiveAudience(params *ArchiveAudienceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ArchiveAudienceOK, error)

	CreateAudience(params *CreateAudienceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAudienceCreated, error)

	GenerateAudienceSummary(params *GenerateAudienceSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateAudienceSummaryCreated, error)

	GetAudience(params *GetAudienceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAudienceOK, error)

	GetAudienceSummary(params *GetAudienceSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAudienceSummaryOK, error)

	GetMemberDefaultAudience(params *GetMemberDefaultAudienceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMemberDefaultAudienceOK, error)

	ListAudienceSummaries(params *ListAudienceSummariesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAudienceSummariesOK, error)

	ListAudiences(params *ListAudiencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAudiencesOK, error)

	RestoreAudience(params *RestoreAudienceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreAudienceOK, error)

	SetMemberDefaultAudience(params *SetMemberDefaultAudienceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetMemberDefaultAudienceOK, error)

	UpdateAudience(params *UpdateAudienceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAudienceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ArchiveAudience archives audience

Archive an audience
*/
func (a *Client) ArchiveAudience(params *ArchiveAudienceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ArchiveAudienceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveAudienceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "archive_audience",
		Method:             "DELETE",
		PathPattern:        "/v1/audiences/{audience_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ArchiveAudienceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArchiveAudienceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for archive_audience: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAudience creates audience

Create a new audience
*/
func (a *Client) CreateAudience(params *CreateAudienceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAudienceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAudienceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_audience",
		Method:             "POST",
		PathPattern:        "/v1/audiences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAudienceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAudienceCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_audience: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GenerateAudienceSummary generates summary

Generate a new audience-specific summary for an incident
*/
func (a *Client) GenerateAudienceSummary(params *GenerateAudienceSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateAudienceSummaryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateAudienceSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generate_audience_summary",
		Method:             "POST",
		PathPattern:        "/v1/audiences/{audience_id}/summaries/{incident_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateAudienceSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateAudienceSummaryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generate_audience_summary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAudience gets audience

Get audience details
*/
func (a *Client) GetAudience(params *GetAudienceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAudienceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAudienceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_audience",
		Method:             "GET",
		PathPattern:        "/v1/audiences/{audience_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAudienceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAudienceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_audience: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAudienceSummary gets latest summary

Get the latest audience-specific summary for an incident
*/
func (a *Client) GetAudienceSummary(params *GetAudienceSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAudienceSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAudienceSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_audience_summary",
		Method:             "GET",
		PathPattern:        "/v1/audiences/{audience_id}/summaries/{incident_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAudienceSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAudienceSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_audience_summary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemberDefaultAudience gets default audience

Get member's default audience
*/
func (a *Client) GetMemberDefaultAudience(params *GetMemberDefaultAudienceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMemberDefaultAudienceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberDefaultAudienceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_member_default_audience",
		Method:             "GET",
		PathPattern:        "/v1/audiences/member/{member_id}/default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMemberDefaultAudienceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberDefaultAudienceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_member_default_audience: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAudienceSummaries lists audience summaries

List all audience summaries for an incident
*/
func (a *Client) ListAudienceSummaries(params *ListAudienceSummariesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAudienceSummariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAudienceSummariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_audience_summaries",
		Method:             "GET",
		PathPattern:        "/v1/audiences/summaries/{incident_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAudienceSummariesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAudienceSummariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_audience_summaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAudiences lists audiences

List all audiences
*/
func (a *Client) ListAudiences(params *ListAudiencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAudiencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAudiencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_audiences",
		Method:             "GET",
		PathPattern:        "/v1/audiences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAudiencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAudiencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_audiences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RestoreAudience restores audience

Restore a previously archived audience
*/
func (a *Client) RestoreAudience(params *RestoreAudienceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreAudienceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreAudienceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "restore_audience",
		Method:             "PATCH",
		PathPattern:        "/v1/audiences/{audience_id}/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestoreAudienceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoreAudienceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restore_audience: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetMemberDefaultAudience sets default audience

Set member's default audience
*/
func (a *Client) SetMemberDefaultAudience(params *SetMemberDefaultAudienceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetMemberDefaultAudienceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetMemberDefaultAudienceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set_member_default_audience",
		Method:             "PUT",
		PathPattern:        "/v1/audiences/member/{member_id}/default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetMemberDefaultAudienceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetMemberDefaultAudienceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set_member_default_audience: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAudience updates audience

Update an existing audience
*/
func (a *Client) UpdateAudience(params *UpdateAudienceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAudienceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAudienceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_audience",
		Method:             "PATCH",
		PathPattern:        "/v1/audiences/{audience_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAudienceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAudienceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_audience: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
