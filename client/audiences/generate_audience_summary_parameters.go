// Code generated by go-swagger; DO NOT EDIT.

package audiences

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGenerateAudienceSummaryParams creates a new GenerateAudienceSummaryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGenerateAudienceSummaryParams() *GenerateAudienceSummaryParams {
	return &GenerateAudienceSummaryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGenerateAudienceSummaryParamsWithTimeout creates a new GenerateAudienceSummaryParams object
// with the ability to set a timeout on a request.
func NewGenerateAudienceSummaryParamsWithTimeout(timeout time.Duration) *GenerateAudienceSummaryParams {
	return &GenerateAudienceSummaryParams{
		timeout: timeout,
	}
}

// NewGenerateAudienceSummaryParamsWithContext creates a new GenerateAudienceSummaryParams object
// with the ability to set a context for a request.
func NewGenerateAudienceSummaryParamsWithContext(ctx context.Context) *GenerateAudienceSummaryParams {
	return &GenerateAudienceSummaryParams{
		Context: ctx,
	}
}

// NewGenerateAudienceSummaryParamsWithHTTPClient creates a new GenerateAudienceSummaryParams object
// with the ability to set a custom HTTPClient for a request.
func NewGenerateAudienceSummaryParamsWithHTTPClient(client *http.Client) *GenerateAudienceSummaryParams {
	return &GenerateAudienceSummaryParams{
		HTTPClient: client,
	}
}

/*
GenerateAudienceSummaryParams contains all the parameters to send to the API endpoint

	for the generate audience summary operation.

	Typically these are written to a http.Request.
*/
type GenerateAudienceSummaryParams struct {

	/* AudienceID.

	   Unique identifier of the audience
	*/
	AudienceID string

	/* ForceRegenerate.

	   Whether to force regeneration of the summary

	   Default: true
	*/
	ForceRegenerate *bool

	/* IncidentID.

	   Unique identifier of the incident to summarize
	*/
	IncidentID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the generate audience summary params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GenerateAudienceSummaryParams) WithDefaults() *GenerateAudienceSummaryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the generate audience summary params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GenerateAudienceSummaryParams) SetDefaults() {
	var (
		forceRegenerateDefault = bool(true)
	)

	val := GenerateAudienceSummaryParams{
		ForceRegenerate: &forceRegenerateDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the generate audience summary params
func (o *GenerateAudienceSummaryParams) WithTimeout(timeout time.Duration) *GenerateAudienceSummaryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the generate audience summary params
func (o *GenerateAudienceSummaryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the generate audience summary params
func (o *GenerateAudienceSummaryParams) WithContext(ctx context.Context) *GenerateAudienceSummaryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the generate audience summary params
func (o *GenerateAudienceSummaryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the generate audience summary params
func (o *GenerateAudienceSummaryParams) WithHTTPClient(client *http.Client) *GenerateAudienceSummaryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the generate audience summary params
func (o *GenerateAudienceSummaryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAudienceID adds the audienceID to the generate audience summary params
func (o *GenerateAudienceSummaryParams) WithAudienceID(audienceID string) *GenerateAudienceSummaryParams {
	o.SetAudienceID(audienceID)
	return o
}

// SetAudienceID adds the audienceId to the generate audience summary params
func (o *GenerateAudienceSummaryParams) SetAudienceID(audienceID string) {
	o.AudienceID = audienceID
}

// WithForceRegenerate adds the forceRegenerate to the generate audience summary params
func (o *GenerateAudienceSummaryParams) WithForceRegenerate(forceRegenerate *bool) *GenerateAudienceSummaryParams {
	o.SetForceRegenerate(forceRegenerate)
	return o
}

// SetForceRegenerate adds the forceRegenerate to the generate audience summary params
func (o *GenerateAudienceSummaryParams) SetForceRegenerate(forceRegenerate *bool) {
	o.ForceRegenerate = forceRegenerate
}

// WithIncidentID adds the incidentID to the generate audience summary params
func (o *GenerateAudienceSummaryParams) WithIncidentID(incidentID string) *GenerateAudienceSummaryParams {
	o.SetIncidentID(incidentID)
	return o
}

// SetIncidentID adds the incidentId to the generate audience summary params
func (o *GenerateAudienceSummaryParams) SetIncidentID(incidentID string) {
	o.IncidentID = incidentID
}

// WriteToRequest writes these params to a swagger request
func (o *GenerateAudienceSummaryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param audience_id
	if err := r.SetPathParam("audience_id", o.AudienceID); err != nil {
		return err
	}

	if o.ForceRegenerate != nil {

		// form param force_regenerate
		var frForceRegenerate bool
		if o.ForceRegenerate != nil {
			frForceRegenerate = *o.ForceRegenerate
		}
		fForceRegenerate := swag.FormatBool(frForceRegenerate)
		if fForceRegenerate != "" {
			if err := r.SetFormParam("force_regenerate", fForceRegenerate); err != nil {
				return err
			}
		}
	}

	// path param incident_id
	if err := r.SetPathParam("incident_id", o.IncidentID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
