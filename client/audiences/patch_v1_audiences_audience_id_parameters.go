// Code generated by go-swagger; DO NOT EDIT.

package audiences

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPatchV1AudiencesAudienceIDParams creates a new PatchV1AudiencesAudienceIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchV1AudiencesAudienceIDParams() *PatchV1AudiencesAudienceIDParams {
	return &PatchV1AudiencesAudienceIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchV1AudiencesAudienceIDParamsWithTimeout creates a new PatchV1AudiencesAudienceIDParams object
// with the ability to set a timeout on a request.
func NewPatchV1AudiencesAudienceIDParamsWithTimeout(timeout time.Duration) *PatchV1AudiencesAudienceIDParams {
	return &PatchV1AudiencesAudienceIDParams{
		timeout: timeout,
	}
}

// NewPatchV1AudiencesAudienceIDParamsWithContext creates a new PatchV1AudiencesAudienceIDParams object
// with the ability to set a context for a request.
func NewPatchV1AudiencesAudienceIDParamsWithContext(ctx context.Context) *PatchV1AudiencesAudienceIDParams {
	return &PatchV1AudiencesAudienceIDParams{
		Context: ctx,
	}
}

// NewPatchV1AudiencesAudienceIDParamsWithHTTPClient creates a new PatchV1AudiencesAudienceIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchV1AudiencesAudienceIDParamsWithHTTPClient(client *http.Client) *PatchV1AudiencesAudienceIDParams {
	return &PatchV1AudiencesAudienceIDParams{
		HTTPClient: client,
	}
}

/*
PatchV1AudiencesAudienceIDParams contains all the parameters to send to the API endpoint

	for the patch v1 audiences audience Id operation.

	Typically these are written to a http.Request.
*/
type PatchV1AudiencesAudienceIDParams struct {

	/* Active.

	   Whether the audience is active or discarded
	*/
	Active *bool

	/* AudienceID.

	   Unique identifier of the audience
	*/
	AudienceID string

	/* Default.

	   Whether this is the default audience
	*/
	Default *bool

	/* Description.

	   Description of the audience (max 4000 characters)
	*/
	Description *string

	/* DetailsPosition.

	   Position of the question in the list (1-based indexing)
	*/
	DetailsPosition []int32

	/* DetailsPrompt.

	   The prompt to display when collecting this detail
	*/
	DetailsPrompt []string

	/* DetailsQuestion.

	   The incident detail question (max 255 characters)
	*/
	DetailsQuestion []string

	/* DetailsSlug.

	   Optional unique identifier for this detail
	*/
	DetailsSlug []string

	/* Name.

	   Name of the audience (max 255 characters)
	*/
	Name *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch v1 audiences audience Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchV1AudiencesAudienceIDParams) WithDefaults() *PatchV1AudiencesAudienceIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch v1 audiences audience Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchV1AudiencesAudienceIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) WithTimeout(timeout time.Duration) *PatchV1AudiencesAudienceIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) WithContext(ctx context.Context) *PatchV1AudiencesAudienceIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) WithHTTPClient(client *http.Client) *PatchV1AudiencesAudienceIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActive adds the active to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) WithActive(active *bool) *PatchV1AudiencesAudienceIDParams {
	o.SetActive(active)
	return o
}

// SetActive adds the active to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) SetActive(active *bool) {
	o.Active = active
}

// WithAudienceID adds the audienceID to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) WithAudienceID(audienceID string) *PatchV1AudiencesAudienceIDParams {
	o.SetAudienceID(audienceID)
	return o
}

// SetAudienceID adds the audienceId to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) SetAudienceID(audienceID string) {
	o.AudienceID = audienceID
}

// WithDefault adds the defaultVar to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) WithDefault(defaultVar *bool) *PatchV1AudiencesAudienceIDParams {
	o.SetDefault(defaultVar)
	return o
}

// SetDefault adds the default to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) SetDefault(defaultVar *bool) {
	o.Default = defaultVar
}

// WithDescription adds the description to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) WithDescription(description *string) *PatchV1AudiencesAudienceIDParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) SetDescription(description *string) {
	o.Description = description
}

// WithDetailsPosition adds the detailsPosition to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) WithDetailsPosition(detailsPosition []int32) *PatchV1AudiencesAudienceIDParams {
	o.SetDetailsPosition(detailsPosition)
	return o
}

// SetDetailsPosition adds the detailsPosition to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) SetDetailsPosition(detailsPosition []int32) {
	o.DetailsPosition = detailsPosition
}

// WithDetailsPrompt adds the detailsPrompt to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) WithDetailsPrompt(detailsPrompt []string) *PatchV1AudiencesAudienceIDParams {
	o.SetDetailsPrompt(detailsPrompt)
	return o
}

// SetDetailsPrompt adds the detailsPrompt to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) SetDetailsPrompt(detailsPrompt []string) {
	o.DetailsPrompt = detailsPrompt
}

// WithDetailsQuestion adds the detailsQuestion to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) WithDetailsQuestion(detailsQuestion []string) *PatchV1AudiencesAudienceIDParams {
	o.SetDetailsQuestion(detailsQuestion)
	return o
}

// SetDetailsQuestion adds the detailsQuestion to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) SetDetailsQuestion(detailsQuestion []string) {
	o.DetailsQuestion = detailsQuestion
}

// WithDetailsSlug adds the detailsSlug to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) WithDetailsSlug(detailsSlug []string) *PatchV1AudiencesAudienceIDParams {
	o.SetDetailsSlug(detailsSlug)
	return o
}

// SetDetailsSlug adds the detailsSlug to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) SetDetailsSlug(detailsSlug []string) {
	o.DetailsSlug = detailsSlug
}

// WithName adds the name to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) WithName(name *string) *PatchV1AudiencesAudienceIDParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the patch v1 audiences audience Id params
func (o *PatchV1AudiencesAudienceIDParams) SetName(name *string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *PatchV1AudiencesAudienceIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Active != nil {

		// form param active
		var frActive bool
		if o.Active != nil {
			frActive = *o.Active
		}
		fActive := swag.FormatBool(frActive)
		if fActive != "" {
			if err := r.SetFormParam("active", fActive); err != nil {
				return err
			}
		}
	}

	// path param audience_id
	if err := r.SetPathParam("audience_id", o.AudienceID); err != nil {
		return err
	}

	if o.Default != nil {

		// form param default
		var frDefault bool
		if o.Default != nil {
			frDefault = *o.Default
		}
		fDefault := swag.FormatBool(frDefault)
		if fDefault != "" {
			if err := r.SetFormParam("default", fDefault); err != nil {
				return err
			}
		}
	}

	if o.Description != nil {

		// form param description
		var frDescription string
		if o.Description != nil {
			frDescription = *o.Description
		}
		fDescription := frDescription
		if fDescription != "" {
			if err := r.SetFormParam("description", fDescription); err != nil {
				return err
			}
		}
	}

	if o.DetailsPosition != nil {

		// binding items for details[position]
		joinedDetailsPosition := o.bindParamDetailsPosition(reg)

		// form array param details[position]
		if err := r.SetFormParam("details[position]", joinedDetailsPosition...); err != nil {
			return err
		}
	}

	if o.DetailsPrompt != nil {

		// binding items for details[prompt]
		joinedDetailsPrompt := o.bindParamDetailsPrompt(reg)

		// form array param details[prompt]
		if err := r.SetFormParam("details[prompt]", joinedDetailsPrompt...); err != nil {
			return err
		}
	}

	if o.DetailsQuestion != nil {

		// binding items for details[question]
		joinedDetailsQuestion := o.bindParamDetailsQuestion(reg)

		// form array param details[question]
		if err := r.SetFormParam("details[question]", joinedDetailsQuestion...); err != nil {
			return err
		}
	}

	if o.DetailsSlug != nil {

		// binding items for details[slug]
		joinedDetailsSlug := o.bindParamDetailsSlug(reg)

		// form array param details[slug]
		if err := r.SetFormParam("details[slug]", joinedDetailsSlug...); err != nil {
			return err
		}
	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamPatchV1AudiencesAudienceID binds the parameter details[position]
func (o *PatchV1AudiencesAudienceIDParams) bindParamDetailsPosition(formats strfmt.Registry) []string {
	detailsPositionIR := o.DetailsPosition

	var detailsPositionIC []string
	for _, detailsPositionIIR := range detailsPositionIR { // explode []int32

		detailsPositionIIV := swag.FormatInt32(detailsPositionIIR) // int32 as string
		detailsPositionIC = append(detailsPositionIC, detailsPositionIIV)
	}

	// items.CollectionFormat: ""
	detailsPositionIS := swag.JoinByFormat(detailsPositionIC, "")

	return detailsPositionIS
}

// bindParamPatchV1AudiencesAudienceID binds the parameter details[prompt]
func (o *PatchV1AudiencesAudienceIDParams) bindParamDetailsPrompt(formats strfmt.Registry) []string {
	detailsPromptIR := o.DetailsPrompt

	var detailsPromptIC []string
	for _, detailsPromptIIR := range detailsPromptIR { // explode []string

		detailsPromptIIV := detailsPromptIIR // string as string
		detailsPromptIC = append(detailsPromptIC, detailsPromptIIV)
	}

	// items.CollectionFormat: ""
	detailsPromptIS := swag.JoinByFormat(detailsPromptIC, "")

	return detailsPromptIS
}

// bindParamPatchV1AudiencesAudienceID binds the parameter details[question]
func (o *PatchV1AudiencesAudienceIDParams) bindParamDetailsQuestion(formats strfmt.Registry) []string {
	detailsQuestionIR := o.DetailsQuestion

	var detailsQuestionIC []string
	for _, detailsQuestionIIR := range detailsQuestionIR { // explode []string

		detailsQuestionIIV := detailsQuestionIIR // string as string
		detailsQuestionIC = append(detailsQuestionIC, detailsQuestionIIV)
	}

	// items.CollectionFormat: ""
	detailsQuestionIS := swag.JoinByFormat(detailsQuestionIC, "")

	return detailsQuestionIS
}

// bindParamPatchV1AudiencesAudienceID binds the parameter details[slug]
func (o *PatchV1AudiencesAudienceIDParams) bindParamDetailsSlug(formats strfmt.Registry) []string {
	detailsSlugIR := o.DetailsSlug

	var detailsSlugIC []string
	for _, detailsSlugIIR := range detailsSlugIR { // explode []string

		detailsSlugIIV := detailsSlugIIR // string as string
		detailsSlugIC = append(detailsSlugIC, detailsSlugIIV)
	}

	// items.CollectionFormat: ""
	detailsSlugIS := swag.JoinByFormat(detailsSlugIC, "")

	return detailsSlugIS
}
