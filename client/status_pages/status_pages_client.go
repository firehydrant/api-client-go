// Code generated by go-swagger; DO NOT EDIT.

package status_pages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new status pages API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for status pages API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1IncidentsIncidentIDStatusPagesStatusPageID(params *DeleteV1IncidentsIncidentIDStatusPagesStatusPageIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1IncidentsIncidentIDStatusPagesStatusPageIDNoContent, error)

	DeleteV1NuncConnectionsNuncConnectionID(params *DeleteV1NuncConnectionsNuncConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1NuncConnectionsNuncConnectionIDOK, error)

	DeleteV1NuncConnectionsNuncConnectionIDComponentGroupsGroupID(params *DeleteV1NuncConnectionsNuncConnectionIDComponentGroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1NuncConnectionsNuncConnectionIDComponentGroupsGroupIDNoContent, error)

	DeleteV1NuncConnectionsNuncConnectionIDImagesType(params *DeleteV1NuncConnectionsNuncConnectionIDImagesTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1NuncConnectionsNuncConnectionIDImagesTypeOK, error)

	DeleteV1NuncConnectionsNuncConnectionIDLinksLinkID(params *DeleteV1NuncConnectionsNuncConnectionIDLinksLinkIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1NuncConnectionsNuncConnectionIDLinksLinkIDNoContent, error)

	DeleteV1NuncConnectionsNuncConnectionIDSubscribers(params *DeleteV1NuncConnectionsNuncConnectionIDSubscribersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1NuncConnectionsNuncConnectionIDSubscribersOK, error)

	DeleteV1NuncSubscriptionsUnsubscribeToken(params *DeleteV1NuncSubscriptionsUnsubscribeTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1NuncSubscriptionsUnsubscribeTokenOK, error)

	GetV1NuncConnections(params *GetV1NuncConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1NuncConnectionsOK, error)

	GetV1NuncConnectionsNuncConnectionID(params *GetV1NuncConnectionsNuncConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1NuncConnectionsNuncConnectionIDOK, error)

	GetV1NuncConnectionsNuncConnectionIDSubscribers(params *GetV1NuncConnectionsNuncConnectionIDSubscribersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1NuncConnectionsNuncConnectionIDSubscribersOK, error)

	PatchV1NuncConnectionsNuncConnectionIDComponentGroupsGroupID(params *PatchV1NuncConnectionsNuncConnectionIDComponentGroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1NuncConnectionsNuncConnectionIDComponentGroupsGroupIDOK, error)

	PatchV1NuncConnectionsNuncConnectionIDLinksLinkID(params *PatchV1NuncConnectionsNuncConnectionIDLinksLinkIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1NuncConnectionsNuncConnectionIDLinksLinkIDOK, error)

	PostV1NuncConnections(params *PostV1NuncConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1NuncConnectionsCreated, error)

	PostV1NuncConnectionsNuncConnectionIDComponentGroups(params *PostV1NuncConnectionsNuncConnectionIDComponentGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1NuncConnectionsNuncConnectionIDComponentGroupsCreated, error)

	PostV1NuncConnectionsNuncConnectionIDLinks(params *PostV1NuncConnectionsNuncConnectionIDLinksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1NuncConnectionsNuncConnectionIDLinksCreated, error)

	PostV1NuncConnectionsNuncConnectionIDSubscribers(params *PostV1NuncConnectionsNuncConnectionIDSubscribersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1NuncConnectionsNuncConnectionIDSubscribersCreated, error)

	PostV1NuncSubscriptions(params *PostV1NuncSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1NuncSubscriptionsCreated, error)

	PutV1NuncConnectionsNuncConnectionID(params *PutV1NuncConnectionsNuncConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1NuncConnectionsNuncConnectionIDOK, error)

	PutV1NuncConnectionsNuncConnectionIDImagesType(params *PutV1NuncConnectionsNuncConnectionIDImagesTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1NuncConnectionsNuncConnectionIDImagesTypeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1IncidentsIncidentIDStatusPagesStatusPageID removes a status page from an incident

Remove a status page incident attached to an incident
*/
func (a *Client) DeleteV1IncidentsIncidentIDStatusPagesStatusPageID(params *DeleteV1IncidentsIncidentIDStatusPagesStatusPageIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1IncidentsIncidentIDStatusPagesStatusPageIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1IncidentsIncidentIDStatusPagesStatusPageIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1IncidentsIncidentIdStatusPagesStatusPageId",
		Method:             "DELETE",
		PathPattern:        "/v1/incidents/{incident_id}/status_pages/{status_page_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1IncidentsIncidentIDStatusPagesStatusPageIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1IncidentsIncidentIDStatusPagesStatusPageIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1IncidentsIncidentIdStatusPagesStatusPageId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1NuncConnectionsNuncConnectionID deletes a status page

Delete a FireHydrant hosted status page, stopping updates of your incidents to it.
*/
func (a *Client) DeleteV1NuncConnectionsNuncConnectionID(params *DeleteV1NuncConnectionsNuncConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1NuncConnectionsNuncConnectionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1NuncConnectionsNuncConnectionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1NuncConnectionsNuncConnectionId",
		Method:             "DELETE",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1NuncConnectionsNuncConnectionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1NuncConnectionsNuncConnectionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1NuncConnectionsNuncConnectionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1NuncConnectionsNuncConnectionIDComponentGroupsGroupID deletes a status page component group

Delete a component group displayed on a FireHydrant status page
*/
func (a *Client) DeleteV1NuncConnectionsNuncConnectionIDComponentGroupsGroupID(params *DeleteV1NuncConnectionsNuncConnectionIDComponentGroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1NuncConnectionsNuncConnectionIDComponentGroupsGroupIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1NuncConnectionsNuncConnectionIDComponentGroupsGroupIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1NuncConnectionsNuncConnectionIdComponentGroupsGroupId",
		Method:             "DELETE",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/component_groups/{group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1NuncConnectionsNuncConnectionIDComponentGroupsGroupIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1NuncConnectionsNuncConnectionIDComponentGroupsGroupIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1NuncConnectionsNuncConnectionIdComponentGroupsGroupId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1NuncConnectionsNuncConnectionIDImagesType deletes an image from a status page

Delete an image attached to a FireHydrant status page
*/
func (a *Client) DeleteV1NuncConnectionsNuncConnectionIDImagesType(params *DeleteV1NuncConnectionsNuncConnectionIDImagesTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1NuncConnectionsNuncConnectionIDImagesTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1NuncConnectionsNuncConnectionIDImagesTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1NuncConnectionsNuncConnectionIdImagesType",
		Method:             "DELETE",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/images/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1NuncConnectionsNuncConnectionIDImagesTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1NuncConnectionsNuncConnectionIDImagesTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1NuncConnectionsNuncConnectionIdImagesType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1NuncConnectionsNuncConnectionIDLinksLinkID deletes a status page link

Delete a link displayed on a FireHydrant status page
*/
func (a *Client) DeleteV1NuncConnectionsNuncConnectionIDLinksLinkID(params *DeleteV1NuncConnectionsNuncConnectionIDLinksLinkIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1NuncConnectionsNuncConnectionIDLinksLinkIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1NuncConnectionsNuncConnectionIDLinksLinkIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1NuncConnectionsNuncConnectionIdLinksLinkId",
		Method:             "DELETE",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/links/{link_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1NuncConnectionsNuncConnectionIDLinksLinkIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1NuncConnectionsNuncConnectionIDLinksLinkIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1NuncConnectionsNuncConnectionIdLinksLinkId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1NuncConnectionsNuncConnectionIDSubscribers removes subscribers from a status page

Unsubscribes one or more status page subscribers.
*/
func (a *Client) DeleteV1NuncConnectionsNuncConnectionIDSubscribers(params *DeleteV1NuncConnectionsNuncConnectionIDSubscribersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1NuncConnectionsNuncConnectionIDSubscribersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1NuncConnectionsNuncConnectionIDSubscribersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1NuncConnectionsNuncConnectionIdSubscribers",
		Method:             "DELETE",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/subscribers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1NuncConnectionsNuncConnectionIDSubscribersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1NuncConnectionsNuncConnectionIDSubscribersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1NuncConnectionsNuncConnectionIdSubscribers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1NuncSubscriptionsUnsubscribeToken unsubscribes from status page notifications

Unsubscribe from status page updates
*/
func (a *Client) DeleteV1NuncSubscriptionsUnsubscribeToken(params *DeleteV1NuncSubscriptionsUnsubscribeTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1NuncSubscriptionsUnsubscribeTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1NuncSubscriptionsUnsubscribeTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1NuncSubscriptionsUnsubscribeToken",
		Method:             "DELETE",
		PathPattern:        "/v1/nunc/subscriptions/{unsubscribe_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1NuncSubscriptionsUnsubscribeTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1NuncSubscriptionsUnsubscribeTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1NuncSubscriptionsUnsubscribeToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1NuncConnections lists status pages

Lists the information displayed as part of your FireHydrant hosted status pages.
*/
func (a *Client) GetV1NuncConnections(params *GetV1NuncConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1NuncConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1NuncConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1NuncConnections",
		Method:             "GET",
		PathPattern:        "/v1/nunc_connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1NuncConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1NuncConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1NuncConnections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1NuncConnectionsNuncConnectionID gets a status page

Retrieve the information displayed as part of your FireHydrant hosted status page.
*/
func (a *Client) GetV1NuncConnectionsNuncConnectionID(params *GetV1NuncConnectionsNuncConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1NuncConnectionsNuncConnectionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1NuncConnectionsNuncConnectionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1NuncConnectionsNuncConnectionId",
		Method:             "GET",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1NuncConnectionsNuncConnectionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1NuncConnectionsNuncConnectionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1NuncConnectionsNuncConnectionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1NuncConnectionsNuncConnectionIDSubscribers lists status page subscribers

Retrieves the list of subscribers for a status page.
*/
func (a *Client) GetV1NuncConnectionsNuncConnectionIDSubscribers(params *GetV1NuncConnectionsNuncConnectionIDSubscribersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1NuncConnectionsNuncConnectionIDSubscribersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1NuncConnectionsNuncConnectionIDSubscribersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1NuncConnectionsNuncConnectionIdSubscribers",
		Method:             "GET",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/subscribers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1NuncConnectionsNuncConnectionIDSubscribersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1NuncConnectionsNuncConnectionIDSubscribersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1NuncConnectionsNuncConnectionIdSubscribers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1NuncConnectionsNuncConnectionIDComponentGroupsGroupID updates a status page component group

Update a component group to be displayed on a FireHydrant status page
*/
func (a *Client) PatchV1NuncConnectionsNuncConnectionIDComponentGroupsGroupID(params *PatchV1NuncConnectionsNuncConnectionIDComponentGroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1NuncConnectionsNuncConnectionIDComponentGroupsGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1NuncConnectionsNuncConnectionIDComponentGroupsGroupIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1NuncConnectionsNuncConnectionIdComponentGroupsGroupId",
		Method:             "PATCH",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/component_groups/{group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1NuncConnectionsNuncConnectionIDComponentGroupsGroupIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1NuncConnectionsNuncConnectionIDComponentGroupsGroupIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1NuncConnectionsNuncConnectionIdComponentGroupsGroupId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1NuncConnectionsNuncConnectionIDLinksLinkID updates a status page link

Update a link to be displayed on a FireHydrant status page
*/
func (a *Client) PatchV1NuncConnectionsNuncConnectionIDLinksLinkID(params *PatchV1NuncConnectionsNuncConnectionIDLinksLinkIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1NuncConnectionsNuncConnectionIDLinksLinkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1NuncConnectionsNuncConnectionIDLinksLinkIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1NuncConnectionsNuncConnectionIdLinksLinkId",
		Method:             "PATCH",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/links/{link_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1NuncConnectionsNuncConnectionIDLinksLinkIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1NuncConnectionsNuncConnectionIDLinksLinkIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1NuncConnectionsNuncConnectionIdLinksLinkId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1NuncConnections creates a status page

Create a new FireHydrant hosted status page for customer facing statuses.
*/
func (a *Client) PostV1NuncConnections(params *PostV1NuncConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1NuncConnectionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1NuncConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1NuncConnections",
		Method:             "POST",
		PathPattern:        "/v1/nunc_connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1NuncConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1NuncConnectionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1NuncConnections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1NuncConnectionsNuncConnectionIDComponentGroups creates a component group for a status page

Add a component group to be displayed on a FireHydrant status page
*/
func (a *Client) PostV1NuncConnectionsNuncConnectionIDComponentGroups(params *PostV1NuncConnectionsNuncConnectionIDComponentGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1NuncConnectionsNuncConnectionIDComponentGroupsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1NuncConnectionsNuncConnectionIDComponentGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1NuncConnectionsNuncConnectionIdComponentGroups",
		Method:             "POST",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/component_groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1NuncConnectionsNuncConnectionIDComponentGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1NuncConnectionsNuncConnectionIDComponentGroupsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1NuncConnectionsNuncConnectionIdComponentGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1NuncConnectionsNuncConnectionIDLinks adds link to a status page

Add a link to be displayed on a FireHydrant status page
*/
func (a *Client) PostV1NuncConnectionsNuncConnectionIDLinks(params *PostV1NuncConnectionsNuncConnectionIDLinksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1NuncConnectionsNuncConnectionIDLinksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1NuncConnectionsNuncConnectionIDLinksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1NuncConnectionsNuncConnectionIdLinks",
		Method:             "POST",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1NuncConnectionsNuncConnectionIDLinksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1NuncConnectionsNuncConnectionIDLinksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1NuncConnectionsNuncConnectionIdLinks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1NuncConnectionsNuncConnectionIDSubscribers adds subscribers to a status page

Subscribes a comma-separated string of emails to status page updates
*/
func (a *Client) PostV1NuncConnectionsNuncConnectionIDSubscribers(params *PostV1NuncConnectionsNuncConnectionIDSubscribersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1NuncConnectionsNuncConnectionIDSubscribersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1NuncConnectionsNuncConnectionIDSubscribersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1NuncConnectionsNuncConnectionIdSubscribers",
		Method:             "POST",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/subscribers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1NuncConnectionsNuncConnectionIDSubscribersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1NuncConnectionsNuncConnectionIDSubscribersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1NuncConnectionsNuncConnectionIdSubscribers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1NuncSubscriptions creates a status page subscription

Subscribe to status page updates
*/
func (a *Client) PostV1NuncSubscriptions(params *PostV1NuncSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1NuncSubscriptionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1NuncSubscriptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1NuncSubscriptions",
		Method:             "POST",
		PathPattern:        "/v1/nunc/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1NuncSubscriptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1NuncSubscriptionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1NuncSubscriptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutV1NuncConnectionsNuncConnectionID updates a status page

Update your company's information and other components in the specified FireHydrant hosted status page.
*/
func (a *Client) PutV1NuncConnectionsNuncConnectionID(params *PutV1NuncConnectionsNuncConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1NuncConnectionsNuncConnectionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1NuncConnectionsNuncConnectionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putV1NuncConnectionsNuncConnectionId",
		Method:             "PUT",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1NuncConnectionsNuncConnectionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutV1NuncConnectionsNuncConnectionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putV1NuncConnectionsNuncConnectionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutV1NuncConnectionsNuncConnectionIDImagesType uploads an image for a status page

Add or replace an image attached to a FireHydrant status page
*/
func (a *Client) PutV1NuncConnectionsNuncConnectionIDImagesType(params *PutV1NuncConnectionsNuncConnectionIDImagesTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1NuncConnectionsNuncConnectionIDImagesTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1NuncConnectionsNuncConnectionIDImagesTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putV1NuncConnectionsNuncConnectionIdImagesType",
		Method:             "PUT",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/images/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1NuncConnectionsNuncConnectionIDImagesTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutV1NuncConnectionsNuncConnectionIDImagesTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putV1NuncConnectionsNuncConnectionIdImagesType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
