// Code generated by go-swagger; DO NOT EDIT.

package status_pages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new status pages API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for status pages API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEmailSubscriber(params *CreateEmailSubscriberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEmailSubscriberCreated, error)

	CreateNuncComponentGroup(params *CreateNuncComponentGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNuncComponentGroupCreated, error)

	CreateNuncConnection(params *CreateNuncConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNuncConnectionCreated, error)

	CreateNuncLink(params *CreateNuncLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNuncLinkCreated, error)

	CreateNuncSubscription(params *CreateNuncSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNuncSubscriptionCreated, error)

	DeleteEmailSubscriber(params *DeleteEmailSubscriberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEmailSubscriberOK, error)

	DeleteIncidentStatusPage(params *DeleteIncidentStatusPageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentStatusPageNoContent, error)

	DeleteNuncComponentGroup(params *DeleteNuncComponentGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNuncComponentGroupNoContent, error)

	DeleteNuncConnection(params *DeleteNuncConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNuncConnectionOK, error)

	DeleteNuncImage(params *DeleteNuncImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNuncImageOK, error)

	DeleteNuncLink(params *DeleteNuncLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNuncLinkNoContent, error)

	DeleteNuncSubscription(params *DeleteNuncSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNuncSubscriptionOK, error)

	GetNuncConnection(params *GetNuncConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNuncConnectionOK, error)

	ListEmailSubscribers(params *ListEmailSubscribersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEmailSubscribersOK, error)

	ListNuncConnections(params *ListNuncConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListNuncConnectionsOK, error)

	UpdateNuncComponentGroup(params *UpdateNuncComponentGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNuncComponentGroupOK, error)

	UpdateNuncConnection(params *UpdateNuncConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNuncConnectionOK, error)

	UpdateNuncImage(params *UpdateNuncImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNuncImageOK, error)

	UpdateNuncLink(params *UpdateNuncLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNuncLinkOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateEmailSubscriber adds subscribers to a status page

Subscribes a comma-separated string of emails to status page updates
*/
func (a *Client) CreateEmailSubscriber(params *CreateEmailSubscriberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEmailSubscriberCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEmailSubscriberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_email_subscriber",
		Method:             "POST",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/subscribers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEmailSubscriberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEmailSubscriberCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_email_subscriber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateNuncComponentGroup creates a component group for a status page

Add a component group to be displayed on a FireHydrant status page
*/
func (a *Client) CreateNuncComponentGroup(params *CreateNuncComponentGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNuncComponentGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNuncComponentGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_nunc_component_group",
		Method:             "POST",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/component_groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNuncComponentGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNuncComponentGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_nunc_component_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateNuncConnection creates a status page

Create a new FireHydrant hosted status page for customer facing statuses.
*/
func (a *Client) CreateNuncConnection(params *CreateNuncConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNuncConnectionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNuncConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_nunc_connection",
		Method:             "POST",
		PathPattern:        "/v1/nunc_connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNuncConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNuncConnectionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_nunc_connection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateNuncLink adds link to a status page

Add a link to be displayed on a FireHydrant status page
*/
func (a *Client) CreateNuncLink(params *CreateNuncLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNuncLinkCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNuncLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_nunc_link",
		Method:             "POST",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNuncLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNuncLinkCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_nunc_link: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateNuncSubscription creates a status page subscription

Subscribe to status page updates
*/
func (a *Client) CreateNuncSubscription(params *CreateNuncSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNuncSubscriptionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNuncSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_nunc_subscription",
		Method:             "POST",
		PathPattern:        "/v1/nunc/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNuncSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNuncSubscriptionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_nunc_subscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteEmailSubscriber removes subscribers from a status page

Unsubscribes one or more status page subscribers.
*/
func (a *Client) DeleteEmailSubscriber(params *DeleteEmailSubscriberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEmailSubscriberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEmailSubscriberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_email_subscriber",
		Method:             "DELETE",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/subscribers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEmailSubscriberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEmailSubscriberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_email_subscriber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIncidentStatusPage removes a status page from an incident

Remove a status page incident attached to an incident
*/
func (a *Client) DeleteIncidentStatusPage(params *DeleteIncidentStatusPageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentStatusPageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIncidentStatusPageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_incident_status_page",
		Method:             "DELETE",
		PathPattern:        "/v1/incidents/{incident_id}/status_pages/{status_page_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIncidentStatusPageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIncidentStatusPageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_incident_status_page: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteNuncComponentGroup deletes a status page component group

Delete a component group displayed on a FireHydrant status page
*/
func (a *Client) DeleteNuncComponentGroup(params *DeleteNuncComponentGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNuncComponentGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNuncComponentGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_nunc_component_group",
		Method:             "DELETE",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/component_groups/{group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNuncComponentGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNuncComponentGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_nunc_component_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteNuncConnection deletes a status page

Delete a FireHydrant hosted status page, stopping updates of your incidents to it.
*/
func (a *Client) DeleteNuncConnection(params *DeleteNuncConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNuncConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNuncConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_nunc_connection",
		Method:             "DELETE",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNuncConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNuncConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_nunc_connection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteNuncImage deletes an image from a status page

Delete an image attached to a FireHydrant status page
*/
func (a *Client) DeleteNuncImage(params *DeleteNuncImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNuncImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNuncImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_nunc_image",
		Method:             "DELETE",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/images/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNuncImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNuncImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_nunc_image: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteNuncLink deletes a status page link

Delete a link displayed on a FireHydrant status page
*/
func (a *Client) DeleteNuncLink(params *DeleteNuncLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNuncLinkNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNuncLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_nunc_link",
		Method:             "DELETE",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/links/{link_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNuncLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNuncLinkNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_nunc_link: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteNuncSubscription unsubscribes from status page notifications

Unsubscribe from status page updates
*/
func (a *Client) DeleteNuncSubscription(params *DeleteNuncSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNuncSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNuncSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_nunc_subscription",
		Method:             "DELETE",
		PathPattern:        "/v1/nunc/subscriptions/{unsubscribe_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNuncSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNuncSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_nunc_subscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNuncConnection gets a status page

Retrieve the information displayed as part of your FireHydrant hosted status page.
*/
func (a *Client) GetNuncConnection(params *GetNuncConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNuncConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNuncConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_nunc_connection",
		Method:             "GET",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNuncConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNuncConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_nunc_connection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListEmailSubscribers lists status page subscribers

Retrieves the list of subscribers for a status page.
*/
func (a *Client) ListEmailSubscribers(params *ListEmailSubscribersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEmailSubscribersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEmailSubscribersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_email_subscribers",
		Method:             "GET",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/subscribers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEmailSubscribersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEmailSubscribersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_email_subscribers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListNuncConnections lists status pages

Lists the information displayed as part of your FireHydrant hosted status pages.
*/
func (a *Client) ListNuncConnections(params *ListNuncConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListNuncConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNuncConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_nunc_connections",
		Method:             "GET",
		PathPattern:        "/v1/nunc_connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListNuncConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNuncConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_nunc_connections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNuncComponentGroup updates a status page component group

Update a component group to be displayed on a FireHydrant status page
*/
func (a *Client) UpdateNuncComponentGroup(params *UpdateNuncComponentGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNuncComponentGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNuncComponentGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_nunc_component_group",
		Method:             "PATCH",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/component_groups/{group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNuncComponentGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNuncComponentGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_nunc_component_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNuncConnection updates a status page

Update your company's information and other components in the specified FireHydrant hosted status page.
*/
func (a *Client) UpdateNuncConnection(params *UpdateNuncConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNuncConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNuncConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_nunc_connection",
		Method:             "PUT",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNuncConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNuncConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_nunc_connection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNuncImage uploads an image for a status page

Add or replace an image attached to a FireHydrant status page
*/
func (a *Client) UpdateNuncImage(params *UpdateNuncImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNuncImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNuncImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_nunc_image",
		Method:             "PUT",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/images/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNuncImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNuncImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_nunc_image: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNuncLink updates a status page link

Update a link to be displayed on a FireHydrant status page
*/
func (a *Client) UpdateNuncLink(params *UpdateNuncLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNuncLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNuncLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_nunc_link",
		Method:             "PATCH",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/links/{link_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNuncLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNuncLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_nunc_link: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
