// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListTeamsParams creates a new ListTeamsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListTeamsParams() *ListTeamsParams {
	return &ListTeamsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListTeamsParamsWithTimeout creates a new ListTeamsParams object
// with the ability to set a timeout on a request.
func NewListTeamsParamsWithTimeout(timeout time.Duration) *ListTeamsParams {
	return &ListTeamsParams{
		timeout: timeout,
	}
}

// NewListTeamsParamsWithContext creates a new ListTeamsParams object
// with the ability to set a context for a request.
func NewListTeamsParamsWithContext(ctx context.Context) *ListTeamsParams {
	return &ListTeamsParams{
		Context: ctx,
	}
}

// NewListTeamsParamsWithHTTPClient creates a new ListTeamsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListTeamsParamsWithHTTPClient(client *http.Client) *ListTeamsParams {
	return &ListTeamsParams{
		HTTPClient: client,
	}
}

/*
ListTeamsParams contains all the parameters to send to the API endpoint

	for the list teams operation.

	Typically these are written to a http.Request.
*/
type ListTeamsParams struct {

	/* DefaultIncidentRole.

	   Filter by teams that have or do not have members with a default incident role asssigned. Value may be 'present', 'blank', or the ID of an incident role.
	*/
	DefaultIncidentRole *string

	/* Lite.

	   Boolean to determine whether to return a slimified version of the teams object
	*/
	Lite *bool

	/* Name.

	   A query to search teams by their name
	*/
	Name *string

	// Page.
	//
	// Format: int32
	Page *int32

	// PerPage.
	//
	// Format: int32
	PerPage *int32

	/* Query.

	   A query to search teams by their name or description
	*/
	Query *string

	/* Services.

	   A comma separated list of service IDs
	*/
	Services *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list teams params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListTeamsParams) WithDefaults() *ListTeamsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list teams params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListTeamsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list teams params
func (o *ListTeamsParams) WithTimeout(timeout time.Duration) *ListTeamsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list teams params
func (o *ListTeamsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list teams params
func (o *ListTeamsParams) WithContext(ctx context.Context) *ListTeamsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list teams params
func (o *ListTeamsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list teams params
func (o *ListTeamsParams) WithHTTPClient(client *http.Client) *ListTeamsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list teams params
func (o *ListTeamsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDefaultIncidentRole adds the defaultIncidentRole to the list teams params
func (o *ListTeamsParams) WithDefaultIncidentRole(defaultIncidentRole *string) *ListTeamsParams {
	o.SetDefaultIncidentRole(defaultIncidentRole)
	return o
}

// SetDefaultIncidentRole adds the defaultIncidentRole to the list teams params
func (o *ListTeamsParams) SetDefaultIncidentRole(defaultIncidentRole *string) {
	o.DefaultIncidentRole = defaultIncidentRole
}

// WithLite adds the lite to the list teams params
func (o *ListTeamsParams) WithLite(lite *bool) *ListTeamsParams {
	o.SetLite(lite)
	return o
}

// SetLite adds the lite to the list teams params
func (o *ListTeamsParams) SetLite(lite *bool) {
	o.Lite = lite
}

// WithName adds the name to the list teams params
func (o *ListTeamsParams) WithName(name *string) *ListTeamsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the list teams params
func (o *ListTeamsParams) SetName(name *string) {
	o.Name = name
}

// WithPage adds the page to the list teams params
func (o *ListTeamsParams) WithPage(page *int32) *ListTeamsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list teams params
func (o *ListTeamsParams) SetPage(page *int32) {
	o.Page = page
}

// WithPerPage adds the perPage to the list teams params
func (o *ListTeamsParams) WithPerPage(perPage *int32) *ListTeamsParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the list teams params
func (o *ListTeamsParams) SetPerPage(perPage *int32) {
	o.PerPage = perPage
}

// WithQuery adds the query to the list teams params
func (o *ListTeamsParams) WithQuery(query *string) *ListTeamsParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the list teams params
func (o *ListTeamsParams) SetQuery(query *string) {
	o.Query = query
}

// WithServices adds the services to the list teams params
func (o *ListTeamsParams) WithServices(services *string) *ListTeamsParams {
	o.SetServices(services)
	return o
}

// SetServices adds the services to the list teams params
func (o *ListTeamsParams) SetServices(services *string) {
	o.Services = services
}

// WriteToRequest writes these params to a swagger request
func (o *ListTeamsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DefaultIncidentRole != nil {

		// query param default_incident_role
		var qrDefaultIncidentRole string

		if o.DefaultIncidentRole != nil {
			qrDefaultIncidentRole = *o.DefaultIncidentRole
		}
		qDefaultIncidentRole := qrDefaultIncidentRole
		if qDefaultIncidentRole != "" {

			if err := r.SetQueryParam("default_incident_role", qDefaultIncidentRole); err != nil {
				return err
			}
		}
	}

	if o.Lite != nil {

		// query param lite
		var qrLite bool

		if o.Lite != nil {
			qrLite = *o.Lite
		}
		qLite := swag.FormatBool(qrLite)
		if qLite != "" {

			if err := r.SetQueryParam("lite", qLite); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int32

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt32(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.Services != nil {

		// query param services
		var qrServices string

		if o.Services != nil {
			qrServices = *o.Services
		}
		qServices := qrServices
		if qServices != "" {

			if err := r.SetQueryParam("services", qServices); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
