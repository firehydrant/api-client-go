// Code generated by go-swagger; DO NOT EDIT.

package ai

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ai API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ai API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetV1AiPreferences(params *GetV1AiPreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1AiPreferencesOK, error)

	GetV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVoted(params *GetV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVotedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVotedOK, error)

	PatchV1AiPreferences(params *PatchV1AiPreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1AiPreferencesOK, error)

	PutV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVote(params *PutV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVoteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVoteOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetV1AiPreferences preferences

Retrieves the current AI preferences
*/
func (a *Client) GetV1AiPreferences(params *GetV1AiPreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1AiPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1AiPreferencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1AiPreferences",
		Method:             "GET",
		PathPattern:        "/v1/ai/preferences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1AiPreferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1AiPreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1AiPreferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVoted get v1 ai summarize incident incident Id generated summary Id voted API
*/
func (a *Client) GetV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVoted(params *GetV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVotedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVotedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVotedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1AiSummarizeIncidentIncidentIdGeneratedSummaryIdVoted",
		Method:             "GET",
		PathPattern:        "/v1/ai/summarize_incident/{incident_id}/{generated_summary_id}/voted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVotedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVotedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1AiSummarizeIncidentIncidentIdGeneratedSummaryIdVoted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1AiPreferences updates preferences

Updates the AI preferences
*/
func (a *Client) PatchV1AiPreferences(params *PatchV1AiPreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1AiPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1AiPreferencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1AiPreferences",
		Method:             "PATCH",
		PathPattern:        "/v1/ai/preferences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1AiPreferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1AiPreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1AiPreferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVote put v1 ai summarize incident incident Id generated summary Id vote API
*/
func (a *Client) PutV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVote(params *PutV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVoteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVoteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putV1AiSummarizeIncidentIncidentIdGeneratedSummaryIdVote",
		Method:             "PUT",
		PathPattern:        "/v1/ai/summarize_incident/{incident_id}/{generated_summary_id}/vote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVoteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutV1AiSummarizeIncidentIncidentIDGeneratedSummaryIDVoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putV1AiSummarizeIncidentIncidentIdGeneratedSummaryIdVote: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
