// Code generated by go-swagger; DO NOT EDIT.

package catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostV1CatalogsCatalogIDIngestParams creates a new PostV1CatalogsCatalogIDIngestParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostV1CatalogsCatalogIDIngestParams() *PostV1CatalogsCatalogIDIngestParams {
	return &PostV1CatalogsCatalogIDIngestParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostV1CatalogsCatalogIDIngestParamsWithTimeout creates a new PostV1CatalogsCatalogIDIngestParams object
// with the ability to set a timeout on a request.
func NewPostV1CatalogsCatalogIDIngestParamsWithTimeout(timeout time.Duration) *PostV1CatalogsCatalogIDIngestParams {
	return &PostV1CatalogsCatalogIDIngestParams{
		timeout: timeout,
	}
}

// NewPostV1CatalogsCatalogIDIngestParamsWithContext creates a new PostV1CatalogsCatalogIDIngestParams object
// with the ability to set a context for a request.
func NewPostV1CatalogsCatalogIDIngestParamsWithContext(ctx context.Context) *PostV1CatalogsCatalogIDIngestParams {
	return &PostV1CatalogsCatalogIDIngestParams{
		Context: ctx,
	}
}

// NewPostV1CatalogsCatalogIDIngestParamsWithHTTPClient creates a new PostV1CatalogsCatalogIDIngestParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostV1CatalogsCatalogIDIngestParamsWithHTTPClient(client *http.Client) *PostV1CatalogsCatalogIDIngestParams {
	return &PostV1CatalogsCatalogIDIngestParams{
		HTTPClient: client,
	}
}

/* PostV1CatalogsCatalogIDIngestParams contains all the parameters to send to the API endpoint
   for the post v1 catalogs catalog Id ingest operation.

   Typically these are written to a http.Request.
*/
type PostV1CatalogsCatalogIDIngestParams struct {

	// CatalogID.
	CatalogID string

	/* Data.

	   Service data
	*/
	Data string

	/* Encoding.

	   Encoding for submitted data
	*/
	Encoding string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post v1 catalogs catalog Id ingest params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostV1CatalogsCatalogIDIngestParams) WithDefaults() *PostV1CatalogsCatalogIDIngestParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post v1 catalogs catalog Id ingest params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostV1CatalogsCatalogIDIngestParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post v1 catalogs catalog Id ingest params
func (o *PostV1CatalogsCatalogIDIngestParams) WithTimeout(timeout time.Duration) *PostV1CatalogsCatalogIDIngestParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post v1 catalogs catalog Id ingest params
func (o *PostV1CatalogsCatalogIDIngestParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post v1 catalogs catalog Id ingest params
func (o *PostV1CatalogsCatalogIDIngestParams) WithContext(ctx context.Context) *PostV1CatalogsCatalogIDIngestParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post v1 catalogs catalog Id ingest params
func (o *PostV1CatalogsCatalogIDIngestParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post v1 catalogs catalog Id ingest params
func (o *PostV1CatalogsCatalogIDIngestParams) WithHTTPClient(client *http.Client) *PostV1CatalogsCatalogIDIngestParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post v1 catalogs catalog Id ingest params
func (o *PostV1CatalogsCatalogIDIngestParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCatalogID adds the catalogID to the post v1 catalogs catalog Id ingest params
func (o *PostV1CatalogsCatalogIDIngestParams) WithCatalogID(catalogID string) *PostV1CatalogsCatalogIDIngestParams {
	o.SetCatalogID(catalogID)
	return o
}

// SetCatalogID adds the catalogId to the post v1 catalogs catalog Id ingest params
func (o *PostV1CatalogsCatalogIDIngestParams) SetCatalogID(catalogID string) {
	o.CatalogID = catalogID
}

// WithData adds the data to the post v1 catalogs catalog Id ingest params
func (o *PostV1CatalogsCatalogIDIngestParams) WithData(data string) *PostV1CatalogsCatalogIDIngestParams {
	o.SetData(data)
	return o
}

// SetData adds the data to the post v1 catalogs catalog Id ingest params
func (o *PostV1CatalogsCatalogIDIngestParams) SetData(data string) {
	o.Data = data
}

// WithEncoding adds the encoding to the post v1 catalogs catalog Id ingest params
func (o *PostV1CatalogsCatalogIDIngestParams) WithEncoding(encoding string) *PostV1CatalogsCatalogIDIngestParams {
	o.SetEncoding(encoding)
	return o
}

// SetEncoding adds the encoding to the post v1 catalogs catalog Id ingest params
func (o *PostV1CatalogsCatalogIDIngestParams) SetEncoding(encoding string) {
	o.Encoding = encoding
}

// WriteToRequest writes these params to a swagger request
func (o *PostV1CatalogsCatalogIDIngestParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param catalog_id
	if err := r.SetPathParam("catalog_id", o.CatalogID); err != nil {
		return err
	}

	// form param data
	frData := o.Data
	fData := frData
	if fData != "" {
		if err := r.SetFormParam("data", fData); err != nil {
			return err
		}
	}

	// form param encoding
	frEncoding := o.Encoding
	fEncoding := frEncoding
	if fEncoding != "" {
		if err := r.SetFormParam("encoding", fEncoding); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
