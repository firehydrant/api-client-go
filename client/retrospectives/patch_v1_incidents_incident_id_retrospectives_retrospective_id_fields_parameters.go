// Code generated by go-swagger; DO NOT EDIT.

package retrospectives

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams creates a new PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams() *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams {
	return &PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParamsWithTimeout creates a new PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams object
// with the ability to set a timeout on a request.
func NewPatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParamsWithTimeout(timeout time.Duration) *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams {
	return &PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams{
		timeout: timeout,
	}
}

// NewPatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParamsWithContext creates a new PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams object
// with the ability to set a context for a request.
func NewPatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParamsWithContext(ctx context.Context) *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams {
	return &PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams{
		Context: ctx,
	}
}

// NewPatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParamsWithHTTPClient creates a new PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParamsWithHTTPClient(client *http.Client) *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams {
	return &PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams{
		HTTPClient: client,
	}
}

/*
PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams contains all the parameters to send to the API endpoint

	for the patch v1 incidents incident Id retrospectives retrospective Id fields operation.

	Typically these are written to a http.Request.
*/
type PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams struct {

	// HelpText.
	HelpText *string

	// IncidentID.
	IncidentID string

	// IsRequired.
	IsRequired *bool

	// Label.
	Label string

	// PermissibleValues.
	PermissibleValues []string

	// RetrospectiveID.
	RetrospectiveID string

	// Schema.
	Schema []string

	// Type.
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch v1 incidents incident Id retrospectives retrospective Id fields params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) WithDefaults() *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch v1 incidents incident Id retrospectives retrospective Id fields params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) WithTimeout(timeout time.Duration) *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) WithContext(ctx context.Context) *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) WithHTTPClient(client *http.Client) *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHelpText adds the helpText to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) WithHelpText(helpText *string) *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams {
	o.SetHelpText(helpText)
	return o
}

// SetHelpText adds the helpText to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) SetHelpText(helpText *string) {
	o.HelpText = helpText
}

// WithIncidentID adds the incidentID to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) WithIncidentID(incidentID string) *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams {
	o.SetIncidentID(incidentID)
	return o
}

// SetIncidentID adds the incidentId to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) SetIncidentID(incidentID string) {
	o.IncidentID = incidentID
}

// WithIsRequired adds the isRequired to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) WithIsRequired(isRequired *bool) *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams {
	o.SetIsRequired(isRequired)
	return o
}

// SetIsRequired adds the isRequired to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) SetIsRequired(isRequired *bool) {
	o.IsRequired = isRequired
}

// WithLabel adds the label to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) WithLabel(label string) *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams {
	o.SetLabel(label)
	return o
}

// SetLabel adds the label to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) SetLabel(label string) {
	o.Label = label
}

// WithPermissibleValues adds the permissibleValues to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) WithPermissibleValues(permissibleValues []string) *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams {
	o.SetPermissibleValues(permissibleValues)
	return o
}

// SetPermissibleValues adds the permissibleValues to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) SetPermissibleValues(permissibleValues []string) {
	o.PermissibleValues = permissibleValues
}

// WithRetrospectiveID adds the retrospectiveID to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) WithRetrospectiveID(retrospectiveID string) *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams {
	o.SetRetrospectiveID(retrospectiveID)
	return o
}

// SetRetrospectiveID adds the retrospectiveId to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) SetRetrospectiveID(retrospectiveID string) {
	o.RetrospectiveID = retrospectiveID
}

// WithSchema adds the schema to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) WithSchema(schema []string) *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams {
	o.SetSchema(schema)
	return o
}

// SetSchema adds the schema to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) SetSchema(schema []string) {
	o.Schema = schema
}

// WithType adds the typeVar to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) WithType(typeVar string) *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the patch v1 incidents incident Id retrospectives retrospective Id fields params
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.HelpText != nil {

		// form param help_text
		var frHelpText string
		if o.HelpText != nil {
			frHelpText = *o.HelpText
		}
		fHelpText := frHelpText
		if fHelpText != "" {
			if err := r.SetFormParam("help_text", fHelpText); err != nil {
				return err
			}
		}
	}

	// path param incident_id
	if err := r.SetPathParam("incident_id", o.IncidentID); err != nil {
		return err
	}

	if o.IsRequired != nil {

		// form param is_required
		var frIsRequired bool
		if o.IsRequired != nil {
			frIsRequired = *o.IsRequired
		}
		fIsRequired := swag.FormatBool(frIsRequired)
		if fIsRequired != "" {
			if err := r.SetFormParam("is_required", fIsRequired); err != nil {
				return err
			}
		}
	}

	// form param label
	frLabel := o.Label
	fLabel := frLabel
	if fLabel != "" {
		if err := r.SetFormParam("label", fLabel); err != nil {
			return err
		}
	}

	if o.PermissibleValues != nil {

		// binding items for permissible_values
		joinedPermissibleValues := o.bindParamPermissibleValues(reg)

		// form array param permissible_values
		if err := r.SetFormParam("permissible_values", joinedPermissibleValues...); err != nil {
			return err
		}
	}

	// path param retrospective_id
	if err := r.SetPathParam("retrospective_id", o.RetrospectiveID); err != nil {
		return err
	}

	if o.Schema != nil {

		// binding items for schema
		joinedSchema := o.bindParamSchema(reg)

		// form array param schema
		if err := r.SetFormParam("schema", joinedSchema...); err != nil {
			return err
		}
	}

	// form param type
	frType := o.Type
	fType := frType
	if fType != "" {
		if err := r.SetFormParam("type", fType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamPatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFields binds the parameter permissible_values
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) bindParamPermissibleValues(formats strfmt.Registry) []string {
	permissibleValuesIR := o.PermissibleValues

	var permissibleValuesIC []string
	for _, permissibleValuesIIR := range permissibleValuesIR { // explode []string

		permissibleValuesIIV := permissibleValuesIIR // string as string
		permissibleValuesIC = append(permissibleValuesIC, permissibleValuesIIV)
	}

	// items.CollectionFormat: ""
	permissibleValuesIS := swag.JoinByFormat(permissibleValuesIC, "")

	return permissibleValuesIS
}

// bindParamPatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFields binds the parameter schema
func (o *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams) bindParamSchema(formats strfmt.Registry) []string {
	schemaIR := o.Schema

	var schemaIC []string
	for _, schemaIIR := range schemaIR { // explode []string

		schemaIIV := schemaIIR // string as string
		schemaIC = append(schemaIC, schemaIIV)
	}

	// items.CollectionFormat: ""
	schemaIS := swag.JoinByFormat(schemaIC, "")

	return schemaIS
}
