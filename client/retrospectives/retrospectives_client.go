// Code generated by go-swagger; DO NOT EDIT.

package retrospectives

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new retrospectives API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for retrospectives API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputs(params *DeleteV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputsOK, error)

	DeleteV1PostMortemsReportsReportIDReasonsReasonID(params *DeleteV1PostMortemsReportsReportIDReasonsReasonIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1PostMortemsReportsReportIDReasonsReasonIDOK, error)

	DeleteV1RetrospectiveTemplatesRetrospectiveTemplateID(params *DeleteV1RetrospectiveTemplatesRetrospectiveTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1RetrospectiveTemplatesRetrospectiveTemplateIDOK, error)

	GetV1IncidentsIncidentIDRetrospectives(params *GetV1IncidentsIncidentIDRetrospectivesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentsIncidentIDRetrospectivesOK, error)

	GetV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldID(params *GetV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDOK, error)

	GetV1PostMortemsQuestions(params *GetV1PostMortemsQuestionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PostMortemsQuestionsOK, error)

	GetV1PostMortemsQuestionsQuestionID(params *GetV1PostMortemsQuestionsQuestionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PostMortemsQuestionsQuestionIDOK, error)

	GetV1PostMortemsReports(params *GetV1PostMortemsReportsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PostMortemsReportsOK, error)

	GetV1PostMortemsReportsReportID(params *GetV1PostMortemsReportsReportIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PostMortemsReportsReportIDOK, error)

	GetV1PostMortemsReportsReportIDReasons(params *GetV1PostMortemsReportsReportIDReasonsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PostMortemsReportsReportIDReasonsOK, error)

	GetV1RetrospectiveTemplates(params *GetV1RetrospectiveTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RetrospectiveTemplatesOK, error)

	GetV1RetrospectiveTemplatesRetrospectiveTemplateID(params *GetV1RetrospectiveTemplatesRetrospectiveTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RetrospectiveTemplatesRetrospectiveTemplateIDOK, error)

	GetV1Retrospectives(params *GetV1RetrospectivesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RetrospectivesOK, error)

	PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveID(params *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDOK, error)

	PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFields(params *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsOK, error)

	PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldID(params *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDOK, error)

	PatchV1PostMortemsReportsReportID(params *PatchV1PostMortemsReportsReportIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1PostMortemsReportsReportIDOK, error)

	PatchV1PostMortemsReportsReportIDFieldsFieldID(params *PatchV1PostMortemsReportsReportIDFieldsFieldIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1PostMortemsReportsReportIDFieldsFieldIDOK, error)

	PatchV1PostMortemsReportsReportIDReasonsReasonID(params *PatchV1PostMortemsReportsReportIDReasonsReasonIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1PostMortemsReportsReportIDReasonsReasonIDOK, error)

	PatchV1RetrospectiveTemplatesRetrospectiveTemplateID(params *PatchV1RetrospectiveTemplatesRetrospectiveTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1RetrospectiveTemplatesRetrospectiveTemplateIDOK, error)

	PostV1IncidentsIncidentIDRetrospectives(params *PostV1IncidentsIncidentIDRetrospectivesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentsIncidentIDRetrospectivesCreated, error)

	PostV1IncidentsIncidentIDRetrospectivesExport(params *PostV1IncidentsIncidentIDRetrospectivesExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentsIncidentIDRetrospectivesExportCreated, error)

	PostV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputs(params *PostV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputsCreated, error)

	PostV1IncidentsIncidentIDRetrospectivesShare(params *PostV1IncidentsIncidentIDRetrospectivesShareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentsIncidentIDRetrospectivesShareCreated, error)

	PostV1PostMortemsReports(params *PostV1PostMortemsReportsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1PostMortemsReportsCreated, error)

	PostV1PostMortemsReportsReportIDPublish(params *PostV1PostMortemsReportsReportIDPublishParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1PostMortemsReportsReportIDPublishCreated, error)

	PostV1PostMortemsReportsReportIDReasons(params *PostV1PostMortemsReportsReportIDReasonsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1PostMortemsReportsReportIDReasonsCreated, error)

	PostV1RetrospectiveTemplates(params *PostV1RetrospectiveTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1RetrospectiveTemplatesCreated, error)

	PutV1PostMortemsQuestions(params *PutV1PostMortemsQuestionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1PostMortemsQuestionsOK, error)

	PutV1PostMortemsReportsReportIDReasonsOrder(params *PutV1PostMortemsReportsReportIDReasonsOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1PostMortemsReportsReportIDReasonsOrderOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputs removes a dynamic input from a retrospective s dynamic input group field

Delete a dynamic input on a dynamic input group
*/
func (a *Client) DeleteV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputs(params *DeleteV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1IncidentsIncidentIdRetrospectivesRetrospectiveIdFieldsFieldIdInputs",
		Method:             "DELETE",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}/fields/{field_id}/inputs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1IncidentsIncidentIdRetrospectivesRetrospectiveIdFieldsFieldIdInputs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1PostMortemsReportsReportIDReasonsReasonID deletes a contributing factor from a retrospective report

Delete a contributing factor
*/
func (a *Client) DeleteV1PostMortemsReportsReportIDReasonsReasonID(params *DeleteV1PostMortemsReportsReportIDReasonsReasonIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1PostMortemsReportsReportIDReasonsReasonIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1PostMortemsReportsReportIDReasonsReasonIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1PostMortemsReportsReportIdReasonsReasonId",
		Method:             "DELETE",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/reasons/{reason_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1PostMortemsReportsReportIDReasonsReasonIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1PostMortemsReportsReportIDReasonsReasonIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1PostMortemsReportsReportIdReasonsReasonId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1RetrospectiveTemplatesRetrospectiveTemplateID deletes a retrospective template

Delete a single retrospective template
*/
func (a *Client) DeleteV1RetrospectiveTemplatesRetrospectiveTemplateID(params *DeleteV1RetrospectiveTemplatesRetrospectiveTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1RetrospectiveTemplatesRetrospectiveTemplateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1RetrospectiveTemplatesRetrospectiveTemplateIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1RetrospectiveTemplatesRetrospectiveTemplateId",
		Method:             "DELETE",
		PathPattern:        "/v1/retrospective_templates/{retrospective_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1RetrospectiveTemplatesRetrospectiveTemplateIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1RetrospectiveTemplatesRetrospectiveTemplateIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1RetrospectiveTemplatesRetrospectiveTemplateId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IncidentsIncidentIDRetrospectives alls attached retrospectives for an incident

Retrieve retrospectives attached to an incident
*/
func (a *Client) GetV1IncidentsIncidentIDRetrospectives(params *GetV1IncidentsIncidentIDRetrospectivesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentsIncidentIDRetrospectivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IncidentsIncidentIDRetrospectivesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IncidentsIncidentIdRetrospectives",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IncidentsIncidentIDRetrospectivesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IncidentsIncidentIDRetrospectivesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IncidentsIncidentIdRetrospectives: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldID gets a retrospective field

Retrieve a field on an incident retrospective
*/
func (a *Client) GetV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldID(params *GetV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IncidentsIncidentIdRetrospectivesRetrospectiveIdFieldsFieldId",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}/fields/{field_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IncidentsIncidentIdRetrospectivesRetrospectiveIdFieldsFieldId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1PostMortemsQuestions lists retrospective questions

List the questions configured to be provided and filled out on each retrospective report.
*/
func (a *Client) GetV1PostMortemsQuestions(params *GetV1PostMortemsQuestionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PostMortemsQuestionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PostMortemsQuestionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1PostMortemsQuestions",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/questions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1PostMortemsQuestionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1PostMortemsQuestionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1PostMortemsQuestions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1PostMortemsQuestionsQuestionID gets a retrospective question

Get an incident retrospective question configured to be provided and filled out on each retrospective report.
*/
func (a *Client) GetV1PostMortemsQuestionsQuestionID(params *GetV1PostMortemsQuestionsQuestionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PostMortemsQuestionsQuestionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PostMortemsQuestionsQuestionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1PostMortemsQuestionsQuestionId",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/questions/{question_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1PostMortemsQuestionsQuestionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1PostMortemsQuestionsQuestionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1PostMortemsQuestionsQuestionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1PostMortemsReports lists retrospective reports

List all reports
*/
func (a *Client) GetV1PostMortemsReports(params *GetV1PostMortemsReportsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PostMortemsReportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PostMortemsReportsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1PostMortemsReports",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1PostMortemsReportsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1PostMortemsReportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1PostMortemsReports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1PostMortemsReportsReportID gets a retrospective report

Get a report
*/
func (a *Client) GetV1PostMortemsReportsReportID(params *GetV1PostMortemsReportsReportIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PostMortemsReportsReportIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PostMortemsReportsReportIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1PostMortemsReportsReportId",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/reports/{report_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1PostMortemsReportsReportIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1PostMortemsReportsReportIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1PostMortemsReportsReportId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1PostMortemsReportsReportIDReasons lists contributing factors for a retrospective report

List all contributing factors to an incident
*/
func (a *Client) GetV1PostMortemsReportsReportIDReasons(params *GetV1PostMortemsReportsReportIDReasonsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PostMortemsReportsReportIDReasonsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PostMortemsReportsReportIDReasonsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1PostMortemsReportsReportIdReasons",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/reasons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1PostMortemsReportsReportIDReasonsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1PostMortemsReportsReportIDReasonsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1PostMortemsReportsReportIdReasons: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1RetrospectiveTemplates lists retrospective templates

List all retrospective templates
*/
func (a *Client) GetV1RetrospectiveTemplates(params *GetV1RetrospectiveTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RetrospectiveTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1RetrospectiveTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1RetrospectiveTemplates",
		Method:             "GET",
		PathPattern:        "/v1/retrospective_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1RetrospectiveTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1RetrospectiveTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1RetrospectiveTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1RetrospectiveTemplatesRetrospectiveTemplateID gets a retrospective template

Retrieve a single retrospective template by ID
*/
func (a *Client) GetV1RetrospectiveTemplatesRetrospectiveTemplateID(params *GetV1RetrospectiveTemplatesRetrospectiveTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RetrospectiveTemplatesRetrospectiveTemplateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1RetrospectiveTemplatesRetrospectiveTemplateIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1RetrospectiveTemplatesRetrospectiveTemplateId",
		Method:             "GET",
		PathPattern:        "/v1/retrospective_templates/{retrospective_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1RetrospectiveTemplatesRetrospectiveTemplateIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1RetrospectiveTemplatesRetrospectiveTemplateIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1RetrospectiveTemplatesRetrospectiveTemplateId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Retrospectives lists retrospective reports

List all retrospective reports
*/
func (a *Client) GetV1Retrospectives(params *GetV1RetrospectivesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RetrospectivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1RetrospectivesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1Retrospectives",
		Method:             "GET",
		PathPattern:        "/v1/retrospectives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1RetrospectivesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1RetrospectivesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1Retrospectives: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveID updates a retrospective on the incident

Update a retrospective attached to an incident
*/
func (a *Client) PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveID(params *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1IncidentsIncidentIdRetrospectivesRetrospectiveId",
		Method:             "PATCH",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1IncidentsIncidentIdRetrospectivesRetrospectiveId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFields appends a new incident retrospective field to an incident retrospective

Add a new field to an incident retrospective
*/
func (a *Client) PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFields(params *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1IncidentsIncidentIdRetrospectivesRetrospectiveIdFields",
		Method:             "PATCH",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}/fields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1IncidentsIncidentIdRetrospectivesRetrospectiveIdFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldID updates the value on a retrospective field

Update retrospective field value
*/
func (a *Client) PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldID(params *PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1IncidentsIncidentIdRetrospectivesRetrospectiveIdFieldsFieldId",
		Method:             "PATCH",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}/fields/{field_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1IncidentsIncidentIdRetrospectivesRetrospectiveIdFieldsFieldId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1PostMortemsReportsReportID updates a retrospective report

Update a report
*/
func (a *Client) PatchV1PostMortemsReportsReportID(params *PatchV1PostMortemsReportsReportIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1PostMortemsReportsReportIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1PostMortemsReportsReportIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1PostMortemsReportsReportId",
		Method:             "PATCH",
		PathPattern:        "/v1/post_mortems/reports/{report_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1PostMortemsReportsReportIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1PostMortemsReportsReportIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1PostMortemsReportsReportId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1PostMortemsReportsReportIDFieldsFieldID updates a retrospective field

Update a field value on a post mortem report
*/
func (a *Client) PatchV1PostMortemsReportsReportIDFieldsFieldID(params *PatchV1PostMortemsReportsReportIDFieldsFieldIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1PostMortemsReportsReportIDFieldsFieldIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1PostMortemsReportsReportIDFieldsFieldIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1PostMortemsReportsReportIdFieldsFieldId",
		Method:             "PATCH",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/fields/{field_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1PostMortemsReportsReportIDFieldsFieldIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1PostMortemsReportsReportIDFieldsFieldIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1PostMortemsReportsReportIdFieldsFieldId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1PostMortemsReportsReportIDReasonsReasonID updates a contributing factor in a retrospective report

Update a contributing factor
*/
func (a *Client) PatchV1PostMortemsReportsReportIDReasonsReasonID(params *PatchV1PostMortemsReportsReportIDReasonsReasonIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1PostMortemsReportsReportIDReasonsReasonIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1PostMortemsReportsReportIDReasonsReasonIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1PostMortemsReportsReportIdReasonsReasonId",
		Method:             "PATCH",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/reasons/{reason_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1PostMortemsReportsReportIDReasonsReasonIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1PostMortemsReportsReportIDReasonsReasonIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1PostMortemsReportsReportIdReasonsReasonId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1RetrospectiveTemplatesRetrospectiveTemplateID updates a retrospective template

Update a single retrospective template
*/
func (a *Client) PatchV1RetrospectiveTemplatesRetrospectiveTemplateID(params *PatchV1RetrospectiveTemplatesRetrospectiveTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1RetrospectiveTemplatesRetrospectiveTemplateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1RetrospectiveTemplatesRetrospectiveTemplateIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1RetrospectiveTemplatesRetrospectiveTemplateId",
		Method:             "PATCH",
		PathPattern:        "/v1/retrospective_templates/{retrospective_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1RetrospectiveTemplatesRetrospectiveTemplateIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1RetrospectiveTemplatesRetrospectiveTemplateIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1RetrospectiveTemplatesRetrospectiveTemplateId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1IncidentsIncidentIDRetrospectives creates a new retrospective on the incident using the template

Create a new retrospective for an incident
*/
func (a *Client) PostV1IncidentsIncidentIDRetrospectives(params *PostV1IncidentsIncidentIDRetrospectivesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentsIncidentIDRetrospectivesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1IncidentsIncidentIDRetrospectivesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1IncidentsIncidentIdRetrospectives",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1IncidentsIncidentIDRetrospectivesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1IncidentsIncidentIDRetrospectivesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1IncidentsIncidentIdRetrospectives: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1IncidentsIncidentIDRetrospectivesExport exports an incident s retrospective s

Export incident's retrospective(s) using their templates
*/
func (a *Client) PostV1IncidentsIncidentIDRetrospectivesExport(params *PostV1IncidentsIncidentIDRetrospectivesExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentsIncidentIDRetrospectivesExportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1IncidentsIncidentIDRetrospectivesExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1IncidentsIncidentIdRetrospectivesExport",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1IncidentsIncidentIDRetrospectivesExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1IncidentsIncidentIDRetrospectivesExportCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1IncidentsIncidentIdRetrospectivesExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputs adds a new dynamic input field to a retrospective s dynamic input group field

Add a new dynamic input field to a dynamic input group
*/
func (a *Client) PostV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputs(params *PostV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1IncidentsIncidentIdRetrospectivesRetrospectiveIdFieldsFieldIdInputs",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}/fields/{field_id}/inputs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1IncidentsIncidentIDRetrospectivesRetrospectiveIDFieldsFieldIDInputsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1IncidentsIncidentIdRetrospectivesRetrospectiveIdFieldsFieldIdInputs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1IncidentsIncidentIDRetrospectivesShare shares an incident s retrospective

Share incident retrospectives with users or teams
*/
func (a *Client) PostV1IncidentsIncidentIDRetrospectivesShare(params *PostV1IncidentsIncidentIDRetrospectivesShareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentsIncidentIDRetrospectivesShareCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1IncidentsIncidentIDRetrospectivesShareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1IncidentsIncidentIdRetrospectivesShare",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives/share",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1IncidentsIncidentIDRetrospectivesShareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1IncidentsIncidentIDRetrospectivesShareCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1IncidentsIncidentIdRetrospectivesShare: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1PostMortemsReports creates a retrospective report

Create a report
*/
func (a *Client) PostV1PostMortemsReports(params *PostV1PostMortemsReportsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1PostMortemsReportsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1PostMortemsReportsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1PostMortemsReports",
		Method:             "POST",
		PathPattern:        "/v1/post_mortems/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1PostMortemsReportsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1PostMortemsReportsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1PostMortemsReports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1PostMortemsReportsReportIDPublish publishes a retrospective report

Marks an incident retrospective as published and emails all of the participants in the report the summary
*/
func (a *Client) PostV1PostMortemsReportsReportIDPublish(params *PostV1PostMortemsReportsReportIDPublishParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1PostMortemsReportsReportIDPublishCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1PostMortemsReportsReportIDPublishParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1PostMortemsReportsReportIdPublish",
		Method:             "POST",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/publish",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1PostMortemsReportsReportIDPublishReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1PostMortemsReportsReportIDPublishCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1PostMortemsReportsReportIdPublish: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1PostMortemsReportsReportIDReasons creates a contributing factor for a retrospective report

Add a new contributing factor to an incident
*/
func (a *Client) PostV1PostMortemsReportsReportIDReasons(params *PostV1PostMortemsReportsReportIDReasonsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1PostMortemsReportsReportIDReasonsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1PostMortemsReportsReportIDReasonsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1PostMortemsReportsReportIdReasons",
		Method:             "POST",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/reasons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1PostMortemsReportsReportIDReasonsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1PostMortemsReportsReportIDReasonsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1PostMortemsReportsReportIdReasons: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1RetrospectiveTemplates creates a retrospective template

Create a new retrospective template
*/
func (a *Client) PostV1RetrospectiveTemplates(params *PostV1RetrospectiveTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1RetrospectiveTemplatesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1RetrospectiveTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1RetrospectiveTemplates",
		Method:             "POST",
		PathPattern:        "/v1/retrospective_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1RetrospectiveTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1RetrospectiveTemplatesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1RetrospectiveTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutV1PostMortemsQuestions updates retrospective questions

Update the questions configured to be provided and filled out on future retrospective reports.
*/
func (a *Client) PutV1PostMortemsQuestions(params *PutV1PostMortemsQuestionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1PostMortemsQuestionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1PostMortemsQuestionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putV1PostMortemsQuestions",
		Method:             "PUT",
		PathPattern:        "/v1/post_mortems/questions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1PostMortemsQuestionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutV1PostMortemsQuestionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putV1PostMortemsQuestions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutV1PostMortemsReportsReportIDReasonsOrder reorders a contributing factor for a retrospective report

Update the order of contributing factors in a retrospective report
*/
func (a *Client) PutV1PostMortemsReportsReportIDReasonsOrder(params *PutV1PostMortemsReportsReportIDReasonsOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1PostMortemsReportsReportIDReasonsOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1PostMortemsReportsReportIDReasonsOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putV1PostMortemsReportsReportIdReasonsOrder",
		Method:             "PUT",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/reasons/order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1PostMortemsReportsReportIDReasonsOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutV1PostMortemsReportsReportIDReasonsOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putV1PostMortemsReportsReportIdReasonsOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
