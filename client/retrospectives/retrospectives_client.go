// Code generated by go-swagger; DO NOT EDIT.

package retrospectives

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new retrospectives API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for retrospectives API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateIncidentRetrospective(params *CreateIncidentRetrospectiveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentRetrospectiveCreated, error)

	CreateIncidentRetrospectiveDynamicInput(params *CreateIncidentRetrospectiveDynamicInputParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentRetrospectiveDynamicInputCreated, error)

	CreateIncidentRetrospectiveField(params *CreateIncidentRetrospectiveFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentRetrospectiveFieldOK, error)

	CreatePostMortemReason(params *CreatePostMortemReasonParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePostMortemReasonCreated, error)

	CreatePostMortemReport(params *CreatePostMortemReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePostMortemReportCreated, error)

	CreateRetrospectiveTemplate(params *CreateRetrospectiveTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRetrospectiveTemplateCreated, error)

	DeleteIncidentRetrospectiveDynamicInput(params *DeleteIncidentRetrospectiveDynamicInputParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentRetrospectiveDynamicInputOK, error)

	DeletePostMortemReason(params *DeletePostMortemReasonParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePostMortemReasonOK, error)

	DeleteRetrospectiveTemplate(params *DeleteRetrospectiveTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRetrospectiveTemplateOK, error)

	ExportIncidentRetrospectives(params *ExportIncidentRetrospectivesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportIncidentRetrospectivesCreated, error)

	GetIncidentRetrospectiveField(params *GetIncidentRetrospectiveFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentRetrospectiveFieldOK, error)

	GetPostMortemQuestion(params *GetPostMortemQuestionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPostMortemQuestionOK, error)

	GetPostMortemReport(params *GetPostMortemReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPostMortemReportOK, error)

	GetRetrospectiveTemplate(params *GetRetrospectiveTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRetrospectiveTemplateOK, error)

	ListIncidentRetrospectives(params *ListIncidentRetrospectivesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentRetrospectivesOK, error)

	ListPostMortemQuestions(params *ListPostMortemQuestionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPostMortemQuestionsOK, error)

	ListPostMortemReasons(params *ListPostMortemReasonsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPostMortemReasonsOK, error)

	ListPostMortemReports(params *ListPostMortemReportsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPostMortemReportsOK, error)

	ListRetrospectiveTemplates(params *ListRetrospectiveTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRetrospectiveTemplatesOK, error)

	ListRetrospectives(params *ListRetrospectivesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRetrospectivesOK, error)

	PublishPostMortemReport(params *PublishPostMortemReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PublishPostMortemReportCreated, error)

	ReorderPostMortemReasons(params *ReorderPostMortemReasonsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReorderPostMortemReasonsOK, error)

	ShareIncidentRetrospectives(params *ShareIncidentRetrospectivesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShareIncidentRetrospectivesCreated, error)

	UpdateIncidentRetrospective(params *UpdateIncidentRetrospectiveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentRetrospectiveOK, error)

	UpdateIncidentRetrospectiveField(params *UpdateIncidentRetrospectiveFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentRetrospectiveFieldOK, error)

	UpdatePostMortemField(params *UpdatePostMortemFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePostMortemFieldOK, error)

	UpdatePostMortemQuestions(params *UpdatePostMortemQuestionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePostMortemQuestionsOK, error)

	UpdatePostMortemReason(params *UpdatePostMortemReasonParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePostMortemReasonOK, error)

	UpdatePostMortemReport(params *UpdatePostMortemReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePostMortemReportOK, error)

	UpdateRetrospectiveTemplate(params *UpdateRetrospectiveTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRetrospectiveTemplateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateIncidentRetrospective creates a new retrospective on the incident using the template

Create a new retrospective for an incident
*/
func (a *Client) CreateIncidentRetrospective(params *CreateIncidentRetrospectiveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentRetrospectiveCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentRetrospectiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_incident_retrospective",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentRetrospectiveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIncidentRetrospectiveCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_incident_retrospective: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIncidentRetrospectiveDynamicInput adds a new dynamic input field to a retrospective s dynamic input group field

Add a new dynamic input field to a dynamic input group
*/
func (a *Client) CreateIncidentRetrospectiveDynamicInput(params *CreateIncidentRetrospectiveDynamicInputParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentRetrospectiveDynamicInputCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentRetrospectiveDynamicInputParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_incident_retrospective_dynamic_input",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}/fields/{field_id}/inputs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentRetrospectiveDynamicInputReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIncidentRetrospectiveDynamicInputCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_incident_retrospective_dynamic_input: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIncidentRetrospectiveField appends a new incident retrospective field to an incident retrospective

Add a new field to an incident retrospective
*/
func (a *Client) CreateIncidentRetrospectiveField(params *CreateIncidentRetrospectiveFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentRetrospectiveFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentRetrospectiveFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_incident_retrospective_field",
		Method:             "PATCH",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}/fields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentRetrospectiveFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIncidentRetrospectiveFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_incident_retrospective_field: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePostMortemReason creates a contributing factor for a retrospective report

Add a new contributing factor to an incident
*/
func (a *Client) CreatePostMortemReason(params *CreatePostMortemReasonParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePostMortemReasonCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePostMortemReasonParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_post_mortem_reason",
		Method:             "POST",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/reasons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePostMortemReasonReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePostMortemReasonCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_post_mortem_reason: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePostMortemReport creates a retrospective report

Create a report
*/
func (a *Client) CreatePostMortemReport(params *CreatePostMortemReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePostMortemReportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePostMortemReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_post_mortem_report",
		Method:             "POST",
		PathPattern:        "/v1/post_mortems/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePostMortemReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePostMortemReportCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_post_mortem_report: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateRetrospectiveTemplate creates a retrospective template

Create a new retrospective template
*/
func (a *Client) CreateRetrospectiveTemplate(params *CreateRetrospectiveTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRetrospectiveTemplateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRetrospectiveTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_retrospective_template",
		Method:             "POST",
		PathPattern:        "/v1/retrospective_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRetrospectiveTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRetrospectiveTemplateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_retrospective_template: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIncidentRetrospectiveDynamicInput removes a dynamic input from a retrospective s dynamic input group field

Delete a dynamic input on a dynamic input group
*/
func (a *Client) DeleteIncidentRetrospectiveDynamicInput(params *DeleteIncidentRetrospectiveDynamicInputParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentRetrospectiveDynamicInputOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIncidentRetrospectiveDynamicInputParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_incident_retrospective_dynamic_input",
		Method:             "DELETE",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}/fields/{field_id}/inputs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIncidentRetrospectiveDynamicInputReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIncidentRetrospectiveDynamicInputOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_incident_retrospective_dynamic_input: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePostMortemReason deletes a contributing factor from a retrospective report

Delete a contributing factor
*/
func (a *Client) DeletePostMortemReason(params *DeletePostMortemReasonParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePostMortemReasonOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePostMortemReasonParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_post_mortem_reason",
		Method:             "DELETE",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/reasons/{reason_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePostMortemReasonReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePostMortemReasonOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_post_mortem_reason: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRetrospectiveTemplate deletes a retrospective template

Delete a single retrospective template
*/
func (a *Client) DeleteRetrospectiveTemplate(params *DeleteRetrospectiveTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRetrospectiveTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRetrospectiveTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_retrospective_template",
		Method:             "DELETE",
		PathPattern:        "/v1/retrospective_templates/{retrospective_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRetrospectiveTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRetrospectiveTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_retrospective_template: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExportIncidentRetrospectives exports an incident s retrospective s

Export incident's retrospective(s) using their templates
*/
func (a *Client) ExportIncidentRetrospectives(params *ExportIncidentRetrospectivesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportIncidentRetrospectivesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportIncidentRetrospectivesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "export_incident_retrospectives",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExportIncidentRetrospectivesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportIncidentRetrospectivesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for export_incident_retrospectives: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIncidentRetrospectiveField gets a retrospective field

Retrieve a field on an incident retrospective
*/
func (a *Client) GetIncidentRetrospectiveField(params *GetIncidentRetrospectiveFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentRetrospectiveFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncidentRetrospectiveFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_incident_retrospective_field",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}/fields/{field_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncidentRetrospectiveFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIncidentRetrospectiveFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_incident_retrospective_field: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPostMortemQuestion gets a retrospective question

Get an incident retrospective question configured to be provided and filled out on each retrospective report.
*/
func (a *Client) GetPostMortemQuestion(params *GetPostMortemQuestionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPostMortemQuestionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPostMortemQuestionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_post_mortem_question",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/questions/{question_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPostMortemQuestionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPostMortemQuestionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_post_mortem_question: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPostMortemReport gets a retrospective report

Get a report
*/
func (a *Client) GetPostMortemReport(params *GetPostMortemReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPostMortemReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPostMortemReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_post_mortem_report",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/reports/{report_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPostMortemReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPostMortemReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_post_mortem_report: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRetrospectiveTemplate gets a retrospective template

Retrieve a single retrospective template by ID
*/
func (a *Client) GetRetrospectiveTemplate(params *GetRetrospectiveTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRetrospectiveTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRetrospectiveTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_retrospective_template",
		Method:             "GET",
		PathPattern:        "/v1/retrospective_templates/{retrospective_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRetrospectiveTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRetrospectiveTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_retrospective_template: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIncidentRetrospectives alls attached retrospectives for an incident

Retrieve retrospectives attached to an incident
*/
func (a *Client) ListIncidentRetrospectives(params *ListIncidentRetrospectivesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentRetrospectivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIncidentRetrospectivesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_incident_retrospectives",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIncidentRetrospectivesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIncidentRetrospectivesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_incident_retrospectives: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPostMortemQuestions lists retrospective questions

List the questions configured to be provided and filled out on each retrospective report.
*/
func (a *Client) ListPostMortemQuestions(params *ListPostMortemQuestionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPostMortemQuestionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPostMortemQuestionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_post_mortem_questions",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/questions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListPostMortemQuestionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPostMortemQuestionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_post_mortem_questions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPostMortemReasons lists contributing factors for a retrospective report

List all contributing factors to an incident
*/
func (a *Client) ListPostMortemReasons(params *ListPostMortemReasonsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPostMortemReasonsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPostMortemReasonsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_post_mortem_reasons",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/reasons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListPostMortemReasonsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPostMortemReasonsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_post_mortem_reasons: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPostMortemReports lists retrospective reports

List all reports
*/
func (a *Client) ListPostMortemReports(params *ListPostMortemReportsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPostMortemReportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPostMortemReportsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_post_mortem_reports",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListPostMortemReportsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPostMortemReportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_post_mortem_reports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRetrospectiveTemplates lists retrospective templates

List all retrospective templates
*/
func (a *Client) ListRetrospectiveTemplates(params *ListRetrospectiveTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRetrospectiveTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRetrospectiveTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_retrospective_templates",
		Method:             "GET",
		PathPattern:        "/v1/retrospective_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRetrospectiveTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRetrospectiveTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_retrospective_templates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRetrospectives lists retrospective reports

List all retrospective reports
*/
func (a *Client) ListRetrospectives(params *ListRetrospectivesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRetrospectivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRetrospectivesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_retrospectives",
		Method:             "GET",
		PathPattern:        "/v1/retrospectives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRetrospectivesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRetrospectivesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_retrospectives: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PublishPostMortemReport publishes a retrospective report

Marks an incident retrospective as published and emails all of the participants in the report the summary
*/
func (a *Client) PublishPostMortemReport(params *PublishPostMortemReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PublishPostMortemReportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublishPostMortemReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "publish_post_mortem_report",
		Method:             "POST",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/publish",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublishPostMortemReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PublishPostMortemReportCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for publish_post_mortem_report: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReorderPostMortemReasons reorders a contributing factor for a retrospective report

Update the order of contributing factors in a retrospective report
*/
func (a *Client) ReorderPostMortemReasons(params *ReorderPostMortemReasonsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReorderPostMortemReasonsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReorderPostMortemReasonsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reorder_post_mortem_reasons",
		Method:             "PUT",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/reasons/order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReorderPostMortemReasonsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReorderPostMortemReasonsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reorder_post_mortem_reasons: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ShareIncidentRetrospectives shares an incident s retrospective

Share incident retrospectives with users or teams
*/
func (a *Client) ShareIncidentRetrospectives(params *ShareIncidentRetrospectivesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShareIncidentRetrospectivesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShareIncidentRetrospectivesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "share_incident_retrospectives",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives/share",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShareIncidentRetrospectivesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShareIncidentRetrospectivesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for share_incident_retrospectives: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIncidentRetrospective updates a retrospective on the incident

Update a retrospective attached to an incident
*/
func (a *Client) UpdateIncidentRetrospective(params *UpdateIncidentRetrospectiveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentRetrospectiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIncidentRetrospectiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_incident_retrospective",
		Method:             "PATCH",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIncidentRetrospectiveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIncidentRetrospectiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_incident_retrospective: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIncidentRetrospectiveField updates the value on a retrospective field

Update retrospective field value
*/
func (a *Client) UpdateIncidentRetrospectiveField(params *UpdateIncidentRetrospectiveFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentRetrospectiveFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIncidentRetrospectiveFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_incident_retrospective_field",
		Method:             "PATCH",
		PathPattern:        "/v1/incidents/{incident_id}/retrospectives/{retrospective_id}/fields/{field_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIncidentRetrospectiveFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIncidentRetrospectiveFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_incident_retrospective_field: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePostMortemField updates a retrospective field

Update a field value on a post mortem report
*/
func (a *Client) UpdatePostMortemField(params *UpdatePostMortemFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePostMortemFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePostMortemFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_post_mortem_field",
		Method:             "PATCH",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/fields/{field_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePostMortemFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePostMortemFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_post_mortem_field: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePostMortemQuestions updates retrospective questions

Update the questions configured to be provided and filled out on future retrospective reports.
*/
func (a *Client) UpdatePostMortemQuestions(params *UpdatePostMortemQuestionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePostMortemQuestionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePostMortemQuestionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_post_mortem_questions",
		Method:             "PUT",
		PathPattern:        "/v1/post_mortems/questions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePostMortemQuestionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePostMortemQuestionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_post_mortem_questions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePostMortemReason updates a contributing factor in a retrospective report

Update a contributing factor
*/
func (a *Client) UpdatePostMortemReason(params *UpdatePostMortemReasonParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePostMortemReasonOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePostMortemReasonParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_post_mortem_reason",
		Method:             "PATCH",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/reasons/{reason_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePostMortemReasonReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePostMortemReasonOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_post_mortem_reason: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePostMortemReport updates a retrospective report

Update a report
*/
func (a *Client) UpdatePostMortemReport(params *UpdatePostMortemReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePostMortemReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePostMortemReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_post_mortem_report",
		Method:             "PATCH",
		PathPattern:        "/v1/post_mortems/reports/{report_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePostMortemReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePostMortemReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_post_mortem_report: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRetrospectiveTemplate updates a retrospective template

Update a single retrospective template
*/
func (a *Client) UpdateRetrospectiveTemplate(params *UpdateRetrospectiveTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRetrospectiveTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRetrospectiveTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_retrospective_template",
		Method:             "PATCH",
		PathPattern:        "/v1/retrospective_templates/{retrospective_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRetrospectiveTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRetrospectiveTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_retrospective_template: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
