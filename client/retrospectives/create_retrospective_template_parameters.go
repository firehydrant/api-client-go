// Code generated by go-swagger; DO NOT EDIT.

package retrospectives

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCreateRetrospectiveTemplateParams creates a new CreateRetrospectiveTemplateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateRetrospectiveTemplateParams() *CreateRetrospectiveTemplateParams {
	return &CreateRetrospectiveTemplateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateRetrospectiveTemplateParamsWithTimeout creates a new CreateRetrospectiveTemplateParams object
// with the ability to set a timeout on a request.
func NewCreateRetrospectiveTemplateParamsWithTimeout(timeout time.Duration) *CreateRetrospectiveTemplateParams {
	return &CreateRetrospectiveTemplateParams{
		timeout: timeout,
	}
}

// NewCreateRetrospectiveTemplateParamsWithContext creates a new CreateRetrospectiveTemplateParams object
// with the ability to set a context for a request.
func NewCreateRetrospectiveTemplateParamsWithContext(ctx context.Context) *CreateRetrospectiveTemplateParams {
	return &CreateRetrospectiveTemplateParams{
		Context: ctx,
	}
}

// NewCreateRetrospectiveTemplateParamsWithHTTPClient creates a new CreateRetrospectiveTemplateParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateRetrospectiveTemplateParamsWithHTTPClient(client *http.Client) *CreateRetrospectiveTemplateParams {
	return &CreateRetrospectiveTemplateParams{
		HTTPClient: client,
	}
}

/*
CreateRetrospectiveTemplateParams contains all the parameters to send to the API endpoint

	for the create retrospective template operation.

	Typically these are written to a http.Request.
*/
type CreateRetrospectiveTemplateParams struct {

	// Description.
	Description string

	// FieldsHelpText.
	FieldsHelpText []string

	// FieldsIsRequired.
	FieldsIsRequired []bool

	// FieldsLabel.
	FieldsLabel []string

	// FieldsPermissibleValues.
	FieldsPermissibleValues []string

	// FieldsSchema.
	FieldsSchema []string

	// FieldsType.
	FieldsType []string

	// IsDefault.
	IsDefault *bool

	// Name.
	Name string

	// SectionsElements.
	SectionsElements []string

	// SectionsSlug.
	SectionsSlug []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create retrospective template params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateRetrospectiveTemplateParams) WithDefaults() *CreateRetrospectiveTemplateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create retrospective template params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateRetrospectiveTemplateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) WithTimeout(timeout time.Duration) *CreateRetrospectiveTemplateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) WithContext(ctx context.Context) *CreateRetrospectiveTemplateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) WithHTTPClient(client *http.Client) *CreateRetrospectiveTemplateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDescription adds the description to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) WithDescription(description string) *CreateRetrospectiveTemplateParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) SetDescription(description string) {
	o.Description = description
}

// WithFieldsHelpText adds the fieldsHelpText to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) WithFieldsHelpText(fieldsHelpText []string) *CreateRetrospectiveTemplateParams {
	o.SetFieldsHelpText(fieldsHelpText)
	return o
}

// SetFieldsHelpText adds the fieldsHelpText to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) SetFieldsHelpText(fieldsHelpText []string) {
	o.FieldsHelpText = fieldsHelpText
}

// WithFieldsIsRequired adds the fieldsIsRequired to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) WithFieldsIsRequired(fieldsIsRequired []bool) *CreateRetrospectiveTemplateParams {
	o.SetFieldsIsRequired(fieldsIsRequired)
	return o
}

// SetFieldsIsRequired adds the fieldsIsRequired to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) SetFieldsIsRequired(fieldsIsRequired []bool) {
	o.FieldsIsRequired = fieldsIsRequired
}

// WithFieldsLabel adds the fieldsLabel to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) WithFieldsLabel(fieldsLabel []string) *CreateRetrospectiveTemplateParams {
	o.SetFieldsLabel(fieldsLabel)
	return o
}

// SetFieldsLabel adds the fieldsLabel to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) SetFieldsLabel(fieldsLabel []string) {
	o.FieldsLabel = fieldsLabel
}

// WithFieldsPermissibleValues adds the fieldsPermissibleValues to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) WithFieldsPermissibleValues(fieldsPermissibleValues []string) *CreateRetrospectiveTemplateParams {
	o.SetFieldsPermissibleValues(fieldsPermissibleValues)
	return o
}

// SetFieldsPermissibleValues adds the fieldsPermissibleValues to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) SetFieldsPermissibleValues(fieldsPermissibleValues []string) {
	o.FieldsPermissibleValues = fieldsPermissibleValues
}

// WithFieldsSchema adds the fieldsSchema to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) WithFieldsSchema(fieldsSchema []string) *CreateRetrospectiveTemplateParams {
	o.SetFieldsSchema(fieldsSchema)
	return o
}

// SetFieldsSchema adds the fieldsSchema to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) SetFieldsSchema(fieldsSchema []string) {
	o.FieldsSchema = fieldsSchema
}

// WithFieldsType adds the fieldsType to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) WithFieldsType(fieldsType []string) *CreateRetrospectiveTemplateParams {
	o.SetFieldsType(fieldsType)
	return o
}

// SetFieldsType adds the fieldsType to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) SetFieldsType(fieldsType []string) {
	o.FieldsType = fieldsType
}

// WithIsDefault adds the isDefault to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) WithIsDefault(isDefault *bool) *CreateRetrospectiveTemplateParams {
	o.SetIsDefault(isDefault)
	return o
}

// SetIsDefault adds the isDefault to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) SetIsDefault(isDefault *bool) {
	o.IsDefault = isDefault
}

// WithName adds the name to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) WithName(name string) *CreateRetrospectiveTemplateParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) SetName(name string) {
	o.Name = name
}

// WithSectionsElements adds the sectionsElements to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) WithSectionsElements(sectionsElements []string) *CreateRetrospectiveTemplateParams {
	o.SetSectionsElements(sectionsElements)
	return o
}

// SetSectionsElements adds the sectionsElements to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) SetSectionsElements(sectionsElements []string) {
	o.SectionsElements = sectionsElements
}

// WithSectionsSlug adds the sectionsSlug to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) WithSectionsSlug(sectionsSlug []string) *CreateRetrospectiveTemplateParams {
	o.SetSectionsSlug(sectionsSlug)
	return o
}

// SetSectionsSlug adds the sectionsSlug to the create retrospective template params
func (o *CreateRetrospectiveTemplateParams) SetSectionsSlug(sectionsSlug []string) {
	o.SectionsSlug = sectionsSlug
}

// WriteToRequest writes these params to a swagger request
func (o *CreateRetrospectiveTemplateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param description
	frDescription := o.Description
	fDescription := frDescription
	if fDescription != "" {
		if err := r.SetFormParam("description", fDescription); err != nil {
			return err
		}
	}

	if o.FieldsHelpText != nil {

		// binding items for fields[help_text]
		joinedFieldsHelpText := o.bindParamFieldsHelpText(reg)

		// form array param fields[help_text]
		if err := r.SetFormParam("fields[help_text]", joinedFieldsHelpText...); err != nil {
			return err
		}
	}

	if o.FieldsIsRequired != nil {

		// binding items for fields[is_required]
		joinedFieldsIsRequired := o.bindParamFieldsIsRequired(reg)

		// form array param fields[is_required]
		if err := r.SetFormParam("fields[is_required]", joinedFieldsIsRequired...); err != nil {
			return err
		}
	}

	if o.FieldsLabel != nil {

		// binding items for fields[label]
		joinedFieldsLabel := o.bindParamFieldsLabel(reg)

		// form array param fields[label]
		if err := r.SetFormParam("fields[label]", joinedFieldsLabel...); err != nil {
			return err
		}
	}

	if o.FieldsPermissibleValues != nil {

		// binding items for fields[permissible_values]
		joinedFieldsPermissibleValues := o.bindParamFieldsPermissibleValues(reg)

		// form array param fields[permissible_values]
		if err := r.SetFormParam("fields[permissible_values]", joinedFieldsPermissibleValues...); err != nil {
			return err
		}
	}

	if o.FieldsSchema != nil {

		// binding items for fields[schema]
		joinedFieldsSchema := o.bindParamFieldsSchema(reg)

		// form array param fields[schema]
		if err := r.SetFormParam("fields[schema]", joinedFieldsSchema...); err != nil {
			return err
		}
	}

	if o.FieldsType != nil {

		// binding items for fields[type]
		joinedFieldsType := o.bindParamFieldsType(reg)

		// form array param fields[type]
		if err := r.SetFormParam("fields[type]", joinedFieldsType...); err != nil {
			return err
		}
	}

	if o.IsDefault != nil {

		// form param is_default
		var frIsDefault bool
		if o.IsDefault != nil {
			frIsDefault = *o.IsDefault
		}
		fIsDefault := swag.FormatBool(frIsDefault)
		if fIsDefault != "" {
			if err := r.SetFormParam("is_default", fIsDefault); err != nil {
				return err
			}
		}
	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	if o.SectionsElements != nil {

		// binding items for sections[elements]
		joinedSectionsElements := o.bindParamSectionsElements(reg)

		// form array param sections[elements]
		if err := r.SetFormParam("sections[elements]", joinedSectionsElements...); err != nil {
			return err
		}
	}

	if o.SectionsSlug != nil {

		// binding items for sections[slug]
		joinedSectionsSlug := o.bindParamSectionsSlug(reg)

		// form array param sections[slug]
		if err := r.SetFormParam("sections[slug]", joinedSectionsSlug...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCreateRetrospectiveTemplate binds the parameter fields[help_text]
func (o *CreateRetrospectiveTemplateParams) bindParamFieldsHelpText(formats strfmt.Registry) []string {
	fieldsHelpTextIR := o.FieldsHelpText

	var fieldsHelpTextIC []string
	for _, fieldsHelpTextIIR := range fieldsHelpTextIR { // explode []string

		fieldsHelpTextIIV := fieldsHelpTextIIR // string as string
		fieldsHelpTextIC = append(fieldsHelpTextIC, fieldsHelpTextIIV)
	}

	// items.CollectionFormat: ""
	fieldsHelpTextIS := swag.JoinByFormat(fieldsHelpTextIC, "")

	return fieldsHelpTextIS
}

// bindParamCreateRetrospectiveTemplate binds the parameter fields[is_required]
func (o *CreateRetrospectiveTemplateParams) bindParamFieldsIsRequired(formats strfmt.Registry) []string {
	fieldsIsRequiredIR := o.FieldsIsRequired

	var fieldsIsRequiredIC []string
	for _, fieldsIsRequiredIIR := range fieldsIsRequiredIR { // explode []bool

		fieldsIsRequiredIIV := swag.FormatBool(fieldsIsRequiredIIR) // bool as string
		fieldsIsRequiredIC = append(fieldsIsRequiredIC, fieldsIsRequiredIIV)
	}

	// items.CollectionFormat: ""
	fieldsIsRequiredIS := swag.JoinByFormat(fieldsIsRequiredIC, "")

	return fieldsIsRequiredIS
}

// bindParamCreateRetrospectiveTemplate binds the parameter fields[label]
func (o *CreateRetrospectiveTemplateParams) bindParamFieldsLabel(formats strfmt.Registry) []string {
	fieldsLabelIR := o.FieldsLabel

	var fieldsLabelIC []string
	for _, fieldsLabelIIR := range fieldsLabelIR { // explode []string

		fieldsLabelIIV := fieldsLabelIIR // string as string
		fieldsLabelIC = append(fieldsLabelIC, fieldsLabelIIV)
	}

	// items.CollectionFormat: ""
	fieldsLabelIS := swag.JoinByFormat(fieldsLabelIC, "")

	return fieldsLabelIS
}

// bindParamCreateRetrospectiveTemplate binds the parameter fields[permissible_values]
func (o *CreateRetrospectiveTemplateParams) bindParamFieldsPermissibleValues(formats strfmt.Registry) []string {
	fieldsPermissibleValuesIR := o.FieldsPermissibleValues

	var fieldsPermissibleValuesIC []string
	for _, fieldsPermissibleValuesIIR := range fieldsPermissibleValuesIR { // explode []string

		fieldsPermissibleValuesIIV := fieldsPermissibleValuesIIR // string as string
		fieldsPermissibleValuesIC = append(fieldsPermissibleValuesIC, fieldsPermissibleValuesIIV)
	}

	// items.CollectionFormat: ""
	fieldsPermissibleValuesIS := swag.JoinByFormat(fieldsPermissibleValuesIC, "")

	return fieldsPermissibleValuesIS
}

// bindParamCreateRetrospectiveTemplate binds the parameter fields[schema]
func (o *CreateRetrospectiveTemplateParams) bindParamFieldsSchema(formats strfmt.Registry) []string {
	fieldsSchemaIR := o.FieldsSchema

	var fieldsSchemaIC []string
	for _, fieldsSchemaIIR := range fieldsSchemaIR { // explode []string

		fieldsSchemaIIV := fieldsSchemaIIR // string as string
		fieldsSchemaIC = append(fieldsSchemaIC, fieldsSchemaIIV)
	}

	// items.CollectionFormat: ""
	fieldsSchemaIS := swag.JoinByFormat(fieldsSchemaIC, "")

	return fieldsSchemaIS
}

// bindParamCreateRetrospectiveTemplate binds the parameter fields[type]
func (o *CreateRetrospectiveTemplateParams) bindParamFieldsType(formats strfmt.Registry) []string {
	fieldsTypeIR := o.FieldsType

	var fieldsTypeIC []string
	for _, fieldsTypeIIR := range fieldsTypeIR { // explode []string

		fieldsTypeIIV := fieldsTypeIIR // string as string
		fieldsTypeIC = append(fieldsTypeIC, fieldsTypeIIV)
	}

	// items.CollectionFormat: ""
	fieldsTypeIS := swag.JoinByFormat(fieldsTypeIC, "")

	return fieldsTypeIS
}

// bindParamCreateRetrospectiveTemplate binds the parameter sections[elements]
func (o *CreateRetrospectiveTemplateParams) bindParamSectionsElements(formats strfmt.Registry) []string {
	sectionsElementsIR := o.SectionsElements

	var sectionsElementsIC []string
	for _, sectionsElementsIIR := range sectionsElementsIR { // explode []string

		sectionsElementsIIV := sectionsElementsIIR // string as string
		sectionsElementsIC = append(sectionsElementsIC, sectionsElementsIIV)
	}

	// items.CollectionFormat: ""
	sectionsElementsIS := swag.JoinByFormat(sectionsElementsIC, "")

	return sectionsElementsIS
}

// bindParamCreateRetrospectiveTemplate binds the parameter sections[slug]
func (o *CreateRetrospectiveTemplateParams) bindParamSectionsSlug(formats strfmt.Registry) []string {
	sectionsSlugIR := o.SectionsSlug

	var sectionsSlugIC []string
	for _, sectionsSlugIIR := range sectionsSlugIR { // explode []string

		sectionsSlugIIV := sectionsSlugIIR // string as string
		sectionsSlugIC = append(sectionsSlugIC, sectionsSlugIIV)
	}

	// items.CollectionFormat: ""
	sectionsSlugIS := swag.JoinByFormat(sectionsSlugIC, "")

	return sectionsSlugIS
}
