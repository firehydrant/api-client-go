// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/firehydrant/api-client-go/models"
)

// NewUpdateIncidentChangeEventParams creates a new UpdateIncidentChangeEventParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateIncidentChangeEventParams() *UpdateIncidentChangeEventParams {
	return &UpdateIncidentChangeEventParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateIncidentChangeEventParamsWithTimeout creates a new UpdateIncidentChangeEventParams object
// with the ability to set a timeout on a request.
func NewUpdateIncidentChangeEventParamsWithTimeout(timeout time.Duration) *UpdateIncidentChangeEventParams {
	return &UpdateIncidentChangeEventParams{
		timeout: timeout,
	}
}

// NewUpdateIncidentChangeEventParamsWithContext creates a new UpdateIncidentChangeEventParams object
// with the ability to set a context for a request.
func NewUpdateIncidentChangeEventParamsWithContext(ctx context.Context) *UpdateIncidentChangeEventParams {
	return &UpdateIncidentChangeEventParams{
		Context: ctx,
	}
}

// NewUpdateIncidentChangeEventParamsWithHTTPClient creates a new UpdateIncidentChangeEventParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateIncidentChangeEventParamsWithHTTPClient(client *http.Client) *UpdateIncidentChangeEventParams {
	return &UpdateIncidentChangeEventParams{
		HTTPClient: client,
	}
}

/*
UpdateIncidentChangeEventParams contains all the parameters to send to the API endpoint

	for the update incident change event operation.

	Typically these are written to a http.Request.
*/
type UpdateIncidentChangeEventParams struct {

	// IncidentID.
	IncidentID string

	// RelatedChangeEventID.
	RelatedChangeEventID string

	// UpdateIncidentChangeEvent.
	UpdateIncidentChangeEvent *models.UpdateIncidentChangeEvent

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update incident change event params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateIncidentChangeEventParams) WithDefaults() *UpdateIncidentChangeEventParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update incident change event params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateIncidentChangeEventParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update incident change event params
func (o *UpdateIncidentChangeEventParams) WithTimeout(timeout time.Duration) *UpdateIncidentChangeEventParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update incident change event params
func (o *UpdateIncidentChangeEventParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update incident change event params
func (o *UpdateIncidentChangeEventParams) WithContext(ctx context.Context) *UpdateIncidentChangeEventParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update incident change event params
func (o *UpdateIncidentChangeEventParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update incident change event params
func (o *UpdateIncidentChangeEventParams) WithHTTPClient(client *http.Client) *UpdateIncidentChangeEventParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update incident change event params
func (o *UpdateIncidentChangeEventParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncidentID adds the incidentID to the update incident change event params
func (o *UpdateIncidentChangeEventParams) WithIncidentID(incidentID string) *UpdateIncidentChangeEventParams {
	o.SetIncidentID(incidentID)
	return o
}

// SetIncidentID adds the incidentId to the update incident change event params
func (o *UpdateIncidentChangeEventParams) SetIncidentID(incidentID string) {
	o.IncidentID = incidentID
}

// WithRelatedChangeEventID adds the relatedChangeEventID to the update incident change event params
func (o *UpdateIncidentChangeEventParams) WithRelatedChangeEventID(relatedChangeEventID string) *UpdateIncidentChangeEventParams {
	o.SetRelatedChangeEventID(relatedChangeEventID)
	return o
}

// SetRelatedChangeEventID adds the relatedChangeEventId to the update incident change event params
func (o *UpdateIncidentChangeEventParams) SetRelatedChangeEventID(relatedChangeEventID string) {
	o.RelatedChangeEventID = relatedChangeEventID
}

// WithUpdateIncidentChangeEvent adds the updateIncidentChangeEvent to the update incident change event params
func (o *UpdateIncidentChangeEventParams) WithUpdateIncidentChangeEvent(updateIncidentChangeEvent *models.UpdateIncidentChangeEvent) *UpdateIncidentChangeEventParams {
	o.SetUpdateIncidentChangeEvent(updateIncidentChangeEvent)
	return o
}

// SetUpdateIncidentChangeEvent adds the updateIncidentChangeEvent to the update incident change event params
func (o *UpdateIncidentChangeEventParams) SetUpdateIncidentChangeEvent(updateIncidentChangeEvent *models.UpdateIncidentChangeEvent) {
	o.UpdateIncidentChangeEvent = updateIncidentChangeEvent
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateIncidentChangeEventParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param incident_id
	if err := r.SetPathParam("incident_id", o.IncidentID); err != nil {
		return err
	}

	// path param related_change_event_id
	if err := r.SetPathParam("related_change_event_id", o.RelatedChangeEventID); err != nil {
		return err
	}
	if o.UpdateIncidentChangeEvent != nil {
		if err := r.SetBodyParam(o.UpdateIncidentChangeEvent); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
