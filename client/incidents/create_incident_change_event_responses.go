// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/firehydrant/api-client-go/models"
)

// CreateIncidentChangeEventReader is a Reader for the CreateIncidentChangeEvent structure.
type CreateIncidentChangeEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateIncidentChangeEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateIncidentChangeEventCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateIncidentChangeEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateIncidentChangeEventConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateIncidentChangeEventCreated creates a CreateIncidentChangeEventCreated with default headers values
func NewCreateIncidentChangeEventCreated() *CreateIncidentChangeEventCreated {
	return &CreateIncidentChangeEventCreated{}
}

/*
CreateIncidentChangeEventCreated describes a response with status code 201, with default header values.

Add a related change to an incident. Changes added to an incident can be causes, fixes, or suspects. To remove a change from an incident, the type field should be set to dismissed.
*/
type CreateIncidentChangeEventCreated struct {
	Payload *models.IncidentsRelatedChangeEventEntity
}

// IsSuccess returns true when this create incident change event created response has a 2xx status code
func (o *CreateIncidentChangeEventCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create incident change event created response has a 3xx status code
func (o *CreateIncidentChangeEventCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create incident change event created response has a 4xx status code
func (o *CreateIncidentChangeEventCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create incident change event created response has a 5xx status code
func (o *CreateIncidentChangeEventCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create incident change event created response a status code equal to that given
func (o *CreateIncidentChangeEventCreated) IsCode(code int) bool {
	return code == 201
}

func (o *CreateIncidentChangeEventCreated) Error() string {
	return fmt.Sprintf("[POST /v1/incidents/{incident_id}/related_change_events][%d] createIncidentChangeEventCreated  %+v", 201, o.Payload)
}

func (o *CreateIncidentChangeEventCreated) String() string {
	return fmt.Sprintf("[POST /v1/incidents/{incident_id}/related_change_events][%d] createIncidentChangeEventCreated  %+v", 201, o.Payload)
}

func (o *CreateIncidentChangeEventCreated) GetPayload() *models.IncidentsRelatedChangeEventEntity {
	return o.Payload
}

func (o *CreateIncidentChangeEventCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IncidentsRelatedChangeEventEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIncidentChangeEventBadRequest creates a CreateIncidentChangeEventBadRequest with default headers values
func NewCreateIncidentChangeEventBadRequest() *CreateIncidentChangeEventBadRequest {
	return &CreateIncidentChangeEventBadRequest{}
}

/*
CreateIncidentChangeEventBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateIncidentChangeEventBadRequest struct {
	Payload *models.ErrorEntity
}

// IsSuccess returns true when this create incident change event bad request response has a 2xx status code
func (o *CreateIncidentChangeEventBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create incident change event bad request response has a 3xx status code
func (o *CreateIncidentChangeEventBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create incident change event bad request response has a 4xx status code
func (o *CreateIncidentChangeEventBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create incident change event bad request response has a 5xx status code
func (o *CreateIncidentChangeEventBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create incident change event bad request response a status code equal to that given
func (o *CreateIncidentChangeEventBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateIncidentChangeEventBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/incidents/{incident_id}/related_change_events][%d] createIncidentChangeEventBadRequest  %+v", 400, o.Payload)
}

func (o *CreateIncidentChangeEventBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/incidents/{incident_id}/related_change_events][%d] createIncidentChangeEventBadRequest  %+v", 400, o.Payload)
}

func (o *CreateIncidentChangeEventBadRequest) GetPayload() *models.ErrorEntity {
	return o.Payload
}

func (o *CreateIncidentChangeEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIncidentChangeEventConflict creates a CreateIncidentChangeEventConflict with default headers values
func NewCreateIncidentChangeEventConflict() *CreateIncidentChangeEventConflict {
	return &CreateIncidentChangeEventConflict{}
}

/*
CreateIncidentChangeEventConflict describes a response with status code 409, with default header values.

Already Added
*/
type CreateIncidentChangeEventConflict struct {
	Payload *models.ErrorEntity
}

// IsSuccess returns true when this create incident change event conflict response has a 2xx status code
func (o *CreateIncidentChangeEventConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create incident change event conflict response has a 3xx status code
func (o *CreateIncidentChangeEventConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create incident change event conflict response has a 4xx status code
func (o *CreateIncidentChangeEventConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create incident change event conflict response has a 5xx status code
func (o *CreateIncidentChangeEventConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create incident change event conflict response a status code equal to that given
func (o *CreateIncidentChangeEventConflict) IsCode(code int) bool {
	return code == 409
}

func (o *CreateIncidentChangeEventConflict) Error() string {
	return fmt.Sprintf("[POST /v1/incidents/{incident_id}/related_change_events][%d] createIncidentChangeEventConflict  %+v", 409, o.Payload)
}

func (o *CreateIncidentChangeEventConflict) String() string {
	return fmt.Sprintf("[POST /v1/incidents/{incident_id}/related_change_events][%d] createIncidentChangeEventConflict  %+v", 409, o.Payload)
}

func (o *CreateIncidentChangeEventConflict) GetPayload() *models.ErrorEntity {
	return o.Payload
}

func (o *CreateIncidentChangeEventConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
