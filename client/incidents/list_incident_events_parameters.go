// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListIncidentEventsParams creates a new ListIncidentEventsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListIncidentEventsParams() *ListIncidentEventsParams {
	return &ListIncidentEventsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListIncidentEventsParamsWithTimeout creates a new ListIncidentEventsParams object
// with the ability to set a timeout on a request.
func NewListIncidentEventsParamsWithTimeout(timeout time.Duration) *ListIncidentEventsParams {
	return &ListIncidentEventsParams{
		timeout: timeout,
	}
}

// NewListIncidentEventsParamsWithContext creates a new ListIncidentEventsParams object
// with the ability to set a context for a request.
func NewListIncidentEventsParamsWithContext(ctx context.Context) *ListIncidentEventsParams {
	return &ListIncidentEventsParams{
		Context: ctx,
	}
}

// NewListIncidentEventsParamsWithHTTPClient creates a new ListIncidentEventsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListIncidentEventsParamsWithHTTPClient(client *http.Client) *ListIncidentEventsParams {
	return &ListIncidentEventsParams{
		HTTPClient: client,
	}
}

/*
ListIncidentEventsParams contains all the parameters to send to the API endpoint

	for the list incident events operation.

	Typically these are written to a http.Request.
*/
type ListIncidentEventsParams struct {

	// IncidentID.
	IncidentID string

	// Page.
	//
	// Format: int32
	Page *int32

	// PerPage.
	//
	// Format: int32
	PerPage *int32

	/* Types.

	    A comma separated list of types of events to filter by. Possible values are:
	- `add_task_list`: Task list was added
	- `alert_event`: Someone was paged or took action on a linked alert
	- `alert_linked`: An alert was linked to the incident
	- `bulk_milestone_update`: When a milestone change occurs with no other changes
	- `bulk_update`: When an incident note/update is posted or when impacted components are updated. If other changes occur together with either of these changes (e.g., milestone change), they are all bundled together into a bulk_update
	- `change_type`: Updates to associated change events
	- `chat_message`: Any chat message event in a linked chat app like Slack or MS Teams
	- `children_changed`: When adding or updating child related incidents
	- `external_link`: When an external link is added or updated
	- `general_update`: Currently only describes Runbook stoppage events
	- `generic_chat_message`: When an event or message is manually added to the timeline via the web UI or API
	- `incident_attachment`: When attachments or files are added to the timeline
	- `generic_resource_change`: Any changes to individual fields within the incident, including custom fields
	- `incident_restriction`: When an incident is converted to private
	- `incident_status`: Only used when an incident starts and changes to an `active` state
	- `note`: When a message is posted to a status page directly and not via `/fh update`
	- `role_update`: Any updates to assigned roles
	- `runbook_attachment`: Any updates to a runbook
	- `runbook_step_execution_update`: Any Runbook step events
	- `task_update`: Task update events
	- `team_assignment`: Team assignment events
	- `ticket_update`: Updates to incident and follow-up tickets
	*/
	Types *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list incident events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListIncidentEventsParams) WithDefaults() *ListIncidentEventsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list incident events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListIncidentEventsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list incident events params
func (o *ListIncidentEventsParams) WithTimeout(timeout time.Duration) *ListIncidentEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list incident events params
func (o *ListIncidentEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list incident events params
func (o *ListIncidentEventsParams) WithContext(ctx context.Context) *ListIncidentEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list incident events params
func (o *ListIncidentEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list incident events params
func (o *ListIncidentEventsParams) WithHTTPClient(client *http.Client) *ListIncidentEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list incident events params
func (o *ListIncidentEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncidentID adds the incidentID to the list incident events params
func (o *ListIncidentEventsParams) WithIncidentID(incidentID string) *ListIncidentEventsParams {
	o.SetIncidentID(incidentID)
	return o
}

// SetIncidentID adds the incidentId to the list incident events params
func (o *ListIncidentEventsParams) SetIncidentID(incidentID string) {
	o.IncidentID = incidentID
}

// WithPage adds the page to the list incident events params
func (o *ListIncidentEventsParams) WithPage(page *int32) *ListIncidentEventsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list incident events params
func (o *ListIncidentEventsParams) SetPage(page *int32) {
	o.Page = page
}

// WithPerPage adds the perPage to the list incident events params
func (o *ListIncidentEventsParams) WithPerPage(perPage *int32) *ListIncidentEventsParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the list incident events params
func (o *ListIncidentEventsParams) SetPerPage(perPage *int32) {
	o.PerPage = perPage
}

// WithTypes adds the types to the list incident events params
func (o *ListIncidentEventsParams) WithTypes(types *string) *ListIncidentEventsParams {
	o.SetTypes(types)
	return o
}

// SetTypes adds the types to the list incident events params
func (o *ListIncidentEventsParams) SetTypes(types *string) {
	o.Types = types
}

// WriteToRequest writes these params to a swagger request
func (o *ListIncidentEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param incident_id
	if err := r.SetPathParam("incident_id", o.IncidentID); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int32

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt32(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.Types != nil {

		// query param types
		var qrTypes string

		if o.Types != nil {
			qrTypes = *o.Types
		}
		qTypes := qrTypes
		if qTypes != "" {

			if err := r.SetQueryParam("types", qTypes); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
