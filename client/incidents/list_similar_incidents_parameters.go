// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListSimilarIncidentsParams creates a new ListSimilarIncidentsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListSimilarIncidentsParams() *ListSimilarIncidentsParams {
	return &ListSimilarIncidentsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListSimilarIncidentsParamsWithTimeout creates a new ListSimilarIncidentsParams object
// with the ability to set a timeout on a request.
func NewListSimilarIncidentsParamsWithTimeout(timeout time.Duration) *ListSimilarIncidentsParams {
	return &ListSimilarIncidentsParams{
		timeout: timeout,
	}
}

// NewListSimilarIncidentsParamsWithContext creates a new ListSimilarIncidentsParams object
// with the ability to set a context for a request.
func NewListSimilarIncidentsParamsWithContext(ctx context.Context) *ListSimilarIncidentsParams {
	return &ListSimilarIncidentsParams{
		Context: ctx,
	}
}

// NewListSimilarIncidentsParamsWithHTTPClient creates a new ListSimilarIncidentsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListSimilarIncidentsParamsWithHTTPClient(client *http.Client) *ListSimilarIncidentsParams {
	return &ListSimilarIncidentsParams{
		HTTPClient: client,
	}
}

/*
ListSimilarIncidentsParams contains all the parameters to send to the API endpoint

	for the list similar incidents operation.

	Typically these are written to a http.Request.
*/
type ListSimilarIncidentsParams struct {

	// IncidentID.
	IncidentID string

	// Limit.
	//
	// Format: int32
	// Default: 5
	Limit *int32

	// Threshold.
	//
	// Format: float
	// Default: 0.2
	Threshold *float32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list similar incidents params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListSimilarIncidentsParams) WithDefaults() *ListSimilarIncidentsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list similar incidents params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListSimilarIncidentsParams) SetDefaults() {
	var (
		limitDefault = int32(5)

		thresholdDefault = float32(0.2)
	)

	val := ListSimilarIncidentsParams{
		Limit:     &limitDefault,
		Threshold: &thresholdDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list similar incidents params
func (o *ListSimilarIncidentsParams) WithTimeout(timeout time.Duration) *ListSimilarIncidentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list similar incidents params
func (o *ListSimilarIncidentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list similar incidents params
func (o *ListSimilarIncidentsParams) WithContext(ctx context.Context) *ListSimilarIncidentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list similar incidents params
func (o *ListSimilarIncidentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list similar incidents params
func (o *ListSimilarIncidentsParams) WithHTTPClient(client *http.Client) *ListSimilarIncidentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list similar incidents params
func (o *ListSimilarIncidentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncidentID adds the incidentID to the list similar incidents params
func (o *ListSimilarIncidentsParams) WithIncidentID(incidentID string) *ListSimilarIncidentsParams {
	o.SetIncidentID(incidentID)
	return o
}

// SetIncidentID adds the incidentId to the list similar incidents params
func (o *ListSimilarIncidentsParams) SetIncidentID(incidentID string) {
	o.IncidentID = incidentID
}

// WithLimit adds the limit to the list similar incidents params
func (o *ListSimilarIncidentsParams) WithLimit(limit *int32) *ListSimilarIncidentsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list similar incidents params
func (o *ListSimilarIncidentsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithThreshold adds the threshold to the list similar incidents params
func (o *ListSimilarIncidentsParams) WithThreshold(threshold *float32) *ListSimilarIncidentsParams {
	o.SetThreshold(threshold)
	return o
}

// SetThreshold adds the threshold to the list similar incidents params
func (o *ListSimilarIncidentsParams) SetThreshold(threshold *float32) {
	o.Threshold = threshold
}

// WriteToRequest writes these params to a swagger request
func (o *ListSimilarIncidentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param incident_id
	if err := r.SetPathParam("incident_id", o.IncidentID); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Threshold != nil {

		// query param threshold
		var qrThreshold float32

		if o.Threshold != nil {
			qrThreshold = *o.Threshold
		}
		qThreshold := swag.FormatFloat32(qrThreshold)
		if qThreshold != "" {

			if err := r.SetQueryParam("threshold", qThreshold); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
