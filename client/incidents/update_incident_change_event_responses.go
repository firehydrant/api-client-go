// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/firehydrant/api-client-go/models"
)

// UpdateIncidentChangeEventReader is a Reader for the UpdateIncidentChangeEvent structure.
type UpdateIncidentChangeEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateIncidentChangeEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateIncidentChangeEventOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateIncidentChangeEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateIncidentChangeEventConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateIncidentChangeEventOK creates a UpdateIncidentChangeEventOK with default headers values
func NewUpdateIncidentChangeEventOK() *UpdateIncidentChangeEventOK {
	return &UpdateIncidentChangeEventOK{}
}

/*
UpdateIncidentChangeEventOK describes a response with status code 200, with default header values.

Update a change attached to an incident
*/
type UpdateIncidentChangeEventOK struct {
	Payload *models.IncidentsRelatedChangeEventEntity
}

// IsSuccess returns true when this update incident change event o k response has a 2xx status code
func (o *UpdateIncidentChangeEventOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update incident change event o k response has a 3xx status code
func (o *UpdateIncidentChangeEventOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update incident change event o k response has a 4xx status code
func (o *UpdateIncidentChangeEventOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update incident change event o k response has a 5xx status code
func (o *UpdateIncidentChangeEventOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update incident change event o k response a status code equal to that given
func (o *UpdateIncidentChangeEventOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateIncidentChangeEventOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/incidents/{incident_id}/related_change_events/{related_change_event_id}][%d] updateIncidentChangeEventOK  %+v", 200, o.Payload)
}

func (o *UpdateIncidentChangeEventOK) String() string {
	return fmt.Sprintf("[PATCH /v1/incidents/{incident_id}/related_change_events/{related_change_event_id}][%d] updateIncidentChangeEventOK  %+v", 200, o.Payload)
}

func (o *UpdateIncidentChangeEventOK) GetPayload() *models.IncidentsRelatedChangeEventEntity {
	return o.Payload
}

func (o *UpdateIncidentChangeEventOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IncidentsRelatedChangeEventEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIncidentChangeEventBadRequest creates a UpdateIncidentChangeEventBadRequest with default headers values
func NewUpdateIncidentChangeEventBadRequest() *UpdateIncidentChangeEventBadRequest {
	return &UpdateIncidentChangeEventBadRequest{}
}

/*
UpdateIncidentChangeEventBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateIncidentChangeEventBadRequest struct {
	Payload *models.ErrorEntity
}

// IsSuccess returns true when this update incident change event bad request response has a 2xx status code
func (o *UpdateIncidentChangeEventBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update incident change event bad request response has a 3xx status code
func (o *UpdateIncidentChangeEventBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update incident change event bad request response has a 4xx status code
func (o *UpdateIncidentChangeEventBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update incident change event bad request response has a 5xx status code
func (o *UpdateIncidentChangeEventBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update incident change event bad request response a status code equal to that given
func (o *UpdateIncidentChangeEventBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateIncidentChangeEventBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/incidents/{incident_id}/related_change_events/{related_change_event_id}][%d] updateIncidentChangeEventBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateIncidentChangeEventBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/incidents/{incident_id}/related_change_events/{related_change_event_id}][%d] updateIncidentChangeEventBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateIncidentChangeEventBadRequest) GetPayload() *models.ErrorEntity {
	return o.Payload
}

func (o *UpdateIncidentChangeEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIncidentChangeEventConflict creates a UpdateIncidentChangeEventConflict with default headers values
func NewUpdateIncidentChangeEventConflict() *UpdateIncidentChangeEventConflict {
	return &UpdateIncidentChangeEventConflict{}
}

/*
UpdateIncidentChangeEventConflict describes a response with status code 409, with default header values.

Already Added
*/
type UpdateIncidentChangeEventConflict struct {
	Payload *models.ErrorEntity
}

// IsSuccess returns true when this update incident change event conflict response has a 2xx status code
func (o *UpdateIncidentChangeEventConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update incident change event conflict response has a 3xx status code
func (o *UpdateIncidentChangeEventConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update incident change event conflict response has a 4xx status code
func (o *UpdateIncidentChangeEventConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update incident change event conflict response has a 5xx status code
func (o *UpdateIncidentChangeEventConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update incident change event conflict response a status code equal to that given
func (o *UpdateIncidentChangeEventConflict) IsCode(code int) bool {
	return code == 409
}

func (o *UpdateIncidentChangeEventConflict) Error() string {
	return fmt.Sprintf("[PATCH /v1/incidents/{incident_id}/related_change_events/{related_change_event_id}][%d] updateIncidentChangeEventConflict  %+v", 409, o.Payload)
}

func (o *UpdateIncidentChangeEventConflict) String() string {
	return fmt.Sprintf("[PATCH /v1/incidents/{incident_id}/related_change_events/{related_change_event_id}][%d] updateIncidentChangeEventConflict  %+v", 409, o.Payload)
}

func (o *UpdateIncidentChangeEventConflict) GetPayload() *models.ErrorEntity {
	return o.Payload
}

func (o *UpdateIncidentChangeEventConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
