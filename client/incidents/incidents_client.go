// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new incidents API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for incidents API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BulkUpdateIncidentMilestones(params *BulkUpdateIncidentMilestonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkUpdateIncidentMilestonesOK, error)

	CloseIncident(params *CloseIncidentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloseIncidentOK, error)

	CreateIncident(params *CreateIncidentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentCreated, error)

	CreateIncidentAttachment(params *CreateIncidentAttachmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentAttachmentCreated, error)

	CreateIncidentChangeEvent(params *CreateIncidentChangeEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentChangeEventCreated, error)

	CreateIncidentChatMessage(params *CreateIncidentChatMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentChatMessageCreated, error)

	CreateIncidentImpact(params *CreateIncidentImpactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentImpactCreated, error)

	CreateIncidentLink(params *CreateIncidentLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentLinkCreated, error)

	CreateIncidentNote(params *CreateIncidentNoteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentNoteCreated, error)

	CreateIncidentRoleAssignment(params *CreateIncidentRoleAssignmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentRoleAssignmentCreated, error)

	CreateIncidentStatusPage(params *CreateIncidentStatusPageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentStatusPageCreated, error)

	CreateIncidentTeamAssignment(params *CreateIncidentTeamAssignmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentTeamAssignmentCreated, error)

	CreateScheduledMaintenance(params *CreateScheduledMaintenanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScheduledMaintenanceCreated, error)

	DeleteIncident(params *DeleteIncidentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentOK, error)

	DeleteIncidentChatMessage(params *DeleteIncidentChatMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentChatMessageOK, error)

	DeleteIncidentEvent(params *DeleteIncidentEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentEventOK, error)

	DeleteIncidentImpact(params *DeleteIncidentImpactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentImpactNoContent, error)

	DeleteIncidentLink(params *DeleteIncidentLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentLinkNoContent, error)

	DeleteIncidentRoleAssignment(params *DeleteIncidentRoleAssignmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentRoleAssignmentOK, error)

	DeleteIncidentTeamAssignment(params *DeleteIncidentTeamAssignmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentTeamAssignmentNoContent, error)

	DeleteScheduledMaintenance(params *DeleteScheduledMaintenanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScheduledMaintenanceNoContent, error)

	DeleteTranscriptEntry(params *DeleteTranscriptEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTranscriptEntryOK, error)

	GetAiIncidentSummaryVoteStatus(params *GetAiIncidentSummaryVoteStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAiIncidentSummaryVoteStatusOK, error)

	GetConferenceBridgeTranslation(params *GetConferenceBridgeTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConferenceBridgeTranslationOK, error)

	GetIncident(params *GetIncidentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentOK, error)

	GetIncidentChannel(params *GetIncidentChannelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentChannelOK, error)

	GetIncidentEvent(params *GetIncidentEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentEventOK, error)

	GetIncidentRelationships(params *GetIncidentRelationshipsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentRelationshipsOK, error)

	GetIncidentUser(params *GetIncidentUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentUserOK, error)

	GetScheduledMaintenance(params *GetScheduledMaintenanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduledMaintenanceOK, error)

	ListIncidentAttachments(params *ListIncidentAttachmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentAttachmentsOK, error)

	ListIncidentChangeEvents(params *ListIncidentChangeEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentChangeEventsOK, error)

	ListIncidentConferenceBridges(params *ListIncidentConferenceBridgesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentConferenceBridgesOK, error)

	ListIncidentEvents(params *ListIncidentEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentEventsOK, error)

	ListIncidentImpacts(params *ListIncidentImpactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentImpactsOK, error)

	ListIncidentLinks(params *ListIncidentLinksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentLinksOK, error)

	ListIncidentMilestones(params *ListIncidentMilestonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentMilestonesOK, error)

	ListIncidentRoleAssignments(params *ListIncidentRoleAssignmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentRoleAssignmentsOK, error)

	ListIncidentStatusPages(params *ListIncidentStatusPagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentStatusPagesOK, error)

	ListIncidents(params *ListIncidentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentsOK, error)

	ListScheduledMaintenances(params *ListScheduledMaintenancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListScheduledMaintenancesOK, error)

	ListSimilarIncidents(params *ListSimilarIncidentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSimilarIncidentsOK, error)

	ListTranscriptEntries(params *ListTranscriptEntriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTranscriptEntriesOK, error)

	ResolveIncident(params *ResolveIncidentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResolveIncidentOK, error)

	UnarchiveIncident(params *UnarchiveIncidentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnarchiveIncidentCreated, error)

	UpdateIncident(params *UpdateIncidentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentOK, error)

	UpdateIncidentChangeEvent(params *UpdateIncidentChangeEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentChangeEventOK, error)

	UpdateIncidentChatMessage(params *UpdateIncidentChatMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentChatMessageOK, error)

	UpdateIncidentEvent(params *UpdateIncidentEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentEventOK, error)

	UpdateIncidentImpactPatch(params *UpdateIncidentImpactPatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentImpactPatchOK, error)

	UpdateIncidentImpactPut(params *UpdateIncidentImpactPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentImpactPutOK, error)

	UpdateIncidentLink(params *UpdateIncidentLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentLinkOK, error)

	UpdateIncidentNote(params *UpdateIncidentNoteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentNoteOK, error)

	UpdateScheduledMaintenance(params *UpdateScheduledMaintenanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScheduledMaintenanceOK, error)

	UpdateTranscriptAttribution(params *UpdateTranscriptAttributionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTranscriptAttributionOK, error)

	VoteAiIncidentSummary(params *VoteAiIncidentSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VoteAiIncidentSummaryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	BulkUpdateIncidentMilestones updates milestone times

	Update milestone times in bulk for a given incident. All milestone

times for an incident must occur in chronological order
corresponding to the configured order of milestones. If the result
of this request would cause any milestone(s) to appear out of place,
a 422 response will instead be returned. This includes milestones
not explicitly submitted or updated in this request.
*/
func (a *Client) BulkUpdateIncidentMilestones(params *BulkUpdateIncidentMilestonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkUpdateIncidentMilestonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkUpdateIncidentMilestonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "bulk_update_incident_milestones",
		Method:             "PUT",
		PathPattern:        "/v1/incidents/{incident_id}/milestones/bulk_update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkUpdateIncidentMilestonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkUpdateIncidentMilestonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bulk_update_incident_milestones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloseIncident closes an incident

Closes an incident and optionally close all children
*/
func (a *Client) CloseIncident(params *CloseIncidentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloseIncidentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloseIncidentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "close_incident",
		Method:             "PUT",
		PathPattern:        "/v1/incidents/{incident_id}/close",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloseIncidentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloseIncidentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for close_incident: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIncident creates an incident

Create a new incident
*/
func (a *Client) CreateIncident(params *CreateIncidentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_incident",
		Method:             "POST",
		PathPattern:        "/v1/incidents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIncidentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_incident: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIncidentAttachment adds an attachment to the incident timeline

Allows adding image attachments to an incident
*/
func (a *Client) CreateIncidentAttachment(params *CreateIncidentAttachmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentAttachmentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentAttachmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_incident_attachment",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentAttachmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIncidentAttachmentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_incident_attachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIncidentChangeEvent adds a related change to an incident

Add a related change to an incident. Changes added to an incident can be causes, fixes, or suspects. To remove a change from an incident, the type field should be set to dismissed.
*/
func (a *Client) CreateIncidentChangeEvent(params *CreateIncidentChangeEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentChangeEventCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentChangeEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_incident_change_event",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/related_change_events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentChangeEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIncidentChangeEventCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_incident_change_event: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIncidentChatMessage adds a chat message to an incident

Create a new generic chat message on an incident timeline. These are independent of any specific chat provider.
*/
func (a *Client) CreateIncidentChatMessage(params *CreateIncidentChatMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentChatMessageCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentChatMessageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_incident_chat_message",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/generic_chat_messages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentChatMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIncidentChatMessageCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_incident_chat_message: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIncidentImpact adds impacted infrastructure to an incident

Add impacted infrastructure to an incident
*/
func (a *Client) CreateIncidentImpact(params *CreateIncidentImpactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentImpactCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentImpactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_incident_impact",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/impact/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentImpactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIncidentImpactCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_incident_impact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIncidentLink adds a link to an incident

Allows adding adhoc links to an incident as an attachment
*/
func (a *Client) CreateIncidentLink(params *CreateIncidentLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentLinkCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_incident_link",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIncidentLinkCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_incident_link: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIncidentNote adds a note to an incident

Create a new note on for an incident. The visibility field on a note determines where it gets posted.
*/
func (a *Client) CreateIncidentNote(params *CreateIncidentNoteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentNoteCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentNoteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_incident_note",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/notes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentNoteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIncidentNoteCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_incident_note: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIncidentRoleAssignment assigns a user to an incident

Assign a role to a user for this incident
*/
func (a *Client) CreateIncidentRoleAssignment(params *CreateIncidentRoleAssignmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentRoleAssignmentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentRoleAssignmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_incident_role_assignment",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/role_assignments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentRoleAssignmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIncidentRoleAssignmentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_incident_role_assignment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIncidentStatusPage adds a status page to an incident

Add a status page to an incident.
*/
func (a *Client) CreateIncidentStatusPage(params *CreateIncidentStatusPageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentStatusPageCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentStatusPageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_incident_status_page",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/status_pages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentStatusPageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIncidentStatusPageCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_incident_status_page: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIncidentTeamAssignment assigns a team to an incident

Assign a team for this incident
*/
func (a *Client) CreateIncidentTeamAssignment(params *CreateIncidentTeamAssignmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentTeamAssignmentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentTeamAssignmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_incident_team_assignment",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/team_assignments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentTeamAssignmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIncidentTeamAssignmentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_incident_team_assignment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateScheduledMaintenance creates a scheduled maintenance event

Create a new scheduled maintenance event
*/
func (a *Client) CreateScheduledMaintenance(params *CreateScheduledMaintenanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScheduledMaintenanceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScheduledMaintenanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_scheduled_maintenance",
		Method:             "POST",
		PathPattern:        "/v1/scheduled_maintenances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateScheduledMaintenanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateScheduledMaintenanceCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_scheduled_maintenance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIncident archives an incident

Archives an incident which will hide it from lists and metrics
*/
func (a *Client) DeleteIncident(params *DeleteIncidentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIncidentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_incident",
		Method:             "DELETE",
		PathPattern:        "/v1/incidents/{incident_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIncidentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIncidentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_incident: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIncidentChatMessage deletes a chat message from an incident

Delete an existing generic chat message on an incident.
*/
func (a *Client) DeleteIncidentChatMessage(params *DeleteIncidentChatMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentChatMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIncidentChatMessageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_incident_chat_message",
		Method:             "DELETE",
		PathPattern:        "/v1/incidents/{incident_id}/generic_chat_messages/{message_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIncidentChatMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIncidentChatMessageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_incident_chat_message: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIncidentEvent deletes an incident event

Delete an event for an incident
*/
func (a *Client) DeleteIncidentEvent(params *DeleteIncidentEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIncidentEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_incident_event",
		Method:             "DELETE",
		PathPattern:        "/v1/incidents/{incident_id}/events/{event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIncidentEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIncidentEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_incident_event: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIncidentImpact removes impacted infrastructure from an incident

Remove impacted infrastructure from an incident
*/
func (a *Client) DeleteIncidentImpact(params *DeleteIncidentImpactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentImpactNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIncidentImpactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_incident_impact",
		Method:             "DELETE",
		PathPattern:        "/v1/incidents/{incident_id}/impact/{type}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIncidentImpactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIncidentImpactNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_incident_impact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIncidentLink removes a link from an incident

Remove a link from an incident
*/
func (a *Client) DeleteIncidentLink(params *DeleteIncidentLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentLinkNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIncidentLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_incident_link",
		Method:             "DELETE",
		PathPattern:        "/v1/incidents/{incident_id}/links/{link_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIncidentLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIncidentLinkNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_incident_link: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIncidentRoleAssignment unassigns a user from an incident

Unassign a role from a user
*/
func (a *Client) DeleteIncidentRoleAssignment(params *DeleteIncidentRoleAssignmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentRoleAssignmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIncidentRoleAssignmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_incident_role_assignment",
		Method:             "DELETE",
		PathPattern:        "/v1/incidents/{incident_id}/role_assignments/{role_assignment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIncidentRoleAssignmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIncidentRoleAssignmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_incident_role_assignment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIncidentTeamAssignment unassigns a team from an incident

Unassign a team from an incident
*/
func (a *Client) DeleteIncidentTeamAssignment(params *DeleteIncidentTeamAssignmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentTeamAssignmentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIncidentTeamAssignmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_incident_team_assignment",
		Method:             "DELETE",
		PathPattern:        "/v1/incidents/{incident_id}/team_assignments/{team_assignment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIncidentTeamAssignmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIncidentTeamAssignmentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_incident_team_assignment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteScheduledMaintenance deletes a scheduled maintenance event

Delete a scheduled maintenance event, preventing it from taking place.
*/
func (a *Client) DeleteScheduledMaintenance(params *DeleteScheduledMaintenanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScheduledMaintenanceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScheduledMaintenanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_scheduled_maintenance",
		Method:             "DELETE",
		PathPattern:        "/v1/scheduled_maintenances/{scheduled_maintenance_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScheduledMaintenanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScheduledMaintenanceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_scheduled_maintenance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTranscriptEntry deletes a transcript from an incident

Delete a transcript from an incident
*/
func (a *Client) DeleteTranscriptEntry(params *DeleteTranscriptEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTranscriptEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTranscriptEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_transcript_entry",
		Method:             "DELETE",
		PathPattern:        "/v1/incidents/{incident_id}/transcript/{transcript_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTranscriptEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTranscriptEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_transcript_entry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAiIncidentSummaryVoteStatus gets the current user s vote status for an a i generated incident summary

Get the current user's vote status for an AI-generated incident summary
*/
func (a *Client) GetAiIncidentSummaryVoteStatus(params *GetAiIncidentSummaryVoteStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAiIncidentSummaryVoteStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAiIncidentSummaryVoteStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_ai_incident_summary_vote_status",
		Method:             "GET",
		PathPattern:        "/v1/ai/summarize_incident/{incident_id}/{generated_summary_id}/voted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAiIncidentSummaryVoteStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAiIncidentSummaryVoteStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_ai_incident_summary_vote_status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConferenceBridgeTranslation retrieves the translations for a specific conference bridge

Retrieve the translations for a specific conference bridge
*/
func (a *Client) GetConferenceBridgeTranslation(params *GetConferenceBridgeTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConferenceBridgeTranslationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConferenceBridgeTranslationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_conference_bridge_translation",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/conference_bridges/{id}/translations/{language_code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConferenceBridgeTranslationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConferenceBridgeTranslationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_conference_bridge_translation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIncident gets an incident

Retrieve a single incident from its ID
*/
func (a *Client) GetIncident(params *GetIncidentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncidentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_incident",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncidentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIncidentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_incident: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIncidentChannel gets chat channel information for an incident

Gives chat channel information for the specified incident
*/
func (a *Client) GetIncidentChannel(params *GetIncidentChannelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentChannelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncidentChannelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_incident_channel",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/channel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncidentChannelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIncidentChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_incident_channel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIncidentEvent gets an incident event

Retrieve a single event for an incident
*/
func (a *Client) GetIncidentEvent(params *GetIncidentEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncidentEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_incident_event",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/events/{event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncidentEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIncidentEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_incident_event: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIncidentRelationships lists incident relationships

List any parent/child relationships for an incident
*/
func (a *Client) GetIncidentRelationships(params *GetIncidentRelationshipsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentRelationshipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncidentRelationshipsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_incident_relationships",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/relationships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncidentRelationshipsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIncidentRelationshipsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_incident_relationships: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIncidentUser gets the current user s incident role

Retrieve a user with current roles for an incident
*/
func (a *Client) GetIncidentUser(params *GetIncidentUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncidentUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_incident_user",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/users/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncidentUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIncidentUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_incident_user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScheduledMaintenance gets a scheduled maintenance event

Fetch the details of a scheduled maintenance event.
*/
func (a *Client) GetScheduledMaintenance(params *GetScheduledMaintenanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduledMaintenanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScheduledMaintenanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_scheduled_maintenance",
		Method:             "GET",
		PathPattern:        "/v1/scheduled_maintenances/{scheduled_maintenance_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScheduledMaintenanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScheduledMaintenanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_scheduled_maintenance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIncidentAttachments lists attachments for an incident

List attachments for an incident
*/
func (a *Client) ListIncidentAttachments(params *ListIncidentAttachmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentAttachmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIncidentAttachmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_incident_attachments",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIncidentAttachmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIncidentAttachmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_incident_attachments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIncidentChangeEvents lists related changes on an incident

List related changes that have been attached to an incident
*/
func (a *Client) ListIncidentChangeEvents(params *ListIncidentChangeEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentChangeEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIncidentChangeEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_incident_change_events",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/related_change_events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIncidentChangeEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIncidentChangeEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_incident_change_events: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIncidentConferenceBridges retrieves all conference bridges for an incident

Retrieve all conference bridges for an incident
*/
func (a *Client) ListIncidentConferenceBridges(params *ListIncidentConferenceBridgesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentConferenceBridgesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIncidentConferenceBridgesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_incident_conference_bridges",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/conference_bridges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIncidentConferenceBridgesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIncidentConferenceBridgesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_incident_conference_bridges: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIncidentEvents lists events for an incident

List all events for an incident. An event is a timeline entry. This can be filtered with params to retrieve events of a certain type.
*/
func (a *Client) ListIncidentEvents(params *ListIncidentEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIncidentEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_incident_events",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIncidentEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIncidentEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_incident_events: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIncidentImpacts lists impacted infrastructure for an incident

List impacted infrastructure on an incident by specifying type
*/
func (a *Client) ListIncidentImpacts(params *ListIncidentImpactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentImpactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIncidentImpactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_incident_impacts",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/impact/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIncidentImpactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIncidentImpactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_incident_impacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIncidentLinks lists links on an incident

List all the editable, external incident links attached to an incident
*/
func (a *Client) ListIncidentLinks(params *ListIncidentLinksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentLinksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIncidentLinksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_incident_links",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIncidentLinksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIncidentLinksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_incident_links: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIncidentMilestones lists incident milestones

List times and durations for each milestone on an incident
*/
func (a *Client) ListIncidentMilestones(params *ListIncidentMilestonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentMilestonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIncidentMilestonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_incident_milestones",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/milestones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIncidentMilestonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIncidentMilestonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_incident_milestones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIncidentRoleAssignments lists incident assignees

Retrieve a list of all of the current role assignments for the incident
*/
func (a *Client) ListIncidentRoleAssignments(params *ListIncidentRoleAssignmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentRoleAssignmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIncidentRoleAssignmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_incident_role_assignments",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/role_assignments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIncidentRoleAssignmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIncidentRoleAssignmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_incident_role_assignments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIncidentStatusPages lists status pages for an incident

List status pages that are attached to an incident
*/
func (a *Client) ListIncidentStatusPages(params *ListIncidentStatusPagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentStatusPagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIncidentStatusPagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_incident_status_pages",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/status_pages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIncidentStatusPagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIncidentStatusPagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_incident_status_pages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIncidents lists incidents

List all of the incidents in the organization
*/
func (a *Client) ListIncidents(params *ListIncidentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIncidentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_incidents",
		Method:             "GET",
		PathPattern:        "/v1/incidents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIncidentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIncidentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_incidents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListScheduledMaintenances lists scheduled maintenance events

Lists all scheduled maintenance events
*/
func (a *Client) ListScheduledMaintenances(params *ListScheduledMaintenancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListScheduledMaintenancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListScheduledMaintenancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_scheduled_maintenances",
		Method:             "GET",
		PathPattern:        "/v1/scheduled_maintenances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListScheduledMaintenancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListScheduledMaintenancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_scheduled_maintenances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSimilarIncidents lists similar incidents

Retrieve a list of similar incidents
*/
func (a *Client) ListSimilarIncidents(params *ListSimilarIncidentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSimilarIncidentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSimilarIncidentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_similar_incidents",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/similar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSimilarIncidentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSimilarIncidentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_similar_incidents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTranscriptEntries lists all of the messages in the incident s transcript

Retrieve the transcript for a specific incident
*/
func (a *Client) ListTranscriptEntries(params *ListTranscriptEntriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTranscriptEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTranscriptEntriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_transcript_entries",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/transcript",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTranscriptEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTranscriptEntriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_transcript_entries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResolveIncident resolves an incident

Resolves a currently active incident
*/
func (a *Client) ResolveIncident(params *ResolveIncidentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResolveIncidentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResolveIncidentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resolve_incident",
		Method:             "PUT",
		PathPattern:        "/v1/incidents/{incident_id}/resolve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResolveIncidentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResolveIncidentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resolve_incident: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnarchiveIncident unarchives an incident

Unarchive an incident
*/
func (a *Client) UnarchiveIncident(params *UnarchiveIncidentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnarchiveIncidentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnarchiveIncidentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unarchive_incident",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/unarchive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnarchiveIncidentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnarchiveIncidentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unarchive_incident: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIncident updates an incident

Updates an incident with provided parameters
*/
func (a *Client) UpdateIncident(params *UpdateIncidentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIncidentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_incident",
		Method:             "PATCH",
		PathPattern:        "/v1/incidents/{incident_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIncidentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIncidentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_incident: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIncidentChangeEvent updates a change attached to an incident

Update a change attached to an incident
*/
func (a *Client) UpdateIncidentChangeEvent(params *UpdateIncidentChangeEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentChangeEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIncidentChangeEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_incident_change_event",
		Method:             "PATCH",
		PathPattern:        "/v1/incidents/{incident_id}/related_change_events/{related_change_event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIncidentChangeEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIncidentChangeEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_incident_change_event: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIncidentChatMessage updates a chat message on an incident

Update an existing generic chat message on an incident.
*/
func (a *Client) UpdateIncidentChatMessage(params *UpdateIncidentChatMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentChatMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIncidentChatMessageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_incident_chat_message",
		Method:             "PATCH",
		PathPattern:        "/v1/incidents/{incident_id}/generic_chat_messages/{message_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIncidentChatMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIncidentChatMessageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_incident_chat_message: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIncidentEvent updates an incident event

Update a single event for an incident
*/
func (a *Client) UpdateIncidentEvent(params *UpdateIncidentEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIncidentEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_incident_event",
		Method:             "PATCH",
		PathPattern:        "/v1/incidents/{incident_id}/events/{event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIncidentEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIncidentEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_incident_event: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateIncidentImpactPatch updates impacts for an incident

	Allows updating an incident's impacted infrastructure, with the option to

move the incident into a different milestone and provide a note to update
the incident timeline and any attached status pages. If this method is
requested with the PUT verb, impacts will be completely replaced with the
information in the request body, even if not provided (effectively clearing
all impacts). If this method is requested with the PATCH verb, the provided
impacts will be added or updated, but no impacts will be removed.
*/
func (a *Client) UpdateIncidentImpactPatch(params *UpdateIncidentImpactPatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentImpactPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIncidentImpactPatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_incident_impact_patch",
		Method:             "PATCH",
		PathPattern:        "/v1/incidents/{incident_id}/impact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIncidentImpactPatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIncidentImpactPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_incident_impact_patch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateIncidentImpactPut updates impacts for an incident

	Allows updating an incident's impacted infrastructure, with the option to

move the incident into a different milestone and provide a note to update
the incident timeline and any attached status pages. If this method is
requested with the PUT verb, impacts will be completely replaced with the
information in the request body, even if not provided (effectively clearing
all impacts). If this method is requested with the PATCH verb, the provided
impacts will be added or updated, but no impacts will be removed.
*/
func (a *Client) UpdateIncidentImpactPut(params *UpdateIncidentImpactPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentImpactPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIncidentImpactPutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_incident_impact_put",
		Method:             "PUT",
		PathPattern:        "/v1/incidents/{incident_id}/impact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIncidentImpactPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIncidentImpactPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_incident_impact_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIncidentLink updates the external incident link

Update the external incident link attributes
*/
func (a *Client) UpdateIncidentLink(params *UpdateIncidentLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIncidentLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_incident_link",
		Method:             "PUT",
		PathPattern:        "/v1/incidents/{incident_id}/links/{link_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIncidentLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIncidentLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_incident_link: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIncidentNote updates a note

Updates the body of a note
*/
func (a *Client) UpdateIncidentNote(params *UpdateIncidentNoteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentNoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIncidentNoteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_incident_note",
		Method:             "PATCH",
		PathPattern:        "/v1/incidents/{incident_id}/notes/{note_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIncidentNoteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIncidentNoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_incident_note: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateScheduledMaintenance updates a scheduled maintenance event

Change the conditions of a scheduled maintenance event, including updating any status page announcements of changes.
*/
func (a *Client) UpdateScheduledMaintenance(params *UpdateScheduledMaintenanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScheduledMaintenanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateScheduledMaintenanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_scheduled_maintenance",
		Method:             "PATCH",
		PathPattern:        "/v1/scheduled_maintenances/{scheduled_maintenance_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateScheduledMaintenanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateScheduledMaintenanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_scheduled_maintenance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTranscriptAttribution updates the attribution of a transcript

Update the attribution of a transcript
*/
func (a *Client) UpdateTranscriptAttribution(params *UpdateTranscriptAttributionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTranscriptAttributionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTranscriptAttributionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_transcript_attribution",
		Method:             "PUT",
		PathPattern:        "/v1/incidents/{incident_id}/transcript/attribution",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTranscriptAttributionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTranscriptAttributionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_transcript_attribution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VoteAiIncidentSummary votes on an a i generated incident summary

Vote on an AI-generated incident summary for the current user
*/
func (a *Client) VoteAiIncidentSummary(params *VoteAiIncidentSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VoteAiIncidentSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoteAiIncidentSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "vote_ai_incident_summary",
		Method:             "PUT",
		PathPattern:        "/v1/ai/summarize_incident/{incident_id}/{generated_summary_id}/vote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoteAiIncidentSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoteAiIncidentSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for vote_ai_incident_summary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
