// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/firehydrant/api-client-go/models"
)

// UpdateIncidentImpactPatchReader is a Reader for the UpdateIncidentImpactPatch structure.
type UpdateIncidentImpactPatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateIncidentImpactPatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateIncidentImpactPatchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateIncidentImpactPatchOK creates a UpdateIncidentImpactPatchOK with default headers values
func NewUpdateIncidentImpactPatchOK() *UpdateIncidentImpactPatchOK {
	return &UpdateIncidentImpactPatchOK{}
}

/*
	UpdateIncidentImpactPatchOK describes a response with status code 200, with default header values.

	Allows updating an incident's impacted infrastructure, with the option to

move the incident into a different milestone and provide a note to update
the incident timeline and any attached status pages. If this method is
requested with the PUT verb, impacts will be completely replaced with the
information in the request body, even if not provided (effectively clearing
all impacts). If this method is requested with the PATCH verb, the provided
impacts will be added or updated, but no impacts will be removed.
*/
type UpdateIncidentImpactPatchOK struct {
	Payload *models.IncidentEntity
}

// IsSuccess returns true when this update incident impact patch o k response has a 2xx status code
func (o *UpdateIncidentImpactPatchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update incident impact patch o k response has a 3xx status code
func (o *UpdateIncidentImpactPatchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update incident impact patch o k response has a 4xx status code
func (o *UpdateIncidentImpactPatchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update incident impact patch o k response has a 5xx status code
func (o *UpdateIncidentImpactPatchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update incident impact patch o k response a status code equal to that given
func (o *UpdateIncidentImpactPatchOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateIncidentImpactPatchOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/incidents/{incident_id}/impact][%d] updateIncidentImpactPatchOK  %+v", 200, o.Payload)
}

func (o *UpdateIncidentImpactPatchOK) String() string {
	return fmt.Sprintf("[PATCH /v1/incidents/{incident_id}/impact][%d] updateIncidentImpactPatchOK  %+v", 200, o.Payload)
}

func (o *UpdateIncidentImpactPatchOK) GetPayload() *models.IncidentEntity {
	return o.Payload
}

func (o *UpdateIncidentImpactPatchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IncidentEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
