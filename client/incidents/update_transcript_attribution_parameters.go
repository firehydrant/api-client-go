// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpdateTranscriptAttributionParams creates a new UpdateTranscriptAttributionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateTranscriptAttributionParams() *UpdateTranscriptAttributionParams {
	return &UpdateTranscriptAttributionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateTranscriptAttributionParamsWithTimeout creates a new UpdateTranscriptAttributionParams object
// with the ability to set a timeout on a request.
func NewUpdateTranscriptAttributionParamsWithTimeout(timeout time.Duration) *UpdateTranscriptAttributionParams {
	return &UpdateTranscriptAttributionParams{
		timeout: timeout,
	}
}

// NewUpdateTranscriptAttributionParamsWithContext creates a new UpdateTranscriptAttributionParams object
// with the ability to set a context for a request.
func NewUpdateTranscriptAttributionParamsWithContext(ctx context.Context) *UpdateTranscriptAttributionParams {
	return &UpdateTranscriptAttributionParams{
		Context: ctx,
	}
}

// NewUpdateTranscriptAttributionParamsWithHTTPClient creates a new UpdateTranscriptAttributionParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateTranscriptAttributionParamsWithHTTPClient(client *http.Client) *UpdateTranscriptAttributionParams {
	return &UpdateTranscriptAttributionParams{
		HTTPClient: client,
	}
}

/*
UpdateTranscriptAttributionParams contains all the parameters to send to the API endpoint

	for the update transcript attribution operation.

	Typically these are written to a http.Request.
*/
type UpdateTranscriptAttributionParams struct {

	/* ConferenceBridgeID.

	   The ID of the conference bridge to attribute the transcript to.
	*/
	ConferenceBridgeID *string

	/* FromSpeaker.

	   The speaker to attribute the transcript to.
	*/
	FromSpeaker *string

	/* FromUserID.

	   The user to attribute the transcript to.
	*/
	FromUserID *string

	// IncidentID.
	IncidentID string

	/* ToUserID.

	   The ID of the user to attribute the transcript to.
	*/
	ToUserID string

	/* TranscriptID.

	   The ID of the specific transcript entry to change attribution for.
	*/
	TranscriptID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update transcript attribution params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateTranscriptAttributionParams) WithDefaults() *UpdateTranscriptAttributionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update transcript attribution params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateTranscriptAttributionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) WithTimeout(timeout time.Duration) *UpdateTranscriptAttributionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) WithContext(ctx context.Context) *UpdateTranscriptAttributionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) WithHTTPClient(client *http.Client) *UpdateTranscriptAttributionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConferenceBridgeID adds the conferenceBridgeID to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) WithConferenceBridgeID(conferenceBridgeID *string) *UpdateTranscriptAttributionParams {
	o.SetConferenceBridgeID(conferenceBridgeID)
	return o
}

// SetConferenceBridgeID adds the conferenceBridgeId to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) SetConferenceBridgeID(conferenceBridgeID *string) {
	o.ConferenceBridgeID = conferenceBridgeID
}

// WithFromSpeaker adds the fromSpeaker to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) WithFromSpeaker(fromSpeaker *string) *UpdateTranscriptAttributionParams {
	o.SetFromSpeaker(fromSpeaker)
	return o
}

// SetFromSpeaker adds the fromSpeaker to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) SetFromSpeaker(fromSpeaker *string) {
	o.FromSpeaker = fromSpeaker
}

// WithFromUserID adds the fromUserID to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) WithFromUserID(fromUserID *string) *UpdateTranscriptAttributionParams {
	o.SetFromUserID(fromUserID)
	return o
}

// SetFromUserID adds the fromUserId to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) SetFromUserID(fromUserID *string) {
	o.FromUserID = fromUserID
}

// WithIncidentID adds the incidentID to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) WithIncidentID(incidentID string) *UpdateTranscriptAttributionParams {
	o.SetIncidentID(incidentID)
	return o
}

// SetIncidentID adds the incidentId to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) SetIncidentID(incidentID string) {
	o.IncidentID = incidentID
}

// WithToUserID adds the toUserID to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) WithToUserID(toUserID string) *UpdateTranscriptAttributionParams {
	o.SetToUserID(toUserID)
	return o
}

// SetToUserID adds the toUserId to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) SetToUserID(toUserID string) {
	o.ToUserID = toUserID
}

// WithTranscriptID adds the transcriptID to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) WithTranscriptID(transcriptID *string) *UpdateTranscriptAttributionParams {
	o.SetTranscriptID(transcriptID)
	return o
}

// SetTranscriptID adds the transcriptId to the update transcript attribution params
func (o *UpdateTranscriptAttributionParams) SetTranscriptID(transcriptID *string) {
	o.TranscriptID = transcriptID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateTranscriptAttributionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConferenceBridgeID != nil {

		// form param conference_bridge_id
		var frConferenceBridgeID string
		if o.ConferenceBridgeID != nil {
			frConferenceBridgeID = *o.ConferenceBridgeID
		}
		fConferenceBridgeID := frConferenceBridgeID
		if fConferenceBridgeID != "" {
			if err := r.SetFormParam("conference_bridge_id", fConferenceBridgeID); err != nil {
				return err
			}
		}
	}

	if o.FromSpeaker != nil {

		// form param from_speaker
		var frFromSpeaker string
		if o.FromSpeaker != nil {
			frFromSpeaker = *o.FromSpeaker
		}
		fFromSpeaker := frFromSpeaker
		if fFromSpeaker != "" {
			if err := r.SetFormParam("from_speaker", fFromSpeaker); err != nil {
				return err
			}
		}
	}

	if o.FromUserID != nil {

		// form param from_user_id
		var frFromUserID string
		if o.FromUserID != nil {
			frFromUserID = *o.FromUserID
		}
		fFromUserID := frFromUserID
		if fFromUserID != "" {
			if err := r.SetFormParam("from_user_id", fFromUserID); err != nil {
				return err
			}
		}
	}

	// path param incident_id
	if err := r.SetPathParam("incident_id", o.IncidentID); err != nil {
		return err
	}

	// form param to_user_id
	frToUserID := o.ToUserID
	fToUserID := frToUserID
	if fToUserID != "" {
		if err := r.SetFormParam("to_user_id", fToUserID); err != nil {
			return err
		}
	}

	if o.TranscriptID != nil {

		// form param transcript_id
		var frTranscriptID string
		if o.TranscriptID != nil {
			frTranscriptID = *o.TranscriptID
		}
		fTranscriptID := frTranscriptID
		if fTranscriptID != "" {
			if err := r.SetFormParam("transcript_id", fTranscriptID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
