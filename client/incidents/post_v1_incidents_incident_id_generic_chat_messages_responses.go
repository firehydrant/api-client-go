// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/firehydrant/api-client-go/models"
)

// PostV1IncidentsIncidentIDGenericChatMessagesReader is a Reader for the PostV1IncidentsIncidentIDGenericChatMessages structure.
type PostV1IncidentsIncidentIDGenericChatMessagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV1IncidentsIncidentIDGenericChatMessagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostV1IncidentsIncidentIDGenericChatMessagesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[POST /v1/incidents/{incident_id}/generic_chat_messages] postV1IncidentsIncidentIdGenericChatMessages", response, response.Code())
	}
}

// NewPostV1IncidentsIncidentIDGenericChatMessagesCreated creates a PostV1IncidentsIncidentIDGenericChatMessagesCreated with default headers values
func NewPostV1IncidentsIncidentIDGenericChatMessagesCreated() *PostV1IncidentsIncidentIDGenericChatMessagesCreated {
	return &PostV1IncidentsIncidentIDGenericChatMessagesCreated{}
}

/*
PostV1IncidentsIncidentIDGenericChatMessagesCreated describes a response with status code 201, with default header values.

Create a new generic chat message on an incident timeline. These are independent of any specific chat provider.
*/
type PostV1IncidentsIncidentIDGenericChatMessagesCreated struct {
	Payload *models.EventGenericChatMessageEntity
}

// IsSuccess returns true when this post v1 incidents incident Id generic chat messages created response has a 2xx status code
func (o *PostV1IncidentsIncidentIDGenericChatMessagesCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post v1 incidents incident Id generic chat messages created response has a 3xx status code
func (o *PostV1IncidentsIncidentIDGenericChatMessagesCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 incidents incident Id generic chat messages created response has a 4xx status code
func (o *PostV1IncidentsIncidentIDGenericChatMessagesCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 incidents incident Id generic chat messages created response has a 5xx status code
func (o *PostV1IncidentsIncidentIDGenericChatMessagesCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 incidents incident Id generic chat messages created response a status code equal to that given
func (o *PostV1IncidentsIncidentIDGenericChatMessagesCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post v1 incidents incident Id generic chat messages created response
func (o *PostV1IncidentsIncidentIDGenericChatMessagesCreated) Code() int {
	return 201
}

func (o *PostV1IncidentsIncidentIDGenericChatMessagesCreated) Error() string {
	return fmt.Sprintf("[POST /v1/incidents/{incident_id}/generic_chat_messages][%d] postV1IncidentsIncidentIdGenericChatMessagesCreated  %+v", 201, o.Payload)
}

func (o *PostV1IncidentsIncidentIDGenericChatMessagesCreated) String() string {
	return fmt.Sprintf("[POST /v1/incidents/{incident_id}/generic_chat_messages][%d] postV1IncidentsIncidentIdGenericChatMessagesCreated  %+v", 201, o.Payload)
}

func (o *PostV1IncidentsIncidentIDGenericChatMessagesCreated) GetPayload() *models.EventGenericChatMessageEntity {
	return o.Payload
}

func (o *PostV1IncidentsIncidentIDGenericChatMessagesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EventGenericChatMessageEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
