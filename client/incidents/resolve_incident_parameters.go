// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewResolveIncidentParams creates a new ResolveIncidentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewResolveIncidentParams() *ResolveIncidentParams {
	return &ResolveIncidentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewResolveIncidentParamsWithTimeout creates a new ResolveIncidentParams object
// with the ability to set a timeout on a request.
func NewResolveIncidentParamsWithTimeout(timeout time.Duration) *ResolveIncidentParams {
	return &ResolveIncidentParams{
		timeout: timeout,
	}
}

// NewResolveIncidentParamsWithContext creates a new ResolveIncidentParams object
// with the ability to set a context for a request.
func NewResolveIncidentParamsWithContext(ctx context.Context) *ResolveIncidentParams {
	return &ResolveIncidentParams{
		Context: ctx,
	}
}

// NewResolveIncidentParamsWithHTTPClient creates a new ResolveIncidentParams object
// with the ability to set a custom HTTPClient for a request.
func NewResolveIncidentParamsWithHTTPClient(client *http.Client) *ResolveIncidentParams {
	return &ResolveIncidentParams{
		HTTPClient: client,
	}
}

/*
ResolveIncidentParams contains all the parameters to send to the API endpoint

	for the resolve incident operation.

	Typically these are written to a http.Request.
*/
type ResolveIncidentParams struct {

	// IncidentID.
	IncidentID string

	/* Milestone.

	   The slug of any milestone in the post-incident or closed phase to set on the incident (and its children, if `resolve_children` os set). Must be one of the configured milestones available on this incident.
	*/
	Milestone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the resolve incident params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ResolveIncidentParams) WithDefaults() *ResolveIncidentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the resolve incident params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ResolveIncidentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the resolve incident params
func (o *ResolveIncidentParams) WithTimeout(timeout time.Duration) *ResolveIncidentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the resolve incident params
func (o *ResolveIncidentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the resolve incident params
func (o *ResolveIncidentParams) WithContext(ctx context.Context) *ResolveIncidentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the resolve incident params
func (o *ResolveIncidentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the resolve incident params
func (o *ResolveIncidentParams) WithHTTPClient(client *http.Client) *ResolveIncidentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the resolve incident params
func (o *ResolveIncidentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncidentID adds the incidentID to the resolve incident params
func (o *ResolveIncidentParams) WithIncidentID(incidentID string) *ResolveIncidentParams {
	o.SetIncidentID(incidentID)
	return o
}

// SetIncidentID adds the incidentId to the resolve incident params
func (o *ResolveIncidentParams) SetIncidentID(incidentID string) {
	o.IncidentID = incidentID
}

// WithMilestone adds the milestone to the resolve incident params
func (o *ResolveIncidentParams) WithMilestone(milestone *string) *ResolveIncidentParams {
	o.SetMilestone(milestone)
	return o
}

// SetMilestone adds the milestone to the resolve incident params
func (o *ResolveIncidentParams) SetMilestone(milestone *string) {
	o.Milestone = milestone
}

// WriteToRequest writes these params to a swagger request
func (o *ResolveIncidentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param incident_id
	if err := r.SetPathParam("incident_id", o.IncidentID); err != nil {
		return err
	}

	if o.Milestone != nil {

		// form param milestone
		var frMilestone string
		if o.Milestone != nil {
			frMilestone = *o.Milestone
		}
		fMilestone := frMilestone
		if fMilestone != "" {
			if err := r.SetFormParam("milestone", fMilestone); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
