// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/firehydrant/api-client-go/models"
)

// NewUpdateIncidentChatMessageParams creates a new UpdateIncidentChatMessageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateIncidentChatMessageParams() *UpdateIncidentChatMessageParams {
	return &UpdateIncidentChatMessageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateIncidentChatMessageParamsWithTimeout creates a new UpdateIncidentChatMessageParams object
// with the ability to set a timeout on a request.
func NewUpdateIncidentChatMessageParamsWithTimeout(timeout time.Duration) *UpdateIncidentChatMessageParams {
	return &UpdateIncidentChatMessageParams{
		timeout: timeout,
	}
}

// NewUpdateIncidentChatMessageParamsWithContext creates a new UpdateIncidentChatMessageParams object
// with the ability to set a context for a request.
func NewUpdateIncidentChatMessageParamsWithContext(ctx context.Context) *UpdateIncidentChatMessageParams {
	return &UpdateIncidentChatMessageParams{
		Context: ctx,
	}
}

// NewUpdateIncidentChatMessageParamsWithHTTPClient creates a new UpdateIncidentChatMessageParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateIncidentChatMessageParamsWithHTTPClient(client *http.Client) *UpdateIncidentChatMessageParams {
	return &UpdateIncidentChatMessageParams{
		HTTPClient: client,
	}
}

/*
UpdateIncidentChatMessageParams contains all the parameters to send to the API endpoint

	for the update incident chat message operation.

	Typically these are written to a http.Request.
*/
type UpdateIncidentChatMessageParams struct {

	// IncidentID.
	IncidentID string

	// MessageID.
	MessageID string

	// UpdateIncidentChatMessage.
	UpdateIncidentChatMessage *models.UpdateIncidentChatMessage

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update incident chat message params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateIncidentChatMessageParams) WithDefaults() *UpdateIncidentChatMessageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update incident chat message params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateIncidentChatMessageParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update incident chat message params
func (o *UpdateIncidentChatMessageParams) WithTimeout(timeout time.Duration) *UpdateIncidentChatMessageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update incident chat message params
func (o *UpdateIncidentChatMessageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update incident chat message params
func (o *UpdateIncidentChatMessageParams) WithContext(ctx context.Context) *UpdateIncidentChatMessageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update incident chat message params
func (o *UpdateIncidentChatMessageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update incident chat message params
func (o *UpdateIncidentChatMessageParams) WithHTTPClient(client *http.Client) *UpdateIncidentChatMessageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update incident chat message params
func (o *UpdateIncidentChatMessageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncidentID adds the incidentID to the update incident chat message params
func (o *UpdateIncidentChatMessageParams) WithIncidentID(incidentID string) *UpdateIncidentChatMessageParams {
	o.SetIncidentID(incidentID)
	return o
}

// SetIncidentID adds the incidentId to the update incident chat message params
func (o *UpdateIncidentChatMessageParams) SetIncidentID(incidentID string) {
	o.IncidentID = incidentID
}

// WithMessageID adds the messageID to the update incident chat message params
func (o *UpdateIncidentChatMessageParams) WithMessageID(messageID string) *UpdateIncidentChatMessageParams {
	o.SetMessageID(messageID)
	return o
}

// SetMessageID adds the messageId to the update incident chat message params
func (o *UpdateIncidentChatMessageParams) SetMessageID(messageID string) {
	o.MessageID = messageID
}

// WithUpdateIncidentChatMessage adds the updateIncidentChatMessage to the update incident chat message params
func (o *UpdateIncidentChatMessageParams) WithUpdateIncidentChatMessage(updateIncidentChatMessage *models.UpdateIncidentChatMessage) *UpdateIncidentChatMessageParams {
	o.SetUpdateIncidentChatMessage(updateIncidentChatMessage)
	return o
}

// SetUpdateIncidentChatMessage adds the updateIncidentChatMessage to the update incident chat message params
func (o *UpdateIncidentChatMessageParams) SetUpdateIncidentChatMessage(updateIncidentChatMessage *models.UpdateIncidentChatMessage) {
	o.UpdateIncidentChatMessage = updateIncidentChatMessage
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateIncidentChatMessageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param incident_id
	if err := r.SetPathParam("incident_id", o.IncidentID); err != nil {
		return err
	}

	// path param message_id
	if err := r.SetPathParam("message_id", o.MessageID); err != nil {
		return err
	}
	if o.UpdateIncidentChatMessage != nil {
		if err := r.SetBodyParam(o.UpdateIncidentChatMessage); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
