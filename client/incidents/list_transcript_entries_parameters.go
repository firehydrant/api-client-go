// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListTranscriptEntriesParams creates a new ListTranscriptEntriesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListTranscriptEntriesParams() *ListTranscriptEntriesParams {
	return &ListTranscriptEntriesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListTranscriptEntriesParamsWithTimeout creates a new ListTranscriptEntriesParams object
// with the ability to set a timeout on a request.
func NewListTranscriptEntriesParamsWithTimeout(timeout time.Duration) *ListTranscriptEntriesParams {
	return &ListTranscriptEntriesParams{
		timeout: timeout,
	}
}

// NewListTranscriptEntriesParamsWithContext creates a new ListTranscriptEntriesParams object
// with the ability to set a context for a request.
func NewListTranscriptEntriesParamsWithContext(ctx context.Context) *ListTranscriptEntriesParams {
	return &ListTranscriptEntriesParams{
		Context: ctx,
	}
}

// NewListTranscriptEntriesParamsWithHTTPClient creates a new ListTranscriptEntriesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListTranscriptEntriesParamsWithHTTPClient(client *http.Client) *ListTranscriptEntriesParams {
	return &ListTranscriptEntriesParams{
		HTTPClient: client,
	}
}

/*
ListTranscriptEntriesParams contains all the parameters to send to the API endpoint

	for the list transcript entries operation.

	Typically these are written to a http.Request.
*/
type ListTranscriptEntriesParams struct {

	/* After.

	   The ID of the transcript entry to start after.
	*/
	After *string

	/* Before.

	   The ID of the transcript entry to start before.
	*/
	Before *string

	// IncidentID.
	IncidentID string

	/* Sort.

	   The order to sort the transcript entries.

	   Default: "asc"
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list transcript entries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListTranscriptEntriesParams) WithDefaults() *ListTranscriptEntriesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list transcript entries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListTranscriptEntriesParams) SetDefaults() {
	var (
		sortDefault = string("asc")
	)

	val := ListTranscriptEntriesParams{
		Sort: &sortDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list transcript entries params
func (o *ListTranscriptEntriesParams) WithTimeout(timeout time.Duration) *ListTranscriptEntriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list transcript entries params
func (o *ListTranscriptEntriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list transcript entries params
func (o *ListTranscriptEntriesParams) WithContext(ctx context.Context) *ListTranscriptEntriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list transcript entries params
func (o *ListTranscriptEntriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list transcript entries params
func (o *ListTranscriptEntriesParams) WithHTTPClient(client *http.Client) *ListTranscriptEntriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list transcript entries params
func (o *ListTranscriptEntriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the list transcript entries params
func (o *ListTranscriptEntriesParams) WithAfter(after *string) *ListTranscriptEntriesParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the list transcript entries params
func (o *ListTranscriptEntriesParams) SetAfter(after *string) {
	o.After = after
}

// WithBefore adds the before to the list transcript entries params
func (o *ListTranscriptEntriesParams) WithBefore(before *string) *ListTranscriptEntriesParams {
	o.SetBefore(before)
	return o
}

// SetBefore adds the before to the list transcript entries params
func (o *ListTranscriptEntriesParams) SetBefore(before *string) {
	o.Before = before
}

// WithIncidentID adds the incidentID to the list transcript entries params
func (o *ListTranscriptEntriesParams) WithIncidentID(incidentID string) *ListTranscriptEntriesParams {
	o.SetIncidentID(incidentID)
	return o
}

// SetIncidentID adds the incidentId to the list transcript entries params
func (o *ListTranscriptEntriesParams) SetIncidentID(incidentID string) {
	o.IncidentID = incidentID
}

// WithSort adds the sort to the list transcript entries params
func (o *ListTranscriptEntriesParams) WithSort(sort *string) *ListTranscriptEntriesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the list transcript entries params
func (o *ListTranscriptEntriesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *ListTranscriptEntriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter string

		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter
		if qAfter != "" {

			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}
	}

	if o.Before != nil {

		// query param before
		var qrBefore string

		if o.Before != nil {
			qrBefore = *o.Before
		}
		qBefore := qrBefore
		if qBefore != "" {

			if err := r.SetQueryParam("before", qBefore); err != nil {
				return err
			}
		}
	}

	// path param incident_id
	if err := r.SetPathParam("incident_id", o.IncidentID); err != nil {
		return err
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
