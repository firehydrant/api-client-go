// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ConvertIncidentTask(params *ConvertIncidentTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConvertIncidentTaskCreated, error)

	CreateChecklistTemplate(params *CreateChecklistTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateChecklistTemplateCreated, error)

	CreateIncidentTask(params *CreateIncidentTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentTaskCreated, error)

	CreateIncidentTaskList(params *CreateIncidentTaskListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentTaskListCreated, error)

	CreateTaskList(params *CreateTaskListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTaskListCreated, error)

	DeleteChecklistTemplate(params *DeleteChecklistTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteChecklistTemplateOK, error)

	DeleteIncidentTask(params *DeleteIncidentTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentTaskNoContent, error)

	DeleteTaskList(params *DeleteTaskListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTaskListOK, error)

	GetChecklistTemplate(params *GetChecklistTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetChecklistTemplateOK, error)

	GetIncidentTask(params *GetIncidentTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentTaskOK, error)

	GetTaskList(params *GetTaskListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskListOK, error)

	ListChecklistTemplates(params *ListChecklistTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListChecklistTemplatesOK, error)

	ListIncidentTasks(params *ListIncidentTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentTasksOK, error)

	ListTaskLists(params *ListTaskListsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTaskListsOK, error)

	UpdateChecklistTemplate(params *UpdateChecklistTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateChecklistTemplateOK, error)

	UpdateIncidentTask(params *UpdateIncidentTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentTaskOK, error)

	UpdateTaskList(params *UpdateTaskListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTaskListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ConvertIncidentTask converts a task to a follow up

Convert a task to a follow-up
*/
func (a *Client) ConvertIncidentTask(params *ConvertIncidentTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConvertIncidentTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConvertIncidentTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "convert_incident_task",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/tasks/{task_id}/convert",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConvertIncidentTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConvertIncidentTaskCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for convert_incident_task: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateChecklistTemplate creates a checklist template

Creates a checklist template for the organization
*/
func (a *Client) CreateChecklistTemplate(params *CreateChecklistTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateChecklistTemplateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateChecklistTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_checklist_template",
		Method:             "POST",
		PathPattern:        "/v1/checklist_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateChecklistTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateChecklistTemplateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_checklist_template: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIncidentTask creates an incident task

Create a task
*/
func (a *Client) CreateIncidentTask(params *CreateIncidentTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_incident_task",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIncidentTaskCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_incident_task: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIncidentTaskList adds tasks from a task list to an incident

Add all tasks from list to incident
*/
func (a *Client) CreateIncidentTaskList(params *CreateIncidentTaskListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentTaskListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentTaskListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_incident_task_list",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/task_lists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentTaskListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIncidentTaskListCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_incident_task_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTaskList creates a task list

Creates a new task list
*/
func (a *Client) CreateTaskList(params *CreateTaskListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTaskListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTaskListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_task_list",
		Method:             "POST",
		PathPattern:        "/v1/task_lists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTaskListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTaskListCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_task_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteChecklistTemplate archives a checklist template

Archive a checklist template
*/
func (a *Client) DeleteChecklistTemplate(params *DeleteChecklistTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteChecklistTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteChecklistTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_checklist_template",
		Method:             "DELETE",
		PathPattern:        "/v1/checklist_templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteChecklistTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteChecklistTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_checklist_template: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIncidentTask deletes an incident task

Delete a task
*/
func (a *Client) DeleteIncidentTask(params *DeleteIncidentTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentTaskNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIncidentTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_incident_task",
		Method:             "DELETE",
		PathPattern:        "/v1/incidents/{incident_id}/tasks/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIncidentTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIncidentTaskNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_incident_task: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTaskList deletes a task list

Delete a task list
*/
func (a *Client) DeleteTaskList(params *DeleteTaskListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTaskListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTaskListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_task_list",
		Method:             "DELETE",
		PathPattern:        "/v1/task_lists/{task_list_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTaskListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTaskListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_task_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetChecklistTemplate gets a checklist template

Retrieves a single checklist template by ID
*/
func (a *Client) GetChecklistTemplate(params *GetChecklistTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetChecklistTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChecklistTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_checklist_template",
		Method:             "GET",
		PathPattern:        "/v1/checklist_templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChecklistTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChecklistTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_checklist_template: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIncidentTask gets an incident task

Retrieve a single task for an incident
*/
func (a *Client) GetIncidentTask(params *GetIncidentTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncidentTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_incident_task",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/tasks/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncidentTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIncidentTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_incident_task: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskList gets a task list

Retrieves a single task list by ID
*/
func (a *Client) GetTaskList(params *GetTaskListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_task_list",
		Method:             "GET",
		PathPattern:        "/v1/task_lists/{task_list_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_task_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListChecklistTemplates lists checklist templates

List all of the checklist templates that have been added to the organization
*/
func (a *Client) ListChecklistTemplates(params *ListChecklistTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListChecklistTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListChecklistTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_checklist_templates",
		Method:             "GET",
		PathPattern:        "/v1/checklist_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListChecklistTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListChecklistTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_checklist_templates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIncidentTasks lists tasks for an incident

Retrieve a list of all tasks for a specific incident
*/
func (a *Client) ListIncidentTasks(params *ListIncidentTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIncidentTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_incident_tasks",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIncidentTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIncidentTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_incident_tasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTaskLists lists task lists

Lists all task lists for your organization
*/
func (a *Client) ListTaskLists(params *ListTaskListsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTaskListsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTaskListsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_task_lists",
		Method:             "GET",
		PathPattern:        "/v1/task_lists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTaskListsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTaskListsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_task_lists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateChecklistTemplate updates a checklist template

Update a checklist templates attributes
*/
func (a *Client) UpdateChecklistTemplate(params *UpdateChecklistTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateChecklistTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateChecklistTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_checklist_template",
		Method:             "PATCH",
		PathPattern:        "/v1/checklist_templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateChecklistTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateChecklistTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_checklist_template: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIncidentTask updates an incident task

Update a task's attributes
*/
func (a *Client) UpdateIncidentTask(params *UpdateIncidentTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIncidentTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_incident_task",
		Method:             "PATCH",
		PathPattern:        "/v1/incidents/{incident_id}/tasks/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIncidentTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIncidentTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_incident_task: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTaskList updates a task list

Updates a task list's attributes and task list items
*/
func (a *Client) UpdateTaskList(params *UpdateTaskListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTaskListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTaskListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_task_list",
		Method:             "PATCH",
		PathPattern:        "/v1/task_lists/{task_list_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTaskListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTaskListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_task_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
