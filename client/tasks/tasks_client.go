// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1ChecklistTemplatesID(params *DeleteV1ChecklistTemplatesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1ChecklistTemplatesIDOK, error)

	DeleteV1IncidentsIncidentIDTasksTaskID(params *DeleteV1IncidentsIncidentIDTasksTaskIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1IncidentsIncidentIDTasksTaskIDNoContent, error)

	DeleteV1TaskListsTaskListID(params *DeleteV1TaskListsTaskListIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TaskListsTaskListIDOK, error)

	GetV1ChecklistTemplates(params *GetV1ChecklistTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ChecklistTemplatesOK, error)

	GetV1ChecklistTemplatesID(params *GetV1ChecklistTemplatesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ChecklistTemplatesIDOK, error)

	GetV1IncidentsIncidentIDTasks(params *GetV1IncidentsIncidentIDTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentsIncidentIDTasksOK, error)

	GetV1IncidentsIncidentIDTasksTaskID(params *GetV1IncidentsIncidentIDTasksTaskIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentsIncidentIDTasksTaskIDOK, error)

	GetV1TaskLists(params *GetV1TaskListsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TaskListsOK, error)

	GetV1TaskListsTaskListID(params *GetV1TaskListsTaskListIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TaskListsTaskListIDOK, error)

	PatchV1ChecklistTemplatesID(params *PatchV1ChecklistTemplatesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1ChecklistTemplatesIDOK, error)

	PatchV1IncidentsIncidentIDTasksTaskID(params *PatchV1IncidentsIncidentIDTasksTaskIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IncidentsIncidentIDTasksTaskIDOK, error)

	PatchV1TaskListsTaskListID(params *PatchV1TaskListsTaskListIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TaskListsTaskListIDOK, error)

	PostV1ChecklistTemplates(params *PostV1ChecklistTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ChecklistTemplatesCreated, error)

	PostV1IncidentsIncidentIDTaskLists(params *PostV1IncidentsIncidentIDTaskListsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentsIncidentIDTaskListsCreated, error)

	PostV1IncidentsIncidentIDTasks(params *PostV1IncidentsIncidentIDTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentsIncidentIDTasksCreated, error)

	PostV1IncidentsIncidentIDTasksTaskIDConvert(params *PostV1IncidentsIncidentIDTasksTaskIDConvertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentsIncidentIDTasksTaskIDConvertCreated, error)

	PostV1TaskLists(params *PostV1TaskListsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TaskListsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1ChecklistTemplatesID archives a checklist template

Archive a checklist template
*/
func (a *Client) DeleteV1ChecklistTemplatesID(params *DeleteV1ChecklistTemplatesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1ChecklistTemplatesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ChecklistTemplatesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1ChecklistTemplatesId",
		Method:             "DELETE",
		PathPattern:        "/v1/checklist_templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1ChecklistTemplatesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1ChecklistTemplatesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1ChecklistTemplatesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1IncidentsIncidentIDTasksTaskID deletes an incident task

Delete a task
*/
func (a *Client) DeleteV1IncidentsIncidentIDTasksTaskID(params *DeleteV1IncidentsIncidentIDTasksTaskIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1IncidentsIncidentIDTasksTaskIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1IncidentsIncidentIDTasksTaskIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1IncidentsIncidentIdTasksTaskId",
		Method:             "DELETE",
		PathPattern:        "/v1/incidents/{incident_id}/tasks/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1IncidentsIncidentIDTasksTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1IncidentsIncidentIDTasksTaskIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1IncidentsIncidentIdTasksTaskId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1TaskListsTaskListID deletes a task list

Delete a task list
*/
func (a *Client) DeleteV1TaskListsTaskListID(params *DeleteV1TaskListsTaskListIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TaskListsTaskListIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1TaskListsTaskListIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1TaskListsTaskListId",
		Method:             "DELETE",
		PathPattern:        "/v1/task_lists/{task_list_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1TaskListsTaskListIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1TaskListsTaskListIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1TaskListsTaskListId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ChecklistTemplates lists checklist templates

List all of the checklist templates that have been added to the organization
*/
func (a *Client) GetV1ChecklistTemplates(params *GetV1ChecklistTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ChecklistTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ChecklistTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1ChecklistTemplates",
		Method:             "GET",
		PathPattern:        "/v1/checklist_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ChecklistTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ChecklistTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1ChecklistTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ChecklistTemplatesID gets a checklist template

Retrieves a single checklist template by ID
*/
func (a *Client) GetV1ChecklistTemplatesID(params *GetV1ChecklistTemplatesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ChecklistTemplatesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ChecklistTemplatesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1ChecklistTemplatesId",
		Method:             "GET",
		PathPattern:        "/v1/checklist_templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ChecklistTemplatesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ChecklistTemplatesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1ChecklistTemplatesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IncidentsIncidentIDTasks lists tasks for an incident

Retrieve a list of all tasks for a specific incident
*/
func (a *Client) GetV1IncidentsIncidentIDTasks(params *GetV1IncidentsIncidentIDTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentsIncidentIDTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IncidentsIncidentIDTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IncidentsIncidentIdTasks",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IncidentsIncidentIDTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IncidentsIncidentIDTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IncidentsIncidentIdTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IncidentsIncidentIDTasksTaskID gets an incident task

Retrieve a single task for an incident
*/
func (a *Client) GetV1IncidentsIncidentIDTasksTaskID(params *GetV1IncidentsIncidentIDTasksTaskIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentsIncidentIDTasksTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IncidentsIncidentIDTasksTaskIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IncidentsIncidentIdTasksTaskId",
		Method:             "GET",
		PathPattern:        "/v1/incidents/{incident_id}/tasks/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IncidentsIncidentIDTasksTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IncidentsIncidentIDTasksTaskIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IncidentsIncidentIdTasksTaskId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TaskLists lists task lists

Lists all task lists for your organization
*/
func (a *Client) GetV1TaskLists(params *GetV1TaskListsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TaskListsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TaskListsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TaskLists",
		Method:             "GET",
		PathPattern:        "/v1/task_lists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TaskListsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TaskListsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TaskLists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TaskListsTaskListID gets a task list

Retrieves a single task list by ID
*/
func (a *Client) GetV1TaskListsTaskListID(params *GetV1TaskListsTaskListIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TaskListsTaskListIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TaskListsTaskListIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TaskListsTaskListId",
		Method:             "GET",
		PathPattern:        "/v1/task_lists/{task_list_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TaskListsTaskListIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TaskListsTaskListIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TaskListsTaskListId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1ChecklistTemplatesID updates a checklist template

Update a checklist templates attributes
*/
func (a *Client) PatchV1ChecklistTemplatesID(params *PatchV1ChecklistTemplatesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1ChecklistTemplatesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ChecklistTemplatesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1ChecklistTemplatesId",
		Method:             "PATCH",
		PathPattern:        "/v1/checklist_templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1ChecklistTemplatesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1ChecklistTemplatesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1ChecklistTemplatesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1IncidentsIncidentIDTasksTaskID updates an incident task

Update a task's attributes
*/
func (a *Client) PatchV1IncidentsIncidentIDTasksTaskID(params *PatchV1IncidentsIncidentIDTasksTaskIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IncidentsIncidentIDTasksTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1IncidentsIncidentIDTasksTaskIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1IncidentsIncidentIdTasksTaskId",
		Method:             "PATCH",
		PathPattern:        "/v1/incidents/{incident_id}/tasks/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1IncidentsIncidentIDTasksTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1IncidentsIncidentIDTasksTaskIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1IncidentsIncidentIdTasksTaskId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1TaskListsTaskListID updates a task list

Updates a task list's attributes and task list items
*/
func (a *Client) PatchV1TaskListsTaskListID(params *PatchV1TaskListsTaskListIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TaskListsTaskListIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1TaskListsTaskListIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1TaskListsTaskListId",
		Method:             "PATCH",
		PathPattern:        "/v1/task_lists/{task_list_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1TaskListsTaskListIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1TaskListsTaskListIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1TaskListsTaskListId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ChecklistTemplates creates a checklist template

Creates a checklist template for the organization
*/
func (a *Client) PostV1ChecklistTemplates(params *PostV1ChecklistTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ChecklistTemplatesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ChecklistTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1ChecklistTemplates",
		Method:             "POST",
		PathPattern:        "/v1/checklist_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ChecklistTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ChecklistTemplatesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1ChecklistTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1IncidentsIncidentIDTaskLists adds tasks from a task list to an incident

Add all tasks from list to incident
*/
func (a *Client) PostV1IncidentsIncidentIDTaskLists(params *PostV1IncidentsIncidentIDTaskListsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentsIncidentIDTaskListsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1IncidentsIncidentIDTaskListsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1IncidentsIncidentIdTaskLists",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/task_lists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1IncidentsIncidentIDTaskListsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1IncidentsIncidentIDTaskListsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1IncidentsIncidentIdTaskLists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1IncidentsIncidentIDTasks creates an incident task

Create a task
*/
func (a *Client) PostV1IncidentsIncidentIDTasks(params *PostV1IncidentsIncidentIDTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentsIncidentIDTasksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1IncidentsIncidentIDTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1IncidentsIncidentIdTasks",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1IncidentsIncidentIDTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1IncidentsIncidentIDTasksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1IncidentsIncidentIdTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1IncidentsIncidentIDTasksTaskIDConvert converts a task to a follow up

Convert a task to a follow-up
*/
func (a *Client) PostV1IncidentsIncidentIDTasksTaskIDConvert(params *PostV1IncidentsIncidentIDTasksTaskIDConvertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentsIncidentIDTasksTaskIDConvertCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1IncidentsIncidentIDTasksTaskIDConvertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1IncidentsIncidentIdTasksTaskIdConvert",
		Method:             "POST",
		PathPattern:        "/v1/incidents/{incident_id}/tasks/{task_id}/convert",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1IncidentsIncidentIDTasksTaskIDConvertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1IncidentsIncidentIDTasksTaskIDConvertCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1IncidentsIncidentIdTasksTaskIdConvert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1TaskLists creates a task list

Creates a new task list
*/
func (a *Client) PostV1TaskLists(params *PostV1TaskListsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TaskListsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1TaskListsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1TaskLists",
		Method:             "POST",
		PathPattern:        "/v1/task_lists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1TaskListsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1TaskListsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1TaskLists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
