// Code generated by go-swagger; DO NOT EDIT.

package runbooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListRunbookActionsParams creates a new ListRunbookActionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListRunbookActionsParams() *ListRunbookActionsParams {
	return &ListRunbookActionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListRunbookActionsParamsWithTimeout creates a new ListRunbookActionsParams object
// with the ability to set a timeout on a request.
func NewListRunbookActionsParamsWithTimeout(timeout time.Duration) *ListRunbookActionsParams {
	return &ListRunbookActionsParams{
		timeout: timeout,
	}
}

// NewListRunbookActionsParamsWithContext creates a new ListRunbookActionsParams object
// with the ability to set a context for a request.
func NewListRunbookActionsParamsWithContext(ctx context.Context) *ListRunbookActionsParams {
	return &ListRunbookActionsParams{
		Context: ctx,
	}
}

// NewListRunbookActionsParamsWithHTTPClient creates a new ListRunbookActionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListRunbookActionsParamsWithHTTPClient(client *http.Client) *ListRunbookActionsParams {
	return &ListRunbookActionsParams{
		HTTPClient: client,
	}
}

/*
ListRunbookActionsParams contains all the parameters to send to the API endpoint

	for the list runbook actions operation.

	Typically these are written to a http.Request.
*/
type ListRunbookActionsParams struct {

	/* Lite.

	   Boolean to determine whether to return a slimified version of the action object's integration
	*/
	Lite *bool

	// Page.
	//
	// Format: int32
	Page *int32

	// PerPage.
	//
	// Format: int32
	PerPage *int32

	/* Type.

	   List actions supporting this specific Runbook type
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list runbook actions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListRunbookActionsParams) WithDefaults() *ListRunbookActionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list runbook actions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListRunbookActionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list runbook actions params
func (o *ListRunbookActionsParams) WithTimeout(timeout time.Duration) *ListRunbookActionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list runbook actions params
func (o *ListRunbookActionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list runbook actions params
func (o *ListRunbookActionsParams) WithContext(ctx context.Context) *ListRunbookActionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list runbook actions params
func (o *ListRunbookActionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list runbook actions params
func (o *ListRunbookActionsParams) WithHTTPClient(client *http.Client) *ListRunbookActionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list runbook actions params
func (o *ListRunbookActionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLite adds the lite to the list runbook actions params
func (o *ListRunbookActionsParams) WithLite(lite *bool) *ListRunbookActionsParams {
	o.SetLite(lite)
	return o
}

// SetLite adds the lite to the list runbook actions params
func (o *ListRunbookActionsParams) SetLite(lite *bool) {
	o.Lite = lite
}

// WithPage adds the page to the list runbook actions params
func (o *ListRunbookActionsParams) WithPage(page *int32) *ListRunbookActionsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list runbook actions params
func (o *ListRunbookActionsParams) SetPage(page *int32) {
	o.Page = page
}

// WithPerPage adds the perPage to the list runbook actions params
func (o *ListRunbookActionsParams) WithPerPage(perPage *int32) *ListRunbookActionsParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the list runbook actions params
func (o *ListRunbookActionsParams) SetPerPage(perPage *int32) {
	o.PerPage = perPage
}

// WithType adds the typeVar to the list runbook actions params
func (o *ListRunbookActionsParams) WithType(typeVar *string) *ListRunbookActionsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the list runbook actions params
func (o *ListRunbookActionsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *ListRunbookActionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Lite != nil {

		// query param lite
		var qrLite bool

		if o.Lite != nil {
			qrLite = *o.Lite
		}
		qLite := swag.FormatBool(qrLite)
		if qLite != "" {

			if err := r.SetQueryParam("lite", qLite); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int32

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt32(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
