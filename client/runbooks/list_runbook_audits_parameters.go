// Code generated by go-swagger; DO NOT EDIT.

package runbooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListRunbookAuditsParams creates a new ListRunbookAuditsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListRunbookAuditsParams() *ListRunbookAuditsParams {
	return &ListRunbookAuditsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListRunbookAuditsParamsWithTimeout creates a new ListRunbookAuditsParams object
// with the ability to set a timeout on a request.
func NewListRunbookAuditsParamsWithTimeout(timeout time.Duration) *ListRunbookAuditsParams {
	return &ListRunbookAuditsParams{
		timeout: timeout,
	}
}

// NewListRunbookAuditsParamsWithContext creates a new ListRunbookAuditsParams object
// with the ability to set a context for a request.
func NewListRunbookAuditsParamsWithContext(ctx context.Context) *ListRunbookAuditsParams {
	return &ListRunbookAuditsParams{
		Context: ctx,
	}
}

// NewListRunbookAuditsParamsWithHTTPClient creates a new ListRunbookAuditsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListRunbookAuditsParamsWithHTTPClient(client *http.Client) *ListRunbookAuditsParams {
	return &ListRunbookAuditsParams{
		HTTPClient: client,
	}
}

/*
ListRunbookAuditsParams contains all the parameters to send to the API endpoint

	for the list runbook audits operation.

	Typically these are written to a http.Request.
*/
type ListRunbookAuditsParams struct {

	/* AuditableType.

	   A query to filter audits by type

	   Default: "Runbooks::Step"
	*/
	AuditableType *string

	// Page.
	//
	// Format: int32
	Page *int32

	// PerPage.
	//
	// Format: int32
	PerPage *int32

	/* Sort.

	   A query to sort audits by their created_at timestamp. Options are 'asc' or 'desc'
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list runbook audits params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListRunbookAuditsParams) WithDefaults() *ListRunbookAuditsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list runbook audits params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListRunbookAuditsParams) SetDefaults() {
	var (
		auditableTypeDefault = string("Runbooks::Step")
	)

	val := ListRunbookAuditsParams{
		AuditableType: &auditableTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list runbook audits params
func (o *ListRunbookAuditsParams) WithTimeout(timeout time.Duration) *ListRunbookAuditsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list runbook audits params
func (o *ListRunbookAuditsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list runbook audits params
func (o *ListRunbookAuditsParams) WithContext(ctx context.Context) *ListRunbookAuditsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list runbook audits params
func (o *ListRunbookAuditsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list runbook audits params
func (o *ListRunbookAuditsParams) WithHTTPClient(client *http.Client) *ListRunbookAuditsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list runbook audits params
func (o *ListRunbookAuditsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuditableType adds the auditableType to the list runbook audits params
func (o *ListRunbookAuditsParams) WithAuditableType(auditableType *string) *ListRunbookAuditsParams {
	o.SetAuditableType(auditableType)
	return o
}

// SetAuditableType adds the auditableType to the list runbook audits params
func (o *ListRunbookAuditsParams) SetAuditableType(auditableType *string) {
	o.AuditableType = auditableType
}

// WithPage adds the page to the list runbook audits params
func (o *ListRunbookAuditsParams) WithPage(page *int32) *ListRunbookAuditsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list runbook audits params
func (o *ListRunbookAuditsParams) SetPage(page *int32) {
	o.Page = page
}

// WithPerPage adds the perPage to the list runbook audits params
func (o *ListRunbookAuditsParams) WithPerPage(perPage *int32) *ListRunbookAuditsParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the list runbook audits params
func (o *ListRunbookAuditsParams) SetPerPage(perPage *int32) {
	o.PerPage = perPage
}

// WithSort adds the sort to the list runbook audits params
func (o *ListRunbookAuditsParams) WithSort(sort *string) *ListRunbookAuditsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the list runbook audits params
func (o *ListRunbookAuditsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *ListRunbookAuditsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AuditableType != nil {

		// query param auditable_type
		var qrAuditableType string

		if o.AuditableType != nil {
			qrAuditableType = *o.AuditableType
		}
		qAuditableType := qrAuditableType
		if qAuditableType != "" {

			if err := r.SetQueryParam("auditable_type", qAuditableType); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int32

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt32(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
