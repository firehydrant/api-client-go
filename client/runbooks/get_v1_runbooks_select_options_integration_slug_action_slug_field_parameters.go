// Code generated by go-swagger; DO NOT EDIT.

package runbooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams creates a new GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams() *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams {
	return &GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParamsWithTimeout creates a new GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams object
// with the ability to set a timeout on a request.
func NewGetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParamsWithTimeout(timeout time.Duration) *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams {
	return &GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams{
		timeout: timeout,
	}
}

// NewGetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParamsWithContext creates a new GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams object
// with the ability to set a context for a request.
func NewGetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParamsWithContext(ctx context.Context) *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams {
	return &GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams{
		Context: ctx,
	}
}

// NewGetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParamsWithHTTPClient creates a new GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParamsWithHTTPClient(client *http.Client) *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams {
	return &GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams{
		HTTPClient: client,
	}
}

/*
GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams contains all the parameters to send to the API endpoint

	for the get v1 runbooks select options integration slug action slug field operation.

	Typically these are written to a http.Request.
*/
type GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams struct {

	// ActionSlug.
	ActionSlug string

	// Field.
	Field string

	// IntegrationSlug.
	IntegrationSlug string

	/* PerPage.

	   Maximum number of items to return.

	   Format: int32
	*/
	PerPage *int32

	/* Query.

	   Text string of a query for filtering values.
	*/
	Query *string

	/* Scope.

	   Generic params used to add specificity (eg an id of some kind) to the select options request
	*/
	Scope *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get v1 runbooks select options integration slug action slug field params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) WithDefaults() *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get v1 runbooks select options integration slug action slug field params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) WithTimeout(timeout time.Duration) *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) WithContext(ctx context.Context) *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) WithHTTPClient(client *http.Client) *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActionSlug adds the actionSlug to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) WithActionSlug(actionSlug string) *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams {
	o.SetActionSlug(actionSlug)
	return o
}

// SetActionSlug adds the actionSlug to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) SetActionSlug(actionSlug string) {
	o.ActionSlug = actionSlug
}

// WithField adds the field to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) WithField(field string) *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams {
	o.SetField(field)
	return o
}

// SetField adds the field to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) SetField(field string) {
	o.Field = field
}

// WithIntegrationSlug adds the integrationSlug to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) WithIntegrationSlug(integrationSlug string) *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams {
	o.SetIntegrationSlug(integrationSlug)
	return o
}

// SetIntegrationSlug adds the integrationSlug to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) SetIntegrationSlug(integrationSlug string) {
	o.IntegrationSlug = integrationSlug
}

// WithPerPage adds the perPage to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) WithPerPage(perPage *int32) *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) SetPerPage(perPage *int32) {
	o.PerPage = perPage
}

// WithQuery adds the query to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) WithQuery(query *string) *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) SetQuery(query *string) {
	o.Query = query
}

// WithScope adds the scope to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) WithScope(scope *string) *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the get v1 runbooks select options integration slug action slug field params
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) SetScope(scope *string) {
	o.Scope = scope
}

// WriteToRequest writes these params to a swagger request
func (o *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param action_slug
	if err := r.SetPathParam("action_slug", o.ActionSlug); err != nil {
		return err
	}

	// path param field
	if err := r.SetPathParam("field", o.Field); err != nil {
		return err
	}

	// path param integration_slug
	if err := r.SetPathParam("integration_slug", o.IntegrationSlug); err != nil {
		return err
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int32

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt32(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.Scope != nil {

		// query param scope
		var qrScope string

		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {

			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
