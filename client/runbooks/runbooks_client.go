// Code generated by go-swagger; DO NOT EDIT.

package runbooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new runbooks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for runbooks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRunbook(params *CreateRunbookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRunbookCreated, error)

	CreateRunbookExecution(params *CreateRunbookExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRunbookExecutionCreated, error)

	DeleteRunbook(params *DeleteRunbookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRunbookOK, error)

	DeleteRunbookExecution(params *DeleteRunbookExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRunbookExecutionNoContent, error)

	GetRunbook(params *GetRunbookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunbookOK, error)

	GetRunbookActionFieldOptions(params *GetRunbookActionFieldOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunbookActionFieldOptionsOK, error)

	GetRunbookExecution(params *GetRunbookExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunbookExecutionOK, error)

	GetRunbookExecutionStepScript(params *GetRunbookExecutionStepScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunbookExecutionStepScriptOK, error)

	ListRunbookActions(params *ListRunbookActionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRunbookActionsOK, error)

	ListRunbookAudits(params *ListRunbookAuditsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRunbookAuditsOK, error)

	ListRunbookExecutions(params *ListRunbookExecutionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRunbookExecutionsOK, error)

	ListRunbooks(params *ListRunbooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRunbooksOK, error)

	UpdateRunbook(params *UpdateRunbookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRunbookOK, error)

	UpdateRunbookExecutionStep(params *UpdateRunbookExecutionStepParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRunbookExecutionStepOK, error)

	UpdateRunbookExecutionStepScript(params *UpdateRunbookExecutionStepScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRunbookExecutionStepScriptOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateRunbook creates a runbook

Create a new runbook for use with incidents.
*/
func (a *Client) CreateRunbook(params *CreateRunbookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRunbookCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRunbookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_runbook",
		Method:             "POST",
		PathPattern:        "/v1/runbooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRunbookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRunbookCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_runbook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateRunbookExecution creates a runbook execution

Attaches a runbook to an incident and executes it
*/
func (a *Client) CreateRunbookExecution(params *CreateRunbookExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRunbookExecutionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRunbookExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_runbook_execution",
		Method:             "POST",
		PathPattern:        "/v1/runbooks/executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRunbookExecutionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRunbookExecutionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_runbook_execution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRunbook deletes a runbook

Delete a runbook and make it unavailable for any future incidents.
*/
func (a *Client) DeleteRunbook(params *DeleteRunbookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRunbookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRunbookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_runbook",
		Method:             "DELETE",
		PathPattern:        "/v1/runbooks/{runbook_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRunbookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRunbookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_runbook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRunbookExecution terminates a runbook execution

Terminates a runbook execution, preventing any further steps from being executed
*/
func (a *Client) DeleteRunbookExecution(params *DeleteRunbookExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRunbookExecutionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRunbookExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_runbook_execution",
		Method:             "DELETE",
		PathPattern:        "/v1/runbooks/executions/{execution_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRunbookExecutionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRunbookExecutionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_runbook_execution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRunbook gets a runbook

Get a runbook and all its configuration
*/
func (a *Client) GetRunbook(params *GetRunbookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunbookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_runbook",
		Method:             "GET",
		PathPattern:        "/v1/runbooks/{runbook_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunbookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_runbook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRunbookActionFieldOptions lists select options for a runbook integration action field

List select options for a runbook integration action field
*/
func (a *Client) GetRunbookActionFieldOptions(params *GetRunbookActionFieldOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunbookActionFieldOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookActionFieldOptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_runbook_action_field_options",
		Method:             "GET",
		PathPattern:        "/v1/runbooks/select_options/{integration_slug}/{action_slug}/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunbookActionFieldOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookActionFieldOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_runbook_action_field_options: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRunbookExecution gets a runbook execution

Retrieve a runbook execution by ID
*/
func (a *Client) GetRunbookExecution(params *GetRunbookExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunbookExecutionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_runbook_execution",
		Method:             "GET",
		PathPattern:        "/v1/runbooks/executions/{execution_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunbookExecutionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookExecutionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_runbook_execution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRunbookExecutionStepScript gets a step s bash script

Retrieves the bash script from a "script" step.
*/
func (a *Client) GetRunbookExecutionStepScript(params *GetRunbookExecutionStepScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunbookExecutionStepScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunbookExecutionStepScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_runbook_execution_step_script",
		Method:             "GET",
		PathPattern:        "/v1/runbooks/executions/{execution_id}/steps/{step_id}/script",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunbookExecutionStepScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunbookExecutionStepScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_runbook_execution_step_script: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRunbookActions lists runbook actions

List all runbook actions available through your connected integrations
*/
func (a *Client) ListRunbookActions(params *ListRunbookActionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRunbookActionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRunbookActionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_runbook_actions",
		Method:             "GET",
		PathPattern:        "/v1/runbooks/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRunbookActionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRunbookActionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_runbook_actions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRunbookAudits lists runbook audits

Please contact support to enable audit logging for your account.
*/
func (a *Client) ListRunbookAudits(params *ListRunbookAuditsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRunbookAuditsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRunbookAuditsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_runbook_audits",
		Method:             "GET",
		PathPattern:        "/v1/runbook_audits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRunbookAuditsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRunbookAuditsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_runbook_audits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRunbookExecutions lists runbook executions

List all runbook executions across all runbooks
*/
func (a *Client) ListRunbookExecutions(params *ListRunbookExecutionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRunbookExecutionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRunbookExecutionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_runbook_executions",
		Method:             "GET",
		PathPattern:        "/v1/runbooks/executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRunbookExecutionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRunbookExecutionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_runbook_executions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRunbooks lists runbooks

Lists all available runbooks.
*/
func (a *Client) ListRunbooks(params *ListRunbooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRunbooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRunbooksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_runbooks",
		Method:             "GET",
		PathPattern:        "/v1/runbooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRunbooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRunbooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_runbooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateRunbook updates a runbook

	Update a runbook and any attachment rules associated with it. This endpoint is used to configure nearly everything

about a runbook, including but not limited to the steps, environments, attachment rules, and severities.
*/
func (a *Client) UpdateRunbook(params *UpdateRunbookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRunbookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRunbookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_runbook",
		Method:             "PUT",
		PathPattern:        "/v1/runbooks/{runbook_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRunbookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRunbookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_runbook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRunbookExecutionStep updates a runbook step execution

Updates a runbook step execution, especially for changing the state of a step execution.
*/
func (a *Client) UpdateRunbookExecutionStep(params *UpdateRunbookExecutionStepParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRunbookExecutionStepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRunbookExecutionStepParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_runbook_execution_step",
		Method:             "PUT",
		PathPattern:        "/v1/runbooks/executions/{execution_id}/steps/{step_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRunbookExecutionStepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRunbookExecutionStepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_runbook_execution_step: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRunbookExecutionStepScript updates a script step s execution status

Updates the execution's step.
*/
func (a *Client) UpdateRunbookExecutionStepScript(params *UpdateRunbookExecutionStepScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRunbookExecutionStepScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRunbookExecutionStepScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_runbook_execution_step_script",
		Method:             "PUT",
		PathPattern:        "/v1/runbooks/executions/{execution_id}/steps/{step_id}/script/{state}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRunbookExecutionStepScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRunbookExecutionStepScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_runbook_execution_step_script: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
