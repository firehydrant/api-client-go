// Code generated by go-swagger; DO NOT EDIT.

package runbooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new runbooks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for runbooks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1RunbooksExecutionsExecutionID(params *DeleteV1RunbooksExecutionsExecutionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1RunbooksExecutionsExecutionIDNoContent, error)

	DeleteV1RunbooksRunbookID(params *DeleteV1RunbooksRunbookIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1RunbooksRunbookIDOK, error)

	GetV1Runbooks(params *GetV1RunbooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksOK, error)

	GetV1RunbooksActions(params *GetV1RunbooksActionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksActionsOK, error)

	GetV1RunbooksExecutions(params *GetV1RunbooksExecutionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksExecutionsOK, error)

	GetV1RunbooksExecutionsExecutionID(params *GetV1RunbooksExecutionsExecutionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksExecutionsExecutionIDOK, error)

	GetV1RunbooksExecutionsExecutionIDStepsStepIDScript(params *GetV1RunbooksExecutionsExecutionIDStepsStepIDScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksExecutionsExecutionIDStepsStepIDScriptOK, error)

	GetV1RunbooksExecutionsExecutionIDStepsStepIDVotesStatus(params *GetV1RunbooksExecutionsExecutionIDStepsStepIDVotesStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksExecutionsExecutionIDStepsStepIDVotesStatusOK, error)

	GetV1RunbooksExecutionsExecutionIDVotesStatus(params *GetV1RunbooksExecutionsExecutionIDVotesStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksExecutionsExecutionIDVotesStatusOK, error)

	GetV1RunbooksRunbookID(params *GetV1RunbooksRunbookIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksRunbookIDOK, error)

	GetV1RunbooksSelectOptionsIntegrationSlugActionSlugField(params *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldOK, error)

	PatchV1RunbooksExecutionsExecutionIDStepsStepIDVotes(params *PatchV1RunbooksExecutionsExecutionIDStepsStepIDVotesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1RunbooksExecutionsExecutionIDStepsStepIDVotesOK, error)

	PatchV1RunbooksExecutionsExecutionIDVotes(params *PatchV1RunbooksExecutionsExecutionIDVotesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1RunbooksExecutionsExecutionIDVotesOK, error)

	PostV1Runbooks(params *PostV1RunbooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1RunbooksCreated, error)

	PostV1RunbooksExecutions(params *PostV1RunbooksExecutionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1RunbooksExecutionsCreated, error)

	PutV1RunbooksExecutionsExecutionIDStepsStepID(params *PutV1RunbooksExecutionsExecutionIDStepsStepIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1RunbooksExecutionsExecutionIDStepsStepIDOK, error)

	PutV1RunbooksExecutionsExecutionIDStepsStepIDScriptState(params *PutV1RunbooksExecutionsExecutionIDStepsStepIDScriptStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1RunbooksExecutionsExecutionIDStepsStepIDScriptStateOK, error)

	PutV1RunbooksRunbookID(params *PutV1RunbooksRunbookIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1RunbooksRunbookIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteV1RunbooksExecutionsExecutionID deletes a runbook execution

  Deletes a runbook execution. Must be done before the execution has started.
*/
func (a *Client) DeleteV1RunbooksExecutionsExecutionID(params *DeleteV1RunbooksExecutionsExecutionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1RunbooksExecutionsExecutionIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1RunbooksExecutionsExecutionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1RunbooksExecutionsExecutionId",
		Method:             "DELETE",
		PathPattern:        "/v1/runbooks/executions/{execution_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1RunbooksExecutionsExecutionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1RunbooksExecutionsExecutionIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1RunbooksExecutionsExecutionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteV1RunbooksRunbookID deletes a runbook

  Delete a runbook and make it unavailable for any future incidents.
*/
func (a *Client) DeleteV1RunbooksRunbookID(params *DeleteV1RunbooksRunbookIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1RunbooksRunbookIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1RunbooksRunbookIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1RunbooksRunbookId",
		Method:             "DELETE",
		PathPattern:        "/v1/runbooks/{runbook_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1RunbooksRunbookIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1RunbooksRunbookIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1RunbooksRunbookId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1Runbooks lists runbooks

  Lists all available runbooks.
*/
func (a *Client) GetV1Runbooks(params *GetV1RunbooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1RunbooksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1Runbooks",
		Method:             "GET",
		PathPattern:        "/v1/runbooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1RunbooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1RunbooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1Runbooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1RunbooksActions lists all runbook actions

  List all Runbook actions available through your connected integrations
*/
func (a *Client) GetV1RunbooksActions(params *GetV1RunbooksActionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksActionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1RunbooksActionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1RunbooksActions",
		Method:             "GET",
		PathPattern:        "/v1/runbooks/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1RunbooksActionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1RunbooksActionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1RunbooksActions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1RunbooksExecutions lists all executions of runbooks

  List all Runbook executions across all Runbooks
*/
func (a *Client) GetV1RunbooksExecutions(params *GetV1RunbooksExecutionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksExecutionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1RunbooksExecutionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1RunbooksExecutions",
		Method:             "GET",
		PathPattern:        "/v1/runbooks/executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1RunbooksExecutionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1RunbooksExecutionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1RunbooksExecutions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1RunbooksExecutionsExecutionID get v1 runbooks executions execution Id API
*/
func (a *Client) GetV1RunbooksExecutionsExecutionID(params *GetV1RunbooksExecutionsExecutionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksExecutionsExecutionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1RunbooksExecutionsExecutionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1RunbooksExecutionsExecutionId",
		Method:             "GET",
		PathPattern:        "/v1/runbooks/executions/{execution_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1RunbooksExecutionsExecutionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1RunbooksExecutionsExecutionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1RunbooksExecutionsExecutionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1RunbooksExecutionsExecutionIDStepsStepIDScript retrieves the bash script from a script step

  Retrieves the bash script from a "script" step.
*/
func (a *Client) GetV1RunbooksExecutionsExecutionIDStepsStepIDScript(params *GetV1RunbooksExecutionsExecutionIDStepsStepIDScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksExecutionsExecutionIDStepsStepIDScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1RunbooksExecutionsExecutionIDStepsStepIDScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1RunbooksExecutionsExecutionIdStepsStepIdScript",
		Method:             "GET",
		PathPattern:        "/v1/runbooks/executions/{execution_id}/steps/{step_id}/script",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1RunbooksExecutionsExecutionIDStepsStepIDScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1RunbooksExecutionsExecutionIDStepsStepIDScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1RunbooksExecutionsExecutionIdStepsStepIdScript: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1RunbooksExecutionsExecutionIDStepsStepIDVotesStatus returns the status of the votes

  Returns the status of the votes
*/
func (a *Client) GetV1RunbooksExecutionsExecutionIDStepsStepIDVotesStatus(params *GetV1RunbooksExecutionsExecutionIDStepsStepIDVotesStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksExecutionsExecutionIDStepsStepIDVotesStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1RunbooksExecutionsExecutionIDStepsStepIDVotesStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1RunbooksExecutionsExecutionIdStepsStepIdVotesStatus",
		Method:             "GET",
		PathPattern:        "/v1/runbooks/executions/{execution_id}/steps/{step_id}/votes/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1RunbooksExecutionsExecutionIDStepsStepIDVotesStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1RunbooksExecutionsExecutionIDStepsStepIDVotesStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1RunbooksExecutionsExecutionIdStepsStepIdVotesStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1RunbooksExecutionsExecutionIDVotesStatus returns the status of the votes

  Returns the status of the votes
*/
func (a *Client) GetV1RunbooksExecutionsExecutionIDVotesStatus(params *GetV1RunbooksExecutionsExecutionIDVotesStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksExecutionsExecutionIDVotesStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1RunbooksExecutionsExecutionIDVotesStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1RunbooksExecutionsExecutionIdVotesStatus",
		Method:             "GET",
		PathPattern:        "/v1/runbooks/executions/{execution_id}/votes/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1RunbooksExecutionsExecutionIDVotesStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1RunbooksExecutionsExecutionIDVotesStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1RunbooksExecutionsExecutionIdVotesStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1RunbooksRunbookID retrieves a runbook

  Get a runbook and all its configuration
*/
func (a *Client) GetV1RunbooksRunbookID(params *GetV1RunbooksRunbookIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksRunbookIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1RunbooksRunbookIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1RunbooksRunbookId",
		Method:             "GET",
		PathPattern:        "/v1/runbooks/{runbook_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1RunbooksRunbookIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1RunbooksRunbookIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1RunbooksRunbookId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1RunbooksSelectOptionsIntegrationSlugActionSlugField get v1 runbooks select options integration slug action slug field API
*/
func (a *Client) GetV1RunbooksSelectOptionsIntegrationSlugActionSlugField(params *GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1RunbooksSelectOptionsIntegrationSlugActionSlugField",
		Method:             "GET",
		PathPattern:        "/v1/runbooks/select_options/{integration_slug}/{action_slug}/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1RunbooksSelectOptionsIntegrationSlugActionSlugFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1RunbooksSelectOptionsIntegrationSlugActionSlugField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchV1RunbooksExecutionsExecutionIDStepsStepIDVotes patch v1 runbooks executions execution Id steps step Id votes API
*/
func (a *Client) PatchV1RunbooksExecutionsExecutionIDStepsStepIDVotes(params *PatchV1RunbooksExecutionsExecutionIDStepsStepIDVotesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1RunbooksExecutionsExecutionIDStepsStepIDVotesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1RunbooksExecutionsExecutionIDStepsStepIDVotesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1RunbooksExecutionsExecutionIdStepsStepIdVotes",
		Method:             "PATCH",
		PathPattern:        "/v1/runbooks/executions/{execution_id}/steps/{step_id}/votes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1RunbooksExecutionsExecutionIDStepsStepIDVotesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1RunbooksExecutionsExecutionIDStepsStepIDVotesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1RunbooksExecutionsExecutionIdStepsStepIdVotes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchV1RunbooksExecutionsExecutionIDVotes patch v1 runbooks executions execution Id votes API
*/
func (a *Client) PatchV1RunbooksExecutionsExecutionIDVotes(params *PatchV1RunbooksExecutionsExecutionIDVotesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1RunbooksExecutionsExecutionIDVotesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1RunbooksExecutionsExecutionIDVotesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1RunbooksExecutionsExecutionIdVotes",
		Method:             "PATCH",
		PathPattern:        "/v1/runbooks/executions/{execution_id}/votes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1RunbooksExecutionsExecutionIDVotesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1RunbooksExecutionsExecutionIDVotesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1RunbooksExecutionsExecutionIdVotes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostV1Runbooks creates a runbook

  Create a new runbook for use with incidents.
*/
func (a *Client) PostV1Runbooks(params *PostV1RunbooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1RunbooksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1RunbooksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1Runbooks",
		Method:             "POST",
		PathPattern:        "/v1/runbooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1RunbooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1RunbooksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1Runbooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostV1RunbooksExecutions post v1 runbooks executions API
*/
func (a *Client) PostV1RunbooksExecutions(params *PostV1RunbooksExecutionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1RunbooksExecutionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1RunbooksExecutionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1RunbooksExecutions",
		Method:             "POST",
		PathPattern:        "/v1/runbooks/executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1RunbooksExecutionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1RunbooksExecutionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1RunbooksExecutions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutV1RunbooksExecutionsExecutionIDStepsStepID updates a runbook step execution

  Updates a runbook step execution, especially for changing the state of a step execution.
*/
func (a *Client) PutV1RunbooksExecutionsExecutionIDStepsStepID(params *PutV1RunbooksExecutionsExecutionIDStepsStepIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1RunbooksExecutionsExecutionIDStepsStepIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1RunbooksExecutionsExecutionIDStepsStepIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putV1RunbooksExecutionsExecutionIdStepsStepId",
		Method:             "PUT",
		PathPattern:        "/v1/runbooks/executions/{execution_id}/steps/{step_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1RunbooksExecutionsExecutionIDStepsStepIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutV1RunbooksExecutionsExecutionIDStepsStepIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putV1RunbooksExecutionsExecutionIdStepsStepId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutV1RunbooksExecutionsExecutionIDStepsStepIDScriptState updates the execution s step

  Updates the execution's step.
*/
func (a *Client) PutV1RunbooksExecutionsExecutionIDStepsStepIDScriptState(params *PutV1RunbooksExecutionsExecutionIDStepsStepIDScriptStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1RunbooksExecutionsExecutionIDStepsStepIDScriptStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1RunbooksExecutionsExecutionIDStepsStepIDScriptStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putV1RunbooksExecutionsExecutionIdStepsStepIdScriptState",
		Method:             "PUT",
		PathPattern:        "/v1/runbooks/executions/{execution_id}/steps/{step_id}/script/{state}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1RunbooksExecutionsExecutionIDStepsStepIDScriptStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutV1RunbooksExecutionsExecutionIDStepsStepIDScriptStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putV1RunbooksExecutionsExecutionIdStepsStepIdScriptState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutV1RunbooksRunbookID updates a runbook

  Update a runbook and any attachment rules associated with it. This endpoint is used to configure nearly everything
about a runbook, including but not limited to the steps, environments, attachment rules, and severities.

*/
func (a *Client) PutV1RunbooksRunbookID(params *PutV1RunbooksRunbookIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1RunbooksRunbookIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1RunbooksRunbookIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putV1RunbooksRunbookId",
		Method:             "PUT",
		PathPattern:        "/v1/runbooks/{runbook_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1RunbooksRunbookIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutV1RunbooksRunbookIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putV1RunbooksRunbookId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
