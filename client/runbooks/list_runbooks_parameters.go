// Code generated by go-swagger; DO NOT EDIT.

package runbooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListRunbooksParams creates a new ListRunbooksParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListRunbooksParams() *ListRunbooksParams {
	return &ListRunbooksParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListRunbooksParamsWithTimeout creates a new ListRunbooksParams object
// with the ability to set a timeout on a request.
func NewListRunbooksParamsWithTimeout(timeout time.Duration) *ListRunbooksParams {
	return &ListRunbooksParams{
		timeout: timeout,
	}
}

// NewListRunbooksParamsWithContext creates a new ListRunbooksParams object
// with the ability to set a context for a request.
func NewListRunbooksParamsWithContext(ctx context.Context) *ListRunbooksParams {
	return &ListRunbooksParams{
		Context: ctx,
	}
}

// NewListRunbooksParamsWithHTTPClient creates a new ListRunbooksParams object
// with the ability to set a custom HTTPClient for a request.
func NewListRunbooksParamsWithHTTPClient(client *http.Client) *ListRunbooksParams {
	return &ListRunbooksParams{
		HTTPClient: client,
	}
}

/*
ListRunbooksParams contains all the parameters to send to the API endpoint

	for the list runbooks operation.

	Typically these are written to a http.Request.
*/
type ListRunbooksParams struct {

	/* Name.

	   A query to search runbooks by their name
	*/
	Name *string

	/* OrderBy.

	   Sort runbooks by their updated date or name. Accepts 'updated_at', 'name', and 'created_at'.
	*/
	OrderBy *string

	/* OrderDirection.

	   Allows assigning a direction to how the specified `order_by` parameter is sorted. This parameter must be paired with `order_by` and does nothing on its own.
	*/
	OrderDirection *string

	/* Owners.

	   A query to search runbooks by their owners
	*/
	Owners *string

	// Page.
	//
	// Format: int32
	Page *int32

	// PerPage.
	//
	// Format: int32
	PerPage *int32

	/* Sort.

	   Sort runbooks by their updated date. Accepts 'asc', 'desc'. This parameter is deprecated in favor of 'order_by' and 'order_direction'.
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list runbooks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListRunbooksParams) WithDefaults() *ListRunbooksParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list runbooks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListRunbooksParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list runbooks params
func (o *ListRunbooksParams) WithTimeout(timeout time.Duration) *ListRunbooksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list runbooks params
func (o *ListRunbooksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list runbooks params
func (o *ListRunbooksParams) WithContext(ctx context.Context) *ListRunbooksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list runbooks params
func (o *ListRunbooksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list runbooks params
func (o *ListRunbooksParams) WithHTTPClient(client *http.Client) *ListRunbooksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list runbooks params
func (o *ListRunbooksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the list runbooks params
func (o *ListRunbooksParams) WithName(name *string) *ListRunbooksParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the list runbooks params
func (o *ListRunbooksParams) SetName(name *string) {
	o.Name = name
}

// WithOrderBy adds the orderBy to the list runbooks params
func (o *ListRunbooksParams) WithOrderBy(orderBy *string) *ListRunbooksParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the list runbooks params
func (o *ListRunbooksParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithOrderDirection adds the orderDirection to the list runbooks params
func (o *ListRunbooksParams) WithOrderDirection(orderDirection *string) *ListRunbooksParams {
	o.SetOrderDirection(orderDirection)
	return o
}

// SetOrderDirection adds the orderDirection to the list runbooks params
func (o *ListRunbooksParams) SetOrderDirection(orderDirection *string) {
	o.OrderDirection = orderDirection
}

// WithOwners adds the owners to the list runbooks params
func (o *ListRunbooksParams) WithOwners(owners *string) *ListRunbooksParams {
	o.SetOwners(owners)
	return o
}

// SetOwners adds the owners to the list runbooks params
func (o *ListRunbooksParams) SetOwners(owners *string) {
	o.Owners = owners
}

// WithPage adds the page to the list runbooks params
func (o *ListRunbooksParams) WithPage(page *int32) *ListRunbooksParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list runbooks params
func (o *ListRunbooksParams) SetPage(page *int32) {
	o.Page = page
}

// WithPerPage adds the perPage to the list runbooks params
func (o *ListRunbooksParams) WithPerPage(perPage *int32) *ListRunbooksParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the list runbooks params
func (o *ListRunbooksParams) SetPerPage(perPage *int32) {
	o.PerPage = perPage
}

// WithSort adds the sort to the list runbooks params
func (o *ListRunbooksParams) WithSort(sort *string) *ListRunbooksParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the list runbooks params
func (o *ListRunbooksParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *ListRunbooksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}
	}

	if o.OrderDirection != nil {

		// query param order_direction
		var qrOrderDirection string

		if o.OrderDirection != nil {
			qrOrderDirection = *o.OrderDirection
		}
		qOrderDirection := qrOrderDirection
		if qOrderDirection != "" {

			if err := r.SetQueryParam("order_direction", qOrderDirection); err != nil {
				return err
			}
		}
	}

	if o.Owners != nil {

		// query param owners
		var qrOwners string

		if o.Owners != nil {
			qrOwners = *o.Owners
		}
		qOwners := qrOwners
		if qOwners != "" {

			if err := r.SetQueryParam("owners", qOwners); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int32

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt32(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
