// Code generated by go-swagger; DO NOT EDIT.

package nunc_connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new nunc connections API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nunc connections API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1NuncConnectionsNuncConnectionID(params *DeleteV1NuncConnectionsNuncConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1NuncConnectionsNuncConnectionIDOK, error)

	GetV1NuncConnectionsNuncConnectionID(params *GetV1NuncConnectionsNuncConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1NuncConnectionsNuncConnectionIDOK, error)

	GetV1NuncConnectionsNuncConnectionIDSubscribers(params *GetV1NuncConnectionsNuncConnectionIDSubscribersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1NuncConnectionsNuncConnectionIDSubscribersOK, error)

	PostV1NuncConnections(params *PostV1NuncConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1NuncConnectionsCreated, error)

	PutV1NuncConnectionsNuncConnectionID(params *PutV1NuncConnectionsNuncConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1NuncConnectionsNuncConnectionIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteV1NuncConnectionsNuncConnectionID deletes a fire hydrant hosted status page

  Delete a FireHydrant hosted status page, stopping updates of your incidents to it.
*/
func (a *Client) DeleteV1NuncConnectionsNuncConnectionID(params *DeleteV1NuncConnectionsNuncConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1NuncConnectionsNuncConnectionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1NuncConnectionsNuncConnectionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1NuncConnectionsNuncConnectionId",
		Method:             "DELETE",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1NuncConnectionsNuncConnectionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1NuncConnectionsNuncConnectionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1NuncConnectionsNuncConnectionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1NuncConnectionsNuncConnectionID retrieves information about a fire hydrant hosted status page

  Retrieve the information displayed as part of your FireHydrant hosted status page.
*/
func (a *Client) GetV1NuncConnectionsNuncConnectionID(params *GetV1NuncConnectionsNuncConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1NuncConnectionsNuncConnectionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1NuncConnectionsNuncConnectionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1NuncConnectionsNuncConnectionId",
		Method:             "GET",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1NuncConnectionsNuncConnectionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1NuncConnectionsNuncConnectionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1NuncConnectionsNuncConnectionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1NuncConnectionsNuncConnectionIDSubscribers retrieves the list of subscribers for a status page

  Retrieves the list of subscribers for a status page.
*/
func (a *Client) GetV1NuncConnectionsNuncConnectionIDSubscribers(params *GetV1NuncConnectionsNuncConnectionIDSubscribersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1NuncConnectionsNuncConnectionIDSubscribersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1NuncConnectionsNuncConnectionIDSubscribersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1NuncConnectionsNuncConnectionIdSubscribers",
		Method:             "GET",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}/subscribers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1NuncConnectionsNuncConnectionIDSubscribersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1NuncConnectionsNuncConnectionIDSubscribersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1NuncConnectionsNuncConnectionIdSubscribers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostV1NuncConnections creates a fire hydrant hosted status page

  Create a new FireHydrant hosted status page for customer facing statuses.
*/
func (a *Client) PostV1NuncConnections(params *PostV1NuncConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1NuncConnectionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1NuncConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1NuncConnections",
		Method:             "POST",
		PathPattern:        "/v1/nunc_connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1NuncConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1NuncConnectionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1NuncConnections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutV1NuncConnectionsNuncConnectionID updates a fire hydrant hosted status page

  Update your company's information and other components in the specified FireHydrant hosted status page.
*/
func (a *Client) PutV1NuncConnectionsNuncConnectionID(params *PutV1NuncConnectionsNuncConnectionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutV1NuncConnectionsNuncConnectionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1NuncConnectionsNuncConnectionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putV1NuncConnectionsNuncConnectionId",
		Method:             "PUT",
		PathPattern:        "/v1/nunc_connections/{nunc_connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1NuncConnectionsNuncConnectionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutV1NuncConnectionsNuncConnectionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putV1NuncConnectionsNuncConnectionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
