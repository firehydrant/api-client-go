// Code generated by go-swagger; DO NOT EDIT.

package incident_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListCustomFieldSelectOptionsParams creates a new ListCustomFieldSelectOptionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListCustomFieldSelectOptionsParams() *ListCustomFieldSelectOptionsParams {
	return &ListCustomFieldSelectOptionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListCustomFieldSelectOptionsParamsWithTimeout creates a new ListCustomFieldSelectOptionsParams object
// with the ability to set a timeout on a request.
func NewListCustomFieldSelectOptionsParamsWithTimeout(timeout time.Duration) *ListCustomFieldSelectOptionsParams {
	return &ListCustomFieldSelectOptionsParams{
		timeout: timeout,
	}
}

// NewListCustomFieldSelectOptionsParamsWithContext creates a new ListCustomFieldSelectOptionsParams object
// with the ability to set a context for a request.
func NewListCustomFieldSelectOptionsParamsWithContext(ctx context.Context) *ListCustomFieldSelectOptionsParams {
	return &ListCustomFieldSelectOptionsParams{
		Context: ctx,
	}
}

// NewListCustomFieldSelectOptionsParamsWithHTTPClient creates a new ListCustomFieldSelectOptionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListCustomFieldSelectOptionsParamsWithHTTPClient(client *http.Client) *ListCustomFieldSelectOptionsParams {
	return &ListCustomFieldSelectOptionsParams{
		HTTPClient: client,
	}
}

/*
ListCustomFieldSelectOptionsParams contains all the parameters to send to the API endpoint

	for the list custom field select options operation.

	Typically these are written to a http.Request.
*/
type ListCustomFieldSelectOptionsParams struct {

	/* AllVersions.

	   If true, return all versions of the custom field definition.
	*/
	AllVersions *bool

	// FieldID.
	FieldID string

	/* Query.

	   Text string of a query for filtering values.
	*/
	Query *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list custom field select options params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListCustomFieldSelectOptionsParams) WithDefaults() *ListCustomFieldSelectOptionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list custom field select options params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListCustomFieldSelectOptionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list custom field select options params
func (o *ListCustomFieldSelectOptionsParams) WithTimeout(timeout time.Duration) *ListCustomFieldSelectOptionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list custom field select options params
func (o *ListCustomFieldSelectOptionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list custom field select options params
func (o *ListCustomFieldSelectOptionsParams) WithContext(ctx context.Context) *ListCustomFieldSelectOptionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list custom field select options params
func (o *ListCustomFieldSelectOptionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list custom field select options params
func (o *ListCustomFieldSelectOptionsParams) WithHTTPClient(client *http.Client) *ListCustomFieldSelectOptionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list custom field select options params
func (o *ListCustomFieldSelectOptionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllVersions adds the allVersions to the list custom field select options params
func (o *ListCustomFieldSelectOptionsParams) WithAllVersions(allVersions *bool) *ListCustomFieldSelectOptionsParams {
	o.SetAllVersions(allVersions)
	return o
}

// SetAllVersions adds the allVersions to the list custom field select options params
func (o *ListCustomFieldSelectOptionsParams) SetAllVersions(allVersions *bool) {
	o.AllVersions = allVersions
}

// WithFieldID adds the fieldID to the list custom field select options params
func (o *ListCustomFieldSelectOptionsParams) WithFieldID(fieldID string) *ListCustomFieldSelectOptionsParams {
	o.SetFieldID(fieldID)
	return o
}

// SetFieldID adds the fieldId to the list custom field select options params
func (o *ListCustomFieldSelectOptionsParams) SetFieldID(fieldID string) {
	o.FieldID = fieldID
}

// WithQuery adds the query to the list custom field select options params
func (o *ListCustomFieldSelectOptionsParams) WithQuery(query *string) *ListCustomFieldSelectOptionsParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the list custom field select options params
func (o *ListCustomFieldSelectOptionsParams) SetQuery(query *string) {
	o.Query = query
}

// WriteToRequest writes these params to a swagger request
func (o *ListCustomFieldSelectOptionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllVersions != nil {

		// query param all_versions
		var qrAllVersions bool

		if o.AllVersions != nil {
			qrAllVersions = *o.AllVersions
		}
		qAllVersions := swag.FormatBool(qrAllVersions)
		if qAllVersions != "" {

			if err := r.SetQueryParam("all_versions", qAllVersions); err != nil {
				return err
			}
		}
	}

	// path param field_id
	if err := r.SetPathParam("field_id", o.FieldID); err != nil {
		return err
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
