// Code generated by go-swagger; DO NOT EDIT.

package incident_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new incident settings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for incident settings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCustomFieldDefinition(params *CreateCustomFieldDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCustomFieldDefinitionCreated, error)

	CreateIncidentRole(params *CreateIncidentRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentRoleCreated, error)

	CreateIncidentType(params *CreateIncidentTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentTypeCreated, error)

	CreateLifecycleMeasurementDefinition(params *CreateLifecycleMeasurementDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateLifecycleMeasurementDefinitionCreated, error)

	CreateLifecycleMilestone(params *CreateLifecycleMilestoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateLifecycleMilestoneCreated, error)

	CreatePriority(params *CreatePriorityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePriorityCreated, error)

	CreateSeverity(params *CreateSeverityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSeverityCreated, error)

	CreateSeverityMatrixCondition(params *CreateSeverityMatrixConditionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSeverityMatrixConditionCreated, error)

	CreateSeverityMatrixImpact(params *CreateSeverityMatrixImpactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSeverityMatrixImpactCreated, error)

	DeleteCustomFieldDefinition(params *DeleteCustomFieldDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCustomFieldDefinitionOK, error)

	DeleteIncidentRole(params *DeleteIncidentRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentRoleOK, error)

	DeleteIncidentType(params *DeleteIncidentTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentTypeOK, error)

	DeleteLifecycleMeasurementDefinition(params *DeleteLifecycleMeasurementDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteLifecycleMeasurementDefinitionNoContent, error)

	DeleteLifecycleMilestone(params *DeleteLifecycleMilestoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteLifecycleMilestoneOK, error)

	DeletePriority(params *DeletePriorityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePriorityOK, error)

	DeleteSeverity(params *DeleteSeverityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSeverityOK, error)

	DeleteSeverityMatrixCondition(params *DeleteSeverityMatrixConditionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSeverityMatrixConditionOK, error)

	DeleteSeverityMatrixImpact(params *DeleteSeverityMatrixImpactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSeverityMatrixImpactOK, error)

	GetFormConfiguration(params *GetFormConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFormConfigurationOK, error)

	GetIncidentRole(params *GetIncidentRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentRoleOK, error)

	GetIncidentType(params *GetIncidentTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentTypeOK, error)

	GetLifecycleMeasurementDefinition(params *GetLifecycleMeasurementDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLifecycleMeasurementDefinitionOK, error)

	GetPriority(params *GetPriorityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPriorityOK, error)

	GetSeverity(params *GetSeverityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSeverityOK, error)

	GetSeverityMatrix(params *GetSeverityMatrixParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSeverityMatrixOK, error)

	GetSeverityMatrixCondition(params *GetSeverityMatrixConditionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSeverityMatrixConditionOK, error)

	ListCustomFieldDefinitions(params *ListCustomFieldDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCustomFieldDefinitionsOK, error)

	ListCustomFieldSelectOptions(params *ListCustomFieldSelectOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCustomFieldSelectOptionsOK, error)

	ListIncidentRoles(params *ListIncidentRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentRolesOK, error)

	ListIncidentTags(params *ListIncidentTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentTagsOK, error)

	ListIncidentTypes(params *ListIncidentTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentTypesOK, error)

	ListLifecycleMeasurementDefinitions(params *ListLifecycleMeasurementDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListLifecycleMeasurementDefinitionsOK, error)

	ListLifecyclePhases(params *ListLifecyclePhasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListLifecyclePhasesOK, error)

	ListPriorities(params *ListPrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPrioritiesOK, error)

	ListSeverities(params *ListSeveritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSeveritiesOK, error)

	ListSeverityMatrixConditions(params *ListSeverityMatrixConditionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSeverityMatrixConditionsOK, error)

	ListSeverityMatrixImpacts(params *ListSeverityMatrixImpactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSeverityMatrixImpactsOK, error)

	UpdateCustomFieldDefinition(params *UpdateCustomFieldDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCustomFieldDefinitionOK, error)

	UpdateIncidentRole(params *UpdateIncidentRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentRoleOK, error)

	UpdateIncidentType(params *UpdateIncidentTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentTypeOK, error)

	UpdateLifecycleMeasurementDefinition(params *UpdateLifecycleMeasurementDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateLifecycleMeasurementDefinitionOK, error)

	UpdateLifecycleMilestone(params *UpdateLifecycleMilestoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateLifecycleMilestoneOK, error)

	UpdatePriority(params *UpdatePriorityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePriorityOK, error)

	UpdateSeverity(params *UpdateSeverityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSeverityOK, error)

	UpdateSeverityMatrix(params *UpdateSeverityMatrixParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSeverityMatrixOK, error)

	UpdateSeverityMatrixCondition(params *UpdateSeverityMatrixConditionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSeverityMatrixConditionOK, error)

	UpdateSeverityMatrixImpact(params *UpdateSeverityMatrixImpactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSeverityMatrixImpactOK, error)

	ValidateIncidentTags(params *ValidateIncidentTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateIncidentTagsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateCustomFieldDefinition creates a custom field definition

Create a new custom field definition
*/
func (a *Client) CreateCustomFieldDefinition(params *CreateCustomFieldDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCustomFieldDefinitionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCustomFieldDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_custom_field_definition",
		Method:             "POST",
		PathPattern:        "/v1/custom_fields/definitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCustomFieldDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCustomFieldDefinitionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_custom_field_definition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIncidentRole creates an incident role

Create a new incident role
*/
func (a *Client) CreateIncidentRole(params *CreateIncidentRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentRoleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_incident_role",
		Method:             "POST",
		PathPattern:        "/v1/incident_roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIncidentRoleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_incident_role: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIncidentType creates an incident type

Create a new incident type
*/
func (a *Client) CreateIncidentType(params *CreateIncidentTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIncidentTypeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_incident_type",
		Method:             "POST",
		PathPattern:        "/v1/incident_types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIncidentTypeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_incident_type: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateLifecycleMeasurementDefinition creates a measurement definition

Create a new measurement definition
*/
func (a *Client) CreateLifecycleMeasurementDefinition(params *CreateLifecycleMeasurementDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateLifecycleMeasurementDefinitionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLifecycleMeasurementDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_lifecycle_measurement_definition",
		Method:             "POST",
		PathPattern:        "/v1/lifecycles/measurement_definitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLifecycleMeasurementDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLifecycleMeasurementDefinitionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_lifecycle_measurement_definition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateLifecycleMilestone creates a milestone

Create a new milestone
*/
func (a *Client) CreateLifecycleMilestone(params *CreateLifecycleMilestoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateLifecycleMilestoneCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLifecycleMilestoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_lifecycle_milestone",
		Method:             "POST",
		PathPattern:        "/v1/lifecycles/milestones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLifecycleMilestoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLifecycleMilestoneCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_lifecycle_milestone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePriority creates a priority

Create a new priority
*/
func (a *Client) CreatePriority(params *CreatePriorityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePriorityCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePriorityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_priority",
		Method:             "POST",
		PathPattern:        "/v1/priorities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePriorityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePriorityCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_priority: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSeverity creates a severity

Create a new severity
*/
func (a *Client) CreateSeverity(params *CreateSeverityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSeverityCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSeverityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_severity",
		Method:             "POST",
		PathPattern:        "/v1/severities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSeverityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSeverityCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_severity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSeverityMatrixCondition creates a severity matrix condition

Create a new condition
*/
func (a *Client) CreateSeverityMatrixCondition(params *CreateSeverityMatrixConditionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSeverityMatrixConditionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSeverityMatrixConditionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_severity_matrix_condition",
		Method:             "POST",
		PathPattern:        "/v1/severity_matrix/conditions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSeverityMatrixConditionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSeverityMatrixConditionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_severity_matrix_condition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSeverityMatrixImpact creates a severity matrix impact

Create a new impact
*/
func (a *Client) CreateSeverityMatrixImpact(params *CreateSeverityMatrixImpactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSeverityMatrixImpactCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSeverityMatrixImpactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_severity_matrix_impact",
		Method:             "POST",
		PathPattern:        "/v1/severity_matrix/impacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSeverityMatrixImpactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSeverityMatrixImpactCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_severity_matrix_impact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCustomFieldDefinition deletes a custom field definition

Delete a custom field definition
*/
func (a *Client) DeleteCustomFieldDefinition(params *DeleteCustomFieldDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCustomFieldDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomFieldDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_custom_field_definition",
		Method:             "DELETE",
		PathPattern:        "/v1/custom_fields/definitions/{field_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCustomFieldDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCustomFieldDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_custom_field_definition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIncidentRole archives an incident role

Archives an incident role which will hide it from lists and metrics
*/
func (a *Client) DeleteIncidentRole(params *DeleteIncidentRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIncidentRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_incident_role",
		Method:             "DELETE",
		PathPattern:        "/v1/incident_roles/{incident_role_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIncidentRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIncidentRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_incident_role: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIncidentType archives an incident type

Archives an incident type which will hide it from lists and metrics
*/
func (a *Client) DeleteIncidentType(params *DeleteIncidentTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIncidentTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIncidentTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_incident_type",
		Method:             "DELETE",
		PathPattern:        "/v1/incident_types/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIncidentTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIncidentTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_incident_type: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLifecycleMeasurementDefinition archives a measurement definition

Archives a measurement definition which will hide it from lists and metrics
*/
func (a *Client) DeleteLifecycleMeasurementDefinition(params *DeleteLifecycleMeasurementDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteLifecycleMeasurementDefinitionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLifecycleMeasurementDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_lifecycle_measurement_definition",
		Method:             "DELETE",
		PathPattern:        "/v1/lifecycles/measurement_definitions/{measurement_definition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLifecycleMeasurementDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLifecycleMeasurementDefinitionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_lifecycle_measurement_definition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLifecycleMilestone deletes a milestone

Delete a milestone
*/
func (a *Client) DeleteLifecycleMilestone(params *DeleteLifecycleMilestoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteLifecycleMilestoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLifecycleMilestoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_lifecycle_milestone",
		Method:             "DELETE",
		PathPattern:        "/v1/lifecycles/milestones/{milestone_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLifecycleMilestoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLifecycleMilestoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_lifecycle_milestone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePriority deletes a priority

Delete a specific priority
*/
func (a *Client) DeletePriority(params *DeletePriorityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePriorityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePriorityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_priority",
		Method:             "DELETE",
		PathPattern:        "/v1/priorities/{priority_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePriorityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePriorityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_priority: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSeverity deletes a severity

Delete a specific severity
*/
func (a *Client) DeleteSeverity(params *DeleteSeverityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSeverityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSeverityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_severity",
		Method:             "DELETE",
		PathPattern:        "/v1/severities/{severity_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSeverityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSeverityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_severity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSeverityMatrixCondition deletes a severity matrix condition

Delete a specific condition
*/
func (a *Client) DeleteSeverityMatrixCondition(params *DeleteSeverityMatrixConditionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSeverityMatrixConditionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSeverityMatrixConditionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_severity_matrix_condition",
		Method:             "DELETE",
		PathPattern:        "/v1/severity_matrix/conditions/{condition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSeverityMatrixConditionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSeverityMatrixConditionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_severity_matrix_condition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSeverityMatrixImpact deletes a severity matrix impact

Delete a specific impact
*/
func (a *Client) DeleteSeverityMatrixImpact(params *DeleteSeverityMatrixImpactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSeverityMatrixImpactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSeverityMatrixImpactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_severity_matrix_impact",
		Method:             "DELETE",
		PathPattern:        "/v1/severity_matrix/impacts/{impact_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSeverityMatrixImpactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSeverityMatrixImpactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_severity_matrix_impact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFormConfiguration gets a form configuration

Get a form configuration
*/
func (a *Client) GetFormConfiguration(params *GetFormConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFormConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFormConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_form_configuration",
		Method:             "GET",
		PathPattern:        "/v1/form_configurations/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFormConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFormConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_form_configuration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIncidentRole gets an incident role

Retrieve a single incident role from its ID
*/
func (a *Client) GetIncidentRole(params *GetIncidentRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncidentRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_incident_role",
		Method:             "GET",
		PathPattern:        "/v1/incident_roles/{incident_role_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncidentRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIncidentRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_incident_role: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIncidentType gets an incident type

Retrieve a single incident type from its ID
*/
func (a *Client) GetIncidentType(params *GetIncidentTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIncidentTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncidentTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_incident_type",
		Method:             "GET",
		PathPattern:        "/v1/incident_types/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncidentTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIncidentTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_incident_type: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLifecycleMeasurementDefinition gets a measurement definition

Retrieve a single measurement definition from its ID
*/
func (a *Client) GetLifecycleMeasurementDefinition(params *GetLifecycleMeasurementDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLifecycleMeasurementDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLifecycleMeasurementDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_lifecycle_measurement_definition",
		Method:             "GET",
		PathPattern:        "/v1/lifecycles/measurement_definitions/{measurement_definition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLifecycleMeasurementDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLifecycleMeasurementDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_lifecycle_measurement_definition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPriority gets a priority

Retrieve a specific priority
*/
func (a *Client) GetPriority(params *GetPriorityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPriorityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPriorityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_priority",
		Method:             "GET",
		PathPattern:        "/v1/priorities/{priority_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPriorityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPriorityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_priority: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSeverity gets a severity

Retrieve a specific severity
*/
func (a *Client) GetSeverity(params *GetSeverityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSeverityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeverityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_severity",
		Method:             "GET",
		PathPattern:        "/v1/severities/{severity_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSeverityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSeverityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_severity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSeverityMatrix gets severity matrix

Retrieve the Severity matrix for your organization and its components and configured severities.
*/
func (a *Client) GetSeverityMatrix(params *GetSeverityMatrixParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSeverityMatrixOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeverityMatrixParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_severity_matrix",
		Method:             "GET",
		PathPattern:        "/v1/severity_matrix",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSeverityMatrixReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSeverityMatrixOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_severity_matrix: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSeverityMatrixCondition gets a severity matrix condition

Retrieve a specific condition
*/
func (a *Client) GetSeverityMatrixCondition(params *GetSeverityMatrixConditionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSeverityMatrixConditionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeverityMatrixConditionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_severity_matrix_condition",
		Method:             "GET",
		PathPattern:        "/v1/severity_matrix/conditions/{condition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSeverityMatrixConditionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSeverityMatrixConditionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_severity_matrix_condition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListCustomFieldDefinitions lists custom field definitions

List all custom field definitions
*/
func (a *Client) ListCustomFieldDefinitions(params *ListCustomFieldDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCustomFieldDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCustomFieldDefinitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_custom_field_definitions",
		Method:             "GET",
		PathPattern:        "/v1/custom_fields/definitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCustomFieldDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCustomFieldDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_custom_field_definitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListCustomFieldSelectOptions gets available values for a custom field

Get the permissible values for the a currently active custom select or multi-select field.
*/
func (a *Client) ListCustomFieldSelectOptions(params *ListCustomFieldSelectOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCustomFieldSelectOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCustomFieldSelectOptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_custom_field_select_options",
		Method:             "GET",
		PathPattern:        "/v1/custom_fields/definitions/{field_id}/select_options",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCustomFieldSelectOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCustomFieldSelectOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_custom_field_select_options: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIncidentRoles lists incident roles

List all of the incident roles in the organization
*/
func (a *Client) ListIncidentRoles(params *ListIncidentRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIncidentRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_incident_roles",
		Method:             "GET",
		PathPattern:        "/v1/incident_roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIncidentRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIncidentRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_incident_roles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIncidentTags lists incident tags

List all of the incident tags in the organization
*/
func (a *Client) ListIncidentTags(params *ListIncidentTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIncidentTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_incident_tags",
		Method:             "GET",
		PathPattern:        "/v1/incident_tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIncidentTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIncidentTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_incident_tags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIncidentTypes lists incident types

List all of the incident types in the organization
*/
func (a *Client) ListIncidentTypes(params *ListIncidentTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIncidentTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIncidentTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_incident_types",
		Method:             "GET",
		PathPattern:        "/v1/incident_types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIncidentTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIncidentTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_incident_types: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListLifecycleMeasurementDefinitions lists measurement definitions

List all of the measurement definitions in the organization
*/
func (a *Client) ListLifecycleMeasurementDefinitions(params *ListLifecycleMeasurementDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListLifecycleMeasurementDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLifecycleMeasurementDefinitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_lifecycle_measurement_definitions",
		Method:             "GET",
		PathPattern:        "/v1/lifecycles/measurement_definitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListLifecycleMeasurementDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLifecycleMeasurementDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_lifecycle_measurement_definitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListLifecyclePhases lists phases and milestones

List all of the lifecycle phases and milestones in the organization
*/
func (a *Client) ListLifecyclePhases(params *ListLifecyclePhasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListLifecyclePhasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLifecyclePhasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_lifecycle_phases",
		Method:             "GET",
		PathPattern:        "/v1/lifecycles/phases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListLifecyclePhasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLifecyclePhasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_lifecycle_phases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPriorities lists priorities

Lists priorities
*/
func (a *Client) ListPriorities(params *ListPrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPrioritiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPrioritiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_priorities",
		Method:             "GET",
		PathPattern:        "/v1/priorities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListPrioritiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPrioritiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_priorities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSeverities lists severities

Lists severities
*/
func (a *Client) ListSeverities(params *ListSeveritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSeveritiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSeveritiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_severities",
		Method:             "GET",
		PathPattern:        "/v1/severities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSeveritiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSeveritiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_severities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSeverityMatrixConditions lists severity matrix conditions

Lists conditions
*/
func (a *Client) ListSeverityMatrixConditions(params *ListSeverityMatrixConditionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSeverityMatrixConditionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSeverityMatrixConditionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_severity_matrix_conditions",
		Method:             "GET",
		PathPattern:        "/v1/severity_matrix/conditions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSeverityMatrixConditionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSeverityMatrixConditionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_severity_matrix_conditions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSeverityMatrixImpacts lists severity matrix impacts

Lists impacts
*/
func (a *Client) ListSeverityMatrixImpacts(params *ListSeverityMatrixImpactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSeverityMatrixImpactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSeverityMatrixImpactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_severity_matrix_impacts",
		Method:             "GET",
		PathPattern:        "/v1/severity_matrix/impacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSeverityMatrixImpactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSeverityMatrixImpactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_severity_matrix_impacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCustomFieldDefinition updates a custom field definition

Update a single custom field definition
*/
func (a *Client) UpdateCustomFieldDefinition(params *UpdateCustomFieldDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCustomFieldDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomFieldDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_custom_field_definition",
		Method:             "PATCH",
		PathPattern:        "/v1/custom_fields/definitions/{field_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCustomFieldDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomFieldDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_custom_field_definition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIncidentRole updates an incident role

Update a single incident role from its ID
*/
func (a *Client) UpdateIncidentRole(params *UpdateIncidentRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIncidentRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_incident_role",
		Method:             "PATCH",
		PathPattern:        "/v1/incident_roles/{incident_role_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIncidentRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIncidentRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_incident_role: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIncidentType updates an incident type

Update a single incident type from its ID
*/
func (a *Client) UpdateIncidentType(params *UpdateIncidentTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIncidentTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIncidentTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_incident_type",
		Method:             "PATCH",
		PathPattern:        "/v1/incident_types/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIncidentTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIncidentTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_incident_type: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateLifecycleMeasurementDefinition updates a measurement definition

Update a single measurement definition from its ID
*/
func (a *Client) UpdateLifecycleMeasurementDefinition(params *UpdateLifecycleMeasurementDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateLifecycleMeasurementDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLifecycleMeasurementDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_lifecycle_measurement_definition",
		Method:             "PATCH",
		PathPattern:        "/v1/lifecycles/measurement_definitions/{measurement_definition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateLifecycleMeasurementDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLifecycleMeasurementDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_lifecycle_measurement_definition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateLifecycleMilestone updates a milestone

Update a milestone
*/
func (a *Client) UpdateLifecycleMilestone(params *UpdateLifecycleMilestoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateLifecycleMilestoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLifecycleMilestoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_lifecycle_milestone",
		Method:             "PATCH",
		PathPattern:        "/v1/lifecycles/milestones/{milestone_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateLifecycleMilestoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLifecycleMilestoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_lifecycle_milestone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePriority updates a priority

Update a specific priority
*/
func (a *Client) UpdatePriority(params *UpdatePriorityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePriorityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePriorityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_priority",
		Method:             "PATCH",
		PathPattern:        "/v1/priorities/{priority_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePriorityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePriorityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_priority: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSeverity updates a severity

Update a specific severity
*/
func (a *Client) UpdateSeverity(params *UpdateSeverityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSeverityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSeverityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_severity",
		Method:             "PATCH",
		PathPattern:        "/v1/severities/{severity_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSeverityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSeverityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_severity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSeverityMatrix updates severity matrix

Update available severities and impacts in your organization's severity matrix.
*/
func (a *Client) UpdateSeverityMatrix(params *UpdateSeverityMatrixParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSeverityMatrixOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSeverityMatrixParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_severity_matrix",
		Method:             "PATCH",
		PathPattern:        "/v1/severity_matrix",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSeverityMatrixReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSeverityMatrixOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_severity_matrix: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSeverityMatrixCondition updates a severity matrix condition

Update a severity matrix condition
*/
func (a *Client) UpdateSeverityMatrixCondition(params *UpdateSeverityMatrixConditionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSeverityMatrixConditionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSeverityMatrixConditionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_severity_matrix_condition",
		Method:             "PATCH",
		PathPattern:        "/v1/severity_matrix/conditions/{condition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSeverityMatrixConditionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSeverityMatrixConditionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_severity_matrix_condition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSeverityMatrixImpact updates a severity matrix impact

Update a severity matrix impact
*/
func (a *Client) UpdateSeverityMatrixImpact(params *UpdateSeverityMatrixImpactParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSeverityMatrixImpactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSeverityMatrixImpactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_severity_matrix_impact",
		Method:             "PATCH",
		PathPattern:        "/v1/severity_matrix/impacts/{impact_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSeverityMatrixImpactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSeverityMatrixImpactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_severity_matrix_impact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateIncidentTags validates incident tags

Validate the format of a list of tags
*/
func (a *Client) ValidateIncidentTags(params *ValidateIncidentTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateIncidentTagsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateIncidentTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validate_incident_tags",
		Method:             "POST",
		PathPattern:        "/v1/incident_tags/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateIncidentTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateIncidentTagsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validate_incident_tags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
