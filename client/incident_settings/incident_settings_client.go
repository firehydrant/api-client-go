// Code generated by go-swagger; DO NOT EDIT.

package incident_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new incident settings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for incident settings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1CustomFieldsDefinitionsFieldID(params *DeleteV1CustomFieldsDefinitionsFieldIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1CustomFieldsDefinitionsFieldIDOK, error)

	DeleteV1IncidentRolesIncidentRoleID(params *DeleteV1IncidentRolesIncidentRoleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1IncidentRolesIncidentRoleIDOK, error)

	DeleteV1IncidentTypesID(params *DeleteV1IncidentTypesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1IncidentTypesIDOK, error)

	DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID(params *DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDNoContent, error)

	DeleteV1LifecyclesMilestonesMilestoneID(params *DeleteV1LifecyclesMilestonesMilestoneIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1LifecyclesMilestonesMilestoneIDOK, error)

	DeleteV1PrioritiesPrioritySlug(params *DeleteV1PrioritiesPrioritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1PrioritiesPrioritySlugOK, error)

	DeleteV1SeveritiesSeveritySlug(params *DeleteV1SeveritiesSeveritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1SeveritiesSeveritySlugOK, error)

	DeleteV1SeverityMatrixConditionsConditionID(params *DeleteV1SeverityMatrixConditionsConditionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1SeverityMatrixConditionsConditionIDOK, error)

	DeleteV1SeverityMatrixImpactsImpactID(params *DeleteV1SeverityMatrixImpactsImpactIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1SeverityMatrixImpactsImpactIDOK, error)

	GetV1CustomFieldsDefinitions(params *GetV1CustomFieldsDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1CustomFieldsDefinitionsOK, error)

	GetV1CustomFieldsDefinitionsFieldIDSelectOptions(params *GetV1CustomFieldsDefinitionsFieldIDSelectOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1CustomFieldsDefinitionsFieldIDSelectOptionsOK, error)

	GetV1FormConfigurationsSlug(params *GetV1FormConfigurationsSlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1FormConfigurationsSlugOK, error)

	GetV1IncidentRoles(params *GetV1IncidentRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentRolesOK, error)

	GetV1IncidentRolesIncidentRoleID(params *GetV1IncidentRolesIncidentRoleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentRolesIncidentRoleIDOK, error)

	GetV1IncidentTags(params *GetV1IncidentTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentTagsOK, error)

	GetV1IncidentTypes(params *GetV1IncidentTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentTypesOK, error)

	GetV1IncidentTypesID(params *GetV1IncidentTypesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentTypesIDOK, error)

	GetV1LifecyclesMeasurementDefinitions(params *GetV1LifecyclesMeasurementDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1LifecyclesMeasurementDefinitionsOK, error)

	GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID(params *GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDOK, error)

	GetV1LifecyclesPhases(params *GetV1LifecyclesPhasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1LifecyclesPhasesOK, error)

	GetV1Priorities(params *GetV1PrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PrioritiesOK, error)

	GetV1PrioritiesPrioritySlug(params *GetV1PrioritiesPrioritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PrioritiesPrioritySlugOK, error)

	GetV1Severities(params *GetV1SeveritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeveritiesOK, error)

	GetV1SeveritiesSeveritySlug(params *GetV1SeveritiesSeveritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeveritiesSeveritySlugOK, error)

	GetV1SeverityMatrix(params *GetV1SeverityMatrixParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeverityMatrixOK, error)

	GetV1SeverityMatrixConditions(params *GetV1SeverityMatrixConditionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeverityMatrixConditionsOK, error)

	GetV1SeverityMatrixConditionsConditionID(params *GetV1SeverityMatrixConditionsConditionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeverityMatrixConditionsConditionIDOK, error)

	GetV1SeverityMatrixImpacts(params *GetV1SeverityMatrixImpactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeverityMatrixImpactsOK, error)

	PatchV1CustomFieldsDefinitionsFieldID(params *PatchV1CustomFieldsDefinitionsFieldIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1CustomFieldsDefinitionsFieldIDOK, error)

	PatchV1IncidentRolesIncidentRoleID(params *PatchV1IncidentRolesIncidentRoleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IncidentRolesIncidentRoleIDOK, error)

	PatchV1IncidentTypesID(params *PatchV1IncidentTypesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IncidentTypesIDOK, error)

	PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID(params *PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDOK, error)

	PatchV1LifecyclesMilestonesMilestoneID(params *PatchV1LifecyclesMilestonesMilestoneIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1LifecyclesMilestonesMilestoneIDOK, error)

	PatchV1PrioritiesPrioritySlug(params *PatchV1PrioritiesPrioritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1PrioritiesPrioritySlugOK, error)

	PatchV1SeveritiesSeveritySlug(params *PatchV1SeveritiesSeveritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SeveritiesSeveritySlugOK, error)

	PatchV1SeverityMatrix(params *PatchV1SeverityMatrixParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SeverityMatrixOK, error)

	PatchV1SeverityMatrixConditionsConditionID(params *PatchV1SeverityMatrixConditionsConditionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SeverityMatrixConditionsConditionIDOK, error)

	PatchV1SeverityMatrixImpactsImpactID(params *PatchV1SeverityMatrixImpactsImpactIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SeverityMatrixImpactsImpactIDOK, error)

	PostV1CustomFieldsDefinitions(params *PostV1CustomFieldsDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1CustomFieldsDefinitionsCreated, error)

	PostV1IncidentRoles(params *PostV1IncidentRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentRolesCreated, error)

	PostV1IncidentTagsValidate(params *PostV1IncidentTagsValidateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentTagsValidateCreated, error)

	PostV1IncidentTypes(params *PostV1IncidentTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentTypesCreated, error)

	PostV1LifecyclesMeasurementDefinitions(params *PostV1LifecyclesMeasurementDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1LifecyclesMeasurementDefinitionsCreated, error)

	PostV1LifecyclesMilestones(params *PostV1LifecyclesMilestonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1LifecyclesMilestonesCreated, error)

	PostV1Priorities(params *PostV1PrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1PrioritiesCreated, error)

	PostV1Severities(params *PostV1SeveritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SeveritiesCreated, error)

	PostV1SeverityMatrixConditions(params *PostV1SeverityMatrixConditionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SeverityMatrixConditionsCreated, error)

	PostV1SeverityMatrixImpacts(params *PostV1SeverityMatrixImpactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SeverityMatrixImpactsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1CustomFieldsDefinitionsFieldID deletes a custom field definition

Delete a custom field definition
*/
func (a *Client) DeleteV1CustomFieldsDefinitionsFieldID(params *DeleteV1CustomFieldsDefinitionsFieldIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1CustomFieldsDefinitionsFieldIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1CustomFieldsDefinitionsFieldIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1CustomFieldsDefinitionsFieldId",
		Method:             "DELETE",
		PathPattern:        "/v1/custom_fields/definitions/{field_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1CustomFieldsDefinitionsFieldIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1CustomFieldsDefinitionsFieldIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1CustomFieldsDefinitionsFieldId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1IncidentRolesIncidentRoleID archives an incident role

Archives an incident role which will hide it from lists and metrics
*/
func (a *Client) DeleteV1IncidentRolesIncidentRoleID(params *DeleteV1IncidentRolesIncidentRoleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1IncidentRolesIncidentRoleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1IncidentRolesIncidentRoleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1IncidentRolesIncidentRoleId",
		Method:             "DELETE",
		PathPattern:        "/v1/incident_roles/{incident_role_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1IncidentRolesIncidentRoleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1IncidentRolesIncidentRoleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1IncidentRolesIncidentRoleId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1IncidentTypesID archives an incident type

Archives an incident type which will hide it from lists and metrics
*/
func (a *Client) DeleteV1IncidentTypesID(params *DeleteV1IncidentTypesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1IncidentTypesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1IncidentTypesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1IncidentTypesId",
		Method:             "DELETE",
		PathPattern:        "/v1/incident_types/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1IncidentTypesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1IncidentTypesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1IncidentTypesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID archives a measurement definition

Archives a measurement definition which will hide it from lists and metrics
*/
func (a *Client) DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID(params *DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionId",
		Method:             "DELETE",
		PathPattern:        "/v1/lifecycles/measurement_definitions/{measurement_definition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1LifecyclesMilestonesMilestoneID deletes a milestone

Delete a milestone
*/
func (a *Client) DeleteV1LifecyclesMilestonesMilestoneID(params *DeleteV1LifecyclesMilestonesMilestoneIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1LifecyclesMilestonesMilestoneIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1LifecyclesMilestonesMilestoneIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1LifecyclesMilestonesMilestoneId",
		Method:             "DELETE",
		PathPattern:        "/v1/lifecycles/milestones/{milestone_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1LifecyclesMilestonesMilestoneIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1LifecyclesMilestonesMilestoneIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1LifecyclesMilestonesMilestoneId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1PrioritiesPrioritySlug deletes a priority

Delete a specific priority
*/
func (a *Client) DeleteV1PrioritiesPrioritySlug(params *DeleteV1PrioritiesPrioritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1PrioritiesPrioritySlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1PrioritiesPrioritySlugParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1PrioritiesPrioritySlug",
		Method:             "DELETE",
		PathPattern:        "/v1/priorities/{priority_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1PrioritiesPrioritySlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1PrioritiesPrioritySlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1PrioritiesPrioritySlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1SeveritiesSeveritySlug deletes a severity

Delete a specific severity
*/
func (a *Client) DeleteV1SeveritiesSeveritySlug(params *DeleteV1SeveritiesSeveritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1SeveritiesSeveritySlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1SeveritiesSeveritySlugParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1SeveritiesSeveritySlug",
		Method:             "DELETE",
		PathPattern:        "/v1/severities/{severity_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1SeveritiesSeveritySlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1SeveritiesSeveritySlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1SeveritiesSeveritySlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1SeverityMatrixConditionsConditionID deletes a severity matrix condition

Delete a specific condition
*/
func (a *Client) DeleteV1SeverityMatrixConditionsConditionID(params *DeleteV1SeverityMatrixConditionsConditionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1SeverityMatrixConditionsConditionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1SeverityMatrixConditionsConditionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1SeverityMatrixConditionsConditionId",
		Method:             "DELETE",
		PathPattern:        "/v1/severity_matrix/conditions/{condition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1SeverityMatrixConditionsConditionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1SeverityMatrixConditionsConditionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1SeverityMatrixConditionsConditionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1SeverityMatrixImpactsImpactID deletes a severity matrix impact

Delete a specific impact
*/
func (a *Client) DeleteV1SeverityMatrixImpactsImpactID(params *DeleteV1SeverityMatrixImpactsImpactIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1SeverityMatrixImpactsImpactIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1SeverityMatrixImpactsImpactIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1SeverityMatrixImpactsImpactId",
		Method:             "DELETE",
		PathPattern:        "/v1/severity_matrix/impacts/{impact_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1SeverityMatrixImpactsImpactIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1SeverityMatrixImpactsImpactIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1SeverityMatrixImpactsImpactId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1CustomFieldsDefinitions lists custom field definitions

List all custom field definitions
*/
func (a *Client) GetV1CustomFieldsDefinitions(params *GetV1CustomFieldsDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1CustomFieldsDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1CustomFieldsDefinitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1CustomFieldsDefinitions",
		Method:             "GET",
		PathPattern:        "/v1/custom_fields/definitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1CustomFieldsDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1CustomFieldsDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1CustomFieldsDefinitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1CustomFieldsDefinitionsFieldIDSelectOptions gets available values for a custom field

Get the permissible values for the a currently active custom select or multi-select field.
*/
func (a *Client) GetV1CustomFieldsDefinitionsFieldIDSelectOptions(params *GetV1CustomFieldsDefinitionsFieldIDSelectOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1CustomFieldsDefinitionsFieldIDSelectOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1CustomFieldsDefinitionsFieldIDSelectOptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1CustomFieldsDefinitionsFieldIdSelectOptions",
		Method:             "GET",
		PathPattern:        "/v1/custom_fields/definitions/{field_id}/select_options",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1CustomFieldsDefinitionsFieldIDSelectOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1CustomFieldsDefinitionsFieldIDSelectOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1CustomFieldsDefinitionsFieldIdSelectOptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1FormConfigurationsSlug gets a form configuration

Get a form configuration
*/
func (a *Client) GetV1FormConfigurationsSlug(params *GetV1FormConfigurationsSlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1FormConfigurationsSlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1FormConfigurationsSlugParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1FormConfigurationsSlug",
		Method:             "GET",
		PathPattern:        "/v1/form_configurations/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1FormConfigurationsSlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1FormConfigurationsSlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1FormConfigurationsSlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IncidentRoles lists incident roles

List all of the incident roles in the organization
*/
func (a *Client) GetV1IncidentRoles(params *GetV1IncidentRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IncidentRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IncidentRoles",
		Method:             "GET",
		PathPattern:        "/v1/incident_roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IncidentRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IncidentRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IncidentRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IncidentRolesIncidentRoleID gets an incident role

Retrieve a single incident role from its ID
*/
func (a *Client) GetV1IncidentRolesIncidentRoleID(params *GetV1IncidentRolesIncidentRoleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentRolesIncidentRoleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IncidentRolesIncidentRoleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IncidentRolesIncidentRoleId",
		Method:             "GET",
		PathPattern:        "/v1/incident_roles/{incident_role_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IncidentRolesIncidentRoleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IncidentRolesIncidentRoleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IncidentRolesIncidentRoleId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IncidentTags lists incident tags

List all of the incident tags in the organization
*/
func (a *Client) GetV1IncidentTags(params *GetV1IncidentTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IncidentTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IncidentTags",
		Method:             "GET",
		PathPattern:        "/v1/incident_tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IncidentTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IncidentTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IncidentTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IncidentTypes lists incident types

List all of the incident types in the organization
*/
func (a *Client) GetV1IncidentTypes(params *GetV1IncidentTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IncidentTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IncidentTypes",
		Method:             "GET",
		PathPattern:        "/v1/incident_types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IncidentTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IncidentTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IncidentTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1IncidentTypesID gets an incident type

Retrieve a single incident type from its ID
*/
func (a *Client) GetV1IncidentTypesID(params *GetV1IncidentTypesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1IncidentTypesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1IncidentTypesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1IncidentTypesId",
		Method:             "GET",
		PathPattern:        "/v1/incident_types/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1IncidentTypesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1IncidentTypesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1IncidentTypesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1LifecyclesMeasurementDefinitions lists measurement definitions

List all of the measurement definitions in the organization
*/
func (a *Client) GetV1LifecyclesMeasurementDefinitions(params *GetV1LifecyclesMeasurementDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1LifecyclesMeasurementDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1LifecyclesMeasurementDefinitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1LifecyclesMeasurementDefinitions",
		Method:             "GET",
		PathPattern:        "/v1/lifecycles/measurement_definitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1LifecyclesMeasurementDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1LifecyclesMeasurementDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1LifecyclesMeasurementDefinitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID gets a measurement definition

Retrieve a single measurement definition from its ID
*/
func (a *Client) GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID(params *GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1LifecyclesMeasurementDefinitionsMeasurementDefinitionId",
		Method:             "GET",
		PathPattern:        "/v1/lifecycles/measurement_definitions/{measurement_definition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1LifecyclesMeasurementDefinitionsMeasurementDefinitionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1LifecyclesPhases lists phases and milestones

List all of the lifecycle phases and milestones in the organization
*/
func (a *Client) GetV1LifecyclesPhases(params *GetV1LifecyclesPhasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1LifecyclesPhasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1LifecyclesPhasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1LifecyclesPhases",
		Method:             "GET",
		PathPattern:        "/v1/lifecycles/phases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1LifecyclesPhasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1LifecyclesPhasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1LifecyclesPhases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Priorities lists priorities

Lists priorities
*/
func (a *Client) GetV1Priorities(params *GetV1PrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PrioritiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PrioritiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1Priorities",
		Method:             "GET",
		PathPattern:        "/v1/priorities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1PrioritiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1PrioritiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1Priorities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1PrioritiesPrioritySlug gets a priority

Retrieve a specific priority
*/
func (a *Client) GetV1PrioritiesPrioritySlug(params *GetV1PrioritiesPrioritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PrioritiesPrioritySlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PrioritiesPrioritySlugParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1PrioritiesPrioritySlug",
		Method:             "GET",
		PathPattern:        "/v1/priorities/{priority_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1PrioritiesPrioritySlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1PrioritiesPrioritySlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1PrioritiesPrioritySlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Severities lists severities

Lists severities
*/
func (a *Client) GetV1Severities(params *GetV1SeveritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeveritiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SeveritiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1Severities",
		Method:             "GET",
		PathPattern:        "/v1/severities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SeveritiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SeveritiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1Severities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SeveritiesSeveritySlug gets a severity

Retrieve a specific severity
*/
func (a *Client) GetV1SeveritiesSeveritySlug(params *GetV1SeveritiesSeveritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeveritiesSeveritySlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SeveritiesSeveritySlugParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1SeveritiesSeveritySlug",
		Method:             "GET",
		PathPattern:        "/v1/severities/{severity_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SeveritiesSeveritySlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SeveritiesSeveritySlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1SeveritiesSeveritySlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SeverityMatrix gets severity matrix

Retrieve the Severity matrix for your organization and its components and configured severities.
*/
func (a *Client) GetV1SeverityMatrix(params *GetV1SeverityMatrixParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeverityMatrixOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SeverityMatrixParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1SeverityMatrix",
		Method:             "GET",
		PathPattern:        "/v1/severity_matrix",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SeverityMatrixReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SeverityMatrixOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1SeverityMatrix: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SeverityMatrixConditions lists severity matrix conditions

Lists conditions
*/
func (a *Client) GetV1SeverityMatrixConditions(params *GetV1SeverityMatrixConditionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeverityMatrixConditionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SeverityMatrixConditionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1SeverityMatrixConditions",
		Method:             "GET",
		PathPattern:        "/v1/severity_matrix/conditions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SeverityMatrixConditionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SeverityMatrixConditionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1SeverityMatrixConditions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SeverityMatrixConditionsConditionID gets a severity matrix condition

Retrieve a specific condition
*/
func (a *Client) GetV1SeverityMatrixConditionsConditionID(params *GetV1SeverityMatrixConditionsConditionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeverityMatrixConditionsConditionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SeverityMatrixConditionsConditionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1SeverityMatrixConditionsConditionId",
		Method:             "GET",
		PathPattern:        "/v1/severity_matrix/conditions/{condition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SeverityMatrixConditionsConditionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SeverityMatrixConditionsConditionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1SeverityMatrixConditionsConditionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SeverityMatrixImpacts lists severity matrix impacts

Lists impacts
*/
func (a *Client) GetV1SeverityMatrixImpacts(params *GetV1SeverityMatrixImpactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeverityMatrixImpactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SeverityMatrixImpactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1SeverityMatrixImpacts",
		Method:             "GET",
		PathPattern:        "/v1/severity_matrix/impacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SeverityMatrixImpactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SeverityMatrixImpactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1SeverityMatrixImpacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1CustomFieldsDefinitionsFieldID updates a custom field definition

Update a single custom field definition
*/
func (a *Client) PatchV1CustomFieldsDefinitionsFieldID(params *PatchV1CustomFieldsDefinitionsFieldIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1CustomFieldsDefinitionsFieldIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1CustomFieldsDefinitionsFieldIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1CustomFieldsDefinitionsFieldId",
		Method:             "PATCH",
		PathPattern:        "/v1/custom_fields/definitions/{field_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1CustomFieldsDefinitionsFieldIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1CustomFieldsDefinitionsFieldIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1CustomFieldsDefinitionsFieldId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1IncidentRolesIncidentRoleID updates an incident role

Update a single incident role from its ID
*/
func (a *Client) PatchV1IncidentRolesIncidentRoleID(params *PatchV1IncidentRolesIncidentRoleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IncidentRolesIncidentRoleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1IncidentRolesIncidentRoleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1IncidentRolesIncidentRoleId",
		Method:             "PATCH",
		PathPattern:        "/v1/incident_roles/{incident_role_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1IncidentRolesIncidentRoleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1IncidentRolesIncidentRoleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1IncidentRolesIncidentRoleId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1IncidentTypesID updates an incident type

Update a single incident type from its ID
*/
func (a *Client) PatchV1IncidentTypesID(params *PatchV1IncidentTypesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1IncidentTypesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1IncidentTypesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1IncidentTypesId",
		Method:             "PATCH",
		PathPattern:        "/v1/incident_types/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1IncidentTypesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1IncidentTypesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1IncidentTypesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID updates a measurement definition

Update a single measurement definition from its ID
*/
func (a *Client) PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID(params *PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionId",
		Method:             "PATCH",
		PathPattern:        "/v1/lifecycles/measurement_definitions/{measurement_definition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1LifecyclesMilestonesMilestoneID updates a milestone

Update a milestone
*/
func (a *Client) PatchV1LifecyclesMilestonesMilestoneID(params *PatchV1LifecyclesMilestonesMilestoneIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1LifecyclesMilestonesMilestoneIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1LifecyclesMilestonesMilestoneIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1LifecyclesMilestonesMilestoneId",
		Method:             "PATCH",
		PathPattern:        "/v1/lifecycles/milestones/{milestone_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1LifecyclesMilestonesMilestoneIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1LifecyclesMilestonesMilestoneIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1LifecyclesMilestonesMilestoneId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1PrioritiesPrioritySlug updates a priority

Update a specific priority
*/
func (a *Client) PatchV1PrioritiesPrioritySlug(params *PatchV1PrioritiesPrioritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1PrioritiesPrioritySlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1PrioritiesPrioritySlugParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1PrioritiesPrioritySlug",
		Method:             "PATCH",
		PathPattern:        "/v1/priorities/{priority_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1PrioritiesPrioritySlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1PrioritiesPrioritySlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1PrioritiesPrioritySlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1SeveritiesSeveritySlug updates a severity

Update a specific severity
*/
func (a *Client) PatchV1SeveritiesSeveritySlug(params *PatchV1SeveritiesSeveritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SeveritiesSeveritySlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1SeveritiesSeveritySlugParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1SeveritiesSeveritySlug",
		Method:             "PATCH",
		PathPattern:        "/v1/severities/{severity_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1SeveritiesSeveritySlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1SeveritiesSeveritySlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1SeveritiesSeveritySlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1SeverityMatrix updates severity matrix

Update available severities and impacts in your organization's severity matrix.
*/
func (a *Client) PatchV1SeverityMatrix(params *PatchV1SeverityMatrixParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SeverityMatrixOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1SeverityMatrixParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1SeverityMatrix",
		Method:             "PATCH",
		PathPattern:        "/v1/severity_matrix",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1SeverityMatrixReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1SeverityMatrixOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1SeverityMatrix: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1SeverityMatrixConditionsConditionID updates a severity matrix condition

Update a severity matrix condition
*/
func (a *Client) PatchV1SeverityMatrixConditionsConditionID(params *PatchV1SeverityMatrixConditionsConditionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SeverityMatrixConditionsConditionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1SeverityMatrixConditionsConditionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1SeverityMatrixConditionsConditionId",
		Method:             "PATCH",
		PathPattern:        "/v1/severity_matrix/conditions/{condition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1SeverityMatrixConditionsConditionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1SeverityMatrixConditionsConditionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1SeverityMatrixConditionsConditionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1SeverityMatrixImpactsImpactID updates a severity matrix impact

Update a severity matrix impact
*/
func (a *Client) PatchV1SeverityMatrixImpactsImpactID(params *PatchV1SeverityMatrixImpactsImpactIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SeverityMatrixImpactsImpactIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1SeverityMatrixImpactsImpactIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1SeverityMatrixImpactsImpactId",
		Method:             "PATCH",
		PathPattern:        "/v1/severity_matrix/impacts/{impact_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1SeverityMatrixImpactsImpactIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1SeverityMatrixImpactsImpactIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1SeverityMatrixImpactsImpactId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1CustomFieldsDefinitions creates a custom field definition

Create a new custom field definition
*/
func (a *Client) PostV1CustomFieldsDefinitions(params *PostV1CustomFieldsDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1CustomFieldsDefinitionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1CustomFieldsDefinitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1CustomFieldsDefinitions",
		Method:             "POST",
		PathPattern:        "/v1/custom_fields/definitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1CustomFieldsDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1CustomFieldsDefinitionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1CustomFieldsDefinitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1IncidentRoles creates an incident role

Create a new incident role
*/
func (a *Client) PostV1IncidentRoles(params *PostV1IncidentRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentRolesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1IncidentRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1IncidentRoles",
		Method:             "POST",
		PathPattern:        "/v1/incident_roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1IncidentRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1IncidentRolesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1IncidentRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1IncidentTagsValidate validates incident tags

Validate the format of a list of tags
*/
func (a *Client) PostV1IncidentTagsValidate(params *PostV1IncidentTagsValidateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentTagsValidateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1IncidentTagsValidateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1IncidentTagsValidate",
		Method:             "POST",
		PathPattern:        "/v1/incident_tags/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1IncidentTagsValidateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1IncidentTagsValidateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1IncidentTagsValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1IncidentTypes creates an incident type

Create a new incident type
*/
func (a *Client) PostV1IncidentTypes(params *PostV1IncidentTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1IncidentTypesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1IncidentTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1IncidentTypes",
		Method:             "POST",
		PathPattern:        "/v1/incident_types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1IncidentTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1IncidentTypesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1IncidentTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1LifecyclesMeasurementDefinitions creates a measurement definition

Create a new measurement definition
*/
func (a *Client) PostV1LifecyclesMeasurementDefinitions(params *PostV1LifecyclesMeasurementDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1LifecyclesMeasurementDefinitionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1LifecyclesMeasurementDefinitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1LifecyclesMeasurementDefinitions",
		Method:             "POST",
		PathPattern:        "/v1/lifecycles/measurement_definitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1LifecyclesMeasurementDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1LifecyclesMeasurementDefinitionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1LifecyclesMeasurementDefinitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1LifecyclesMilestones creates a milestone

Create a new milestone
*/
func (a *Client) PostV1LifecyclesMilestones(params *PostV1LifecyclesMilestonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1LifecyclesMilestonesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1LifecyclesMilestonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1LifecyclesMilestones",
		Method:             "POST",
		PathPattern:        "/v1/lifecycles/milestones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1LifecyclesMilestonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1LifecyclesMilestonesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1LifecyclesMilestones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1Priorities creates a priority

Create a new priority
*/
func (a *Client) PostV1Priorities(params *PostV1PrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1PrioritiesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1PrioritiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1Priorities",
		Method:             "POST",
		PathPattern:        "/v1/priorities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1PrioritiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1PrioritiesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1Priorities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1Severities creates a severity

Create a new severity
*/
func (a *Client) PostV1Severities(params *PostV1SeveritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SeveritiesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1SeveritiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1Severities",
		Method:             "POST",
		PathPattern:        "/v1/severities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1SeveritiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1SeveritiesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1Severities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1SeverityMatrixConditions creates a severity matrix condition

Create a new condition
*/
func (a *Client) PostV1SeverityMatrixConditions(params *PostV1SeverityMatrixConditionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SeverityMatrixConditionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1SeverityMatrixConditionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1SeverityMatrixConditions",
		Method:             "POST",
		PathPattern:        "/v1/severity_matrix/conditions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1SeverityMatrixConditionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1SeverityMatrixConditionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1SeverityMatrixConditions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1SeverityMatrixImpacts creates a severity matrix impact

Create a new impact
*/
func (a *Client) PostV1SeverityMatrixImpacts(params *PostV1SeverityMatrixImpactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SeverityMatrixImpactsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1SeverityMatrixImpactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1SeverityMatrixImpacts",
		Method:             "POST",
		PathPattern:        "/v1/severity_matrix/impacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1SeverityMatrixImpactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1SeverityMatrixImpactsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1SeverityMatrixImpacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
