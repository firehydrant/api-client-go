// Code generated by go-swagger; DO NOT EDIT.

package catalog_entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new catalog entries API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalog entries API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEnvironment(params *CreateEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEnvironmentCreated, error)

	CreateFunctionality(params *CreateFunctionalityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFunctionalityCreated, error)

	CreateService(params *CreateServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceCreated, error)

	CreateServiceChecklistResponse(params *CreateServiceChecklistResponseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceChecklistResponseCreated, error)

	CreateServiceDependency(params *CreateServiceDependencyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceDependencyCreated, error)

	CreateServiceLinks(params *CreateServiceLinksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceLinksCreated, error)

	DeleteEnvironment(params *DeleteEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEnvironmentOK, error)

	DeleteFunctionality(params *DeleteFunctionalityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFunctionalityOK, error)

	DeleteService(params *DeleteServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServiceOK, error)

	DeleteServiceDependency(params *DeleteServiceDependencyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServiceDependencyOK, error)

	DeleteServiceLink(params *DeleteServiceLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServiceLinkNoContent, error)

	GetEnvironment(params *GetEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEnvironmentOK, error)

	GetFunctionality(params *GetFunctionalityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFunctionalityOK, error)

	GetService(params *GetServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceOK, error)

	GetServiceDependencies(params *GetServiceDependenciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceDependenciesOK, error)

	GetServiceDependency(params *GetServiceDependencyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceDependencyOK, error)

	IngestCatalogData(params *IngestCatalogDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IngestCatalogDataCreated, error)

	ListEnvironments(params *ListEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEnvironmentsOK, error)

	ListFunctionalities(params *ListFunctionalitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFunctionalitiesOK, error)

	ListFunctionalityServices(params *ListFunctionalityServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFunctionalityServicesOK, error)

	ListInfrastructures(params *ListInfrastructuresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListInfrastructuresOK, error)

	ListServiceAvailableDownstreamDependencies(params *ListServiceAvailableDownstreamDependenciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceAvailableDownstreamDependenciesOK, error)

	ListServiceAvailableUpstreamDependencies(params *ListServiceAvailableUpstreamDependenciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceAvailableUpstreamDependenciesOK, error)

	ListServices(params *ListServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServicesOK, error)

	ListUserOwnedServices(params *ListUserOwnedServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUserOwnedServicesOK, error)

	RefreshCatalog(params *RefreshCatalogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshCatalogOK, error)

	UpdateEnvironment(params *UpdateEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEnvironmentOK, error)

	UpdateFunctionality(params *UpdateFunctionalityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFunctionalityOK, error)

	UpdateService(params *UpdateServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceOK, error)

	UpdateServiceDependency(params *UpdateServiceDependencyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceDependencyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateEnvironment creates an environment

Creates an environment for the organization
*/
func (a *Client) CreateEnvironment(params *CreateEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEnvironmentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEnvironmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_environment",
		Method:             "POST",
		PathPattern:        "/v1/environments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEnvironmentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_environment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateFunctionality creates a functionality

Creates a functionality for the organization
*/
func (a *Client) CreateFunctionality(params *CreateFunctionalityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFunctionalityCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFunctionalityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_functionality",
		Method:             "POST",
		PathPattern:        "/v1/functionalities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateFunctionalityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFunctionalityCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_functionality: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateService creates a service

Creates a service for the organization, you may also create or attach functionalities to the service on create.
*/
func (a *Client) CreateService(params *CreateServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_service",
		Method:             "POST",
		PathPattern:        "/v1/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServiceCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateServiceChecklistResponse records a response for a checklist item

Creates a response for a checklist item
*/
func (a *Client) CreateServiceChecklistResponse(params *CreateServiceChecklistResponseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceChecklistResponseCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceChecklistResponseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_service_checklist_response",
		Method:             "POST",
		PathPattern:        "/v1/services/{service_id}/checklist_response/{checklist_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateServiceChecklistResponseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServiceChecklistResponseCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_service_checklist_response: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateServiceDependency creates a service dependency

Creates a service dependency relationship between two services
*/
func (a *Client) CreateServiceDependency(params *CreateServiceDependencyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceDependencyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceDependencyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_service_dependency",
		Method:             "POST",
		PathPattern:        "/v1/service_dependencies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateServiceDependencyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServiceDependencyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_service_dependency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateServiceLinks creates multiple services linked to external services

Creates a service with the appropriate integration for each external service ID passed
*/
func (a *Client) CreateServiceLinks(params *CreateServiceLinksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceLinksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceLinksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_service_links",
		Method:             "POST",
		PathPattern:        "/v1/services/service_links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateServiceLinksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServiceLinksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_service_links: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteEnvironment archives an environment

Archive an environment
*/
func (a *Client) DeleteEnvironment(params *DeleteEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEnvironmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_environment",
		Method:             "DELETE",
		PathPattern:        "/v1/environments/{environment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_environment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteFunctionality archives a functionality

Archive a functionality
*/
func (a *Client) DeleteFunctionality(params *DeleteFunctionalityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFunctionalityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFunctionalityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_functionality",
		Method:             "DELETE",
		PathPattern:        "/v1/functionalities/{functionality_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFunctionalityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFunctionalityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_functionality: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteService deletes a service

Deletes the service from FireHydrant.
*/
func (a *Client) DeleteService(params *DeleteServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_service",
		Method:             "DELETE",
		PathPattern:        "/v1/services/{service_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteServiceDependency deletes a service dependency

Deletes a single service dependency
*/
func (a *Client) DeleteServiceDependency(params *DeleteServiceDependencyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServiceDependencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceDependencyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_service_dependency",
		Method:             "DELETE",
		PathPattern:        "/v1/service_dependencies/{service_dependency_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteServiceDependencyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceDependencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_service_dependency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteServiceLink deletes a service link

Deletes a service link from FireHydrant.
*/
func (a *Client) DeleteServiceLink(params *DeleteServiceLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServiceLinkNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_service_link",
		Method:             "DELETE",
		PathPattern:        "/v1/services/{service_id}/service_links/{remote_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteServiceLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceLinkNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_service_link: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEnvironment gets an environment

Retrieves a single environment by ID
*/
func (a *Client) GetEnvironment(params *GetEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_environment",
		Method:             "GET",
		PathPattern:        "/v1/environments/{environment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_environment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFunctionality gets a functionality

Retrieves a single functionality by ID
*/
func (a *Client) GetFunctionality(params *GetFunctionalityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFunctionalityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFunctionalityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_functionality",
		Method:             "GET",
		PathPattern:        "/v1/functionalities/{functionality_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFunctionalityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFunctionalityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_functionality: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetService gets a service

Retrieves a single service by ID
*/
func (a *Client) GetService(params *GetServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_service",
		Method:             "GET",
		PathPattern:        "/v1/services/{service_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServiceDependencies lists dependencies for a service

Retrieves a service's dependencies
*/
func (a *Client) GetServiceDependencies(params *GetServiceDependenciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceDependenciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceDependenciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_service_dependencies",
		Method:             "GET",
		PathPattern:        "/v1/services/{service_id}/dependencies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceDependenciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceDependenciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_service_dependencies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServiceDependency gets a service dependency

Retrieves a single service dependency by ID
*/
func (a *Client) GetServiceDependency(params *GetServiceDependencyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceDependencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceDependencyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_service_dependency",
		Method:             "GET",
		PathPattern:        "/v1/service_dependencies/{service_dependency_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceDependencyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceDependencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_service_dependency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IngestCatalogData ingests service catalog data

Accepts catalog data in the configured format and asyncronously processes the data to incorporate changes into service catalog.
*/
func (a *Client) IngestCatalogData(params *IngestCatalogDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IngestCatalogDataCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIngestCatalogDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ingest_catalog_data",
		Method:             "POST",
		PathPattern:        "/v1/catalogs/{catalog_id}/ingest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IngestCatalogDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IngestCatalogDataCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ingest_catalog_data: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListEnvironments lists environments

List all of the environments that have been added to the organiation
*/
func (a *Client) ListEnvironments(params *ListEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEnvironmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_environments",
		Method:             "GET",
		PathPattern:        "/v1/environments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEnvironmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEnvironmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_environments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListFunctionalities lists functionalities

List all of the functionalities that have been added to the organiation
*/
func (a *Client) ListFunctionalities(params *ListFunctionalitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFunctionalitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFunctionalitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_functionalities",
		Method:             "GET",
		PathPattern:        "/v1/functionalities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListFunctionalitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFunctionalitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_functionalities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListFunctionalityServices lists services for a functionality

List services for a functionality
*/
func (a *Client) ListFunctionalityServices(params *ListFunctionalityServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFunctionalityServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFunctionalityServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_functionality_services",
		Method:             "GET",
		PathPattern:        "/v1/functionalities/{functionality_id}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListFunctionalityServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFunctionalityServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_functionality_services: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListInfrastructures lists functionality service and environment objects

Lists functionality, service and environment objects
*/
func (a *Client) ListInfrastructures(params *ListInfrastructuresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListInfrastructuresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInfrastructuresParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_infrastructures",
		Method:             "GET",
		PathPattern:        "/v1/infrastructures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListInfrastructuresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListInfrastructuresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_infrastructures: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListServiceAvailableDownstreamDependencies lists available downstream service dependencies

Retrieves all services that are available to be downstream dependencies
*/
func (a *Client) ListServiceAvailableDownstreamDependencies(params *ListServiceAvailableDownstreamDependenciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceAvailableDownstreamDependenciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServiceAvailableDownstreamDependenciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_service_available_downstream_dependencies",
		Method:             "GET",
		PathPattern:        "/v1/services/{service_id}/available_downstream_dependencies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListServiceAvailableDownstreamDependenciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServiceAvailableDownstreamDependenciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_service_available_downstream_dependencies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListServiceAvailableUpstreamDependencies lists available upstream service dependencies

Retrieves all services that are available to be upstream dependencies
*/
func (a *Client) ListServiceAvailableUpstreamDependencies(params *ListServiceAvailableUpstreamDependenciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceAvailableUpstreamDependenciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServiceAvailableUpstreamDependenciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_service_available_upstream_dependencies",
		Method:             "GET",
		PathPattern:        "/v1/services/{service_id}/available_upstream_dependencies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListServiceAvailableUpstreamDependenciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServiceAvailableUpstreamDependenciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_service_available_upstream_dependencies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListServices lists services

List all of the services that have been added to the organization.
*/
func (a *Client) ListServices(params *ListServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_services",
		Method:             "GET",
		PathPattern:        "/v1/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_services: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListUserOwnedServices lists services owned by a user s teams

Retrieves a list of services owned by the teams a user is on
*/
func (a *Client) ListUserOwnedServices(params *ListUserOwnedServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUserOwnedServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUserOwnedServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_user_owned_services",
		Method:             "GET",
		PathPattern:        "/v1/users/{id}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListUserOwnedServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUserOwnedServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_user_owned_services: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RefreshCatalog refreshes a service catalog

Schedules an async task to re-import catalog info and update catalog data accordingly.
*/
func (a *Client) RefreshCatalog(params *RefreshCatalogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshCatalogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refresh_catalog",
		Method:             "GET",
		PathPattern:        "/v1/catalogs/{catalog_id}/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RefreshCatalogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshCatalogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refresh_catalog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateEnvironment updates an environment

Update a environments attributes
*/
func (a *Client) UpdateEnvironment(params *UpdateEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEnvironmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_environment",
		Method:             "PATCH",
		PathPattern:        "/v1/environments/{environment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_environment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateFunctionality updates a functionality

Update a functionalities attributes
*/
func (a *Client) UpdateFunctionality(params *UpdateFunctionalityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFunctionalityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFunctionalityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_functionality",
		Method:             "PATCH",
		PathPattern:        "/v1/functionalities/{functionality_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateFunctionalityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFunctionalityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_functionality: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateService updates a service

	Update a services attributes, you may also add or remove functionalities from the service as well.

Note: You may not remove or add individual label key/value pairs. You must include the entire object to override label values.
*/
func (a *Client) UpdateService(params *UpdateServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_service",
		Method:             "PATCH",
		PathPattern:        "/v1/services/{service_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateServiceDependency updates a service dependency

Update the notes of the service dependency
*/
func (a *Client) UpdateServiceDependency(params *UpdateServiceDependencyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceDependencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceDependencyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_service_dependency",
		Method:             "PATCH",
		PathPattern:        "/v1/service_dependencies/{service_dependency_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceDependencyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceDependencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_service_dependency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
