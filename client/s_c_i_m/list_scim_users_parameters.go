// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListScimUsersParams creates a new ListScimUsersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListScimUsersParams() *ListScimUsersParams {
	return &ListScimUsersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListScimUsersParamsWithTimeout creates a new ListScimUsersParams object
// with the ability to set a timeout on a request.
func NewListScimUsersParamsWithTimeout(timeout time.Duration) *ListScimUsersParams {
	return &ListScimUsersParams{
		timeout: timeout,
	}
}

// NewListScimUsersParamsWithContext creates a new ListScimUsersParams object
// with the ability to set a context for a request.
func NewListScimUsersParamsWithContext(ctx context.Context) *ListScimUsersParams {
	return &ListScimUsersParams{
		Context: ctx,
	}
}

// NewListScimUsersParamsWithHTTPClient creates a new ListScimUsersParams object
// with the ability to set a custom HTTPClient for a request.
func NewListScimUsersParamsWithHTTPClient(client *http.Client) *ListScimUsersParams {
	return &ListScimUsersParams{
		HTTPClient: client,
	}
}

/*
ListScimUsersParams contains all the parameters to send to the API endpoint

	for the list scim users operation.

	Typically these are written to a http.Request.
*/
type ListScimUsersParams struct {

	/* Count.

	   This is an integer which represents the number of items per page in the response

	   Format: int32
	*/
	Count *int32

	/* Filter.

	   This is a string used to query users by either userName or email.
	      Proper example syntax for this would be `?filter=userName eq john` or `?filter=userName eq "john@firehydrant.com"`.
	      Currently we only support the `eq` operator
	*/
	Filter *string

	/* StartIndex.

	   This is an integer which represents a pagination offset

	   Format: int32
	*/
	StartIndex *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list scim users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListScimUsersParams) WithDefaults() *ListScimUsersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list scim users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListScimUsersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list scim users params
func (o *ListScimUsersParams) WithTimeout(timeout time.Duration) *ListScimUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list scim users params
func (o *ListScimUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list scim users params
func (o *ListScimUsersParams) WithContext(ctx context.Context) *ListScimUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list scim users params
func (o *ListScimUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list scim users params
func (o *ListScimUsersParams) WithHTTPClient(client *http.Client) *ListScimUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list scim users params
func (o *ListScimUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the list scim users params
func (o *ListScimUsersParams) WithCount(count *int32) *ListScimUsersParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the list scim users params
func (o *ListScimUsersParams) SetCount(count *int32) {
	o.Count = count
}

// WithFilter adds the filter to the list scim users params
func (o *ListScimUsersParams) WithFilter(filter *string) *ListScimUsersParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the list scim users params
func (o *ListScimUsersParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithStartIndex adds the startIndex to the list scim users params
func (o *ListScimUsersParams) WithStartIndex(startIndex *int32) *ListScimUsersParams {
	o.SetStartIndex(startIndex)
	return o
}

// SetStartIndex adds the startIndex to the list scim users params
func (o *ListScimUsersParams) SetStartIndex(startIndex *int32) {
	o.StartIndex = startIndex
}

// WriteToRequest writes these params to a swagger request
func (o *ListScimUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int32

		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {

			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.StartIndex != nil {

		// query param startIndex
		var qrStartIndex int32

		if o.StartIndex != nil {
			qrStartIndex = *o.StartIndex
		}
		qStartIndex := swag.FormatInt32(qrStartIndex)
		if qStartIndex != "" {

			if err := r.SetQueryParam("startIndex", qStartIndex); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
