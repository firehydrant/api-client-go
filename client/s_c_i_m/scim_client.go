// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new s c i m API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for s c i m API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateScimGroup(params *CreateScimGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScimGroupCreated, error)

	CreateScimUser(params *CreateScimUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScimUserCreated, error)

	DeleteScimGroup(params *DeleteScimGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScimGroupNoContent, error)

	DeleteScimUser(params *DeleteScimUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScimUserNoContent, error)

	GetScimGroup(params *GetScimGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScimGroupOK, error)

	GetScimUser(params *GetScimUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScimUserOK, error)

	ListScimGroups(params *ListScimGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListScimGroupsOK, error)

	ListScimUsers(params *ListScimUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListScimUsersOK, error)

	PatchScimUser(params *PatchScimUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchScimUserOK, error)

	UpdateScimGroup(params *UpdateScimGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScimGroupOK, error)

	UpdateScimUser(params *UpdateScimUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScimUserOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateScimGroup creates a s c i m group and assign members

SCIM endpoint to create a new Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role.
*/
func (a *Client) CreateScimGroup(params *CreateScimGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScimGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScimGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_scim_group",
		Method:             "POST",
		PathPattern:        "/v1/scim/v2/Groups",
		ProducesMediaTypes: []string{"application/scim+json"},
		ConsumesMediaTypes: []string{"application/scim+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateScimGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateScimGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_scim_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateScimUser creates a user from s c i m data

SCIM endpoint to create and provision a new User. This endpoint will provision the User, which allows them to accept their account throught their IDP or via the Forgot Password flow.
*/
func (a *Client) CreateScimUser(params *CreateScimUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScimUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScimUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_scim_user",
		Method:             "POST",
		PathPattern:        "/v1/scim/v2/Users",
		ProducesMediaTypes: []string{"application/scim+json"},
		ConsumesMediaTypes: []string{"application/scim+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateScimUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateScimUserCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_scim_user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteScimGroup deletes a s c i m group

SCIM endpoint to delete a Team (Colloquial for Group in the SCIM protocol).
*/
func (a *Client) DeleteScimGroup(params *DeleteScimGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScimGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScimGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_scim_group",
		Method:             "DELETE",
		PathPattern:        "/v1/scim/v2/Groups/{id}",
		ProducesMediaTypes: []string{"application/scim+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScimGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScimGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_scim_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteScimUser deletes a user matching s c i m data

SCIM endpoint to delete a User. This endpoint will deactivate a confirmed User record in our system.
*/
func (a *Client) DeleteScimUser(params *DeleteScimUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScimUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScimUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_scim_user",
		Method:             "DELETE",
		PathPattern:        "/v1/scim/v2/Users/{id}",
		ProducesMediaTypes: []string{"application/scim+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScimUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScimUserNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_scim_user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScimGroup gets a s c i m group

SCIM endpoint that lists a Team (Colloquial for Group in the SCIM protocol)
*/
func (a *Client) GetScimGroup(params *GetScimGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScimGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScimGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_scim_group",
		Method:             "GET",
		PathPattern:        "/v1/scim/v2/Groups/{id}",
		ProducesMediaTypes: []string{"application/scim+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScimGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScimGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_scim_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScimUser gets a s c i m user

SCIM endpoint that lists a User
*/
func (a *Client) GetScimUser(params *GetScimUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScimUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScimUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_scim_user",
		Method:             "GET",
		PathPattern:        "/v1/scim/v2/Users/{id}",
		ProducesMediaTypes: []string{"application/scim+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScimUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScimUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_scim_user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListScimGroups lists s c i m groups

SCIM endpoint that lists all Teams (Colloquial for Group in the SCIM protocol)
*/
func (a *Client) ListScimGroups(params *ListScimGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListScimGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListScimGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_scim_groups",
		Method:             "GET",
		PathPattern:        "/v1/scim/v2/Groups",
		ProducesMediaTypes: []string{"application/scim+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListScimGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListScimGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_scim_groups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListScimUsers lists s c i m users

SCIM endpoint that lists users. This endpoint will display a list of Users currently in the system.
*/
func (a *Client) ListScimUsers(params *ListScimUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListScimUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListScimUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_scim_users",
		Method:             "GET",
		PathPattern:        "/v1/scim/v2/Users",
		ProducesMediaTypes: []string{"application/scim+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListScimUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListScimUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_scim_users: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchScimUser updates a user from s c i m data

PATCH SCIM endpoint to update a User. This endpoint is used to update a resource's attributes.
*/
func (a *Client) PatchScimUser(params *PatchScimUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchScimUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchScimUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patch_scim_user",
		Method:             "PATCH",
		PathPattern:        "/v1/scim/v2/Users/{id}",
		ProducesMediaTypes: []string{"application/scim+json"},
		ConsumesMediaTypes: []string{"application/scim+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchScimUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchScimUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patch_scim_user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateScimGroup updates a s c i m group and assign members

SCIM endpoint to update a Team (Colloquial for Group in the SCIM protocol). Any members defined in the payload will be assigned to the team with no defined role, any missing members will be removed from the team.
*/
func (a *Client) UpdateScimGroup(params *UpdateScimGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScimGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateScimGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_scim_group",
		Method:             "PUT",
		PathPattern:        "/v1/scim/v2/Groups/{id}",
		ProducesMediaTypes: []string{"application/scim+json"},
		ConsumesMediaTypes: []string{"application/scim+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateScimGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateScimGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_scim_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateScimUser updates a user from s c i m data

PUT SCIM endpoint to update a User. This endpoint is used to replace a resource's attributes.
*/
func (a *Client) UpdateScimUser(params *UpdateScimUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScimUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateScimUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_scim_user",
		Method:             "PUT",
		PathPattern:        "/v1/scim/v2/Users/{id}",
		ProducesMediaTypes: []string{"application/scim+json"},
		ConsumesMediaTypes: []string{"application/scim+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateScimUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateScimUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_scim_user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
