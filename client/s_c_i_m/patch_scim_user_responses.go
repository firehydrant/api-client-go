// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PatchScimUserReader is a Reader for the PatchScimUser structure.
type PatchScimUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchScimUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchScimUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchScimUserOK creates a PatchScimUserOK with default headers values
func NewPatchScimUserOK() *PatchScimUserOK {
	return &PatchScimUserOK{}
}

/*
PatchScimUserOK describes a response with status code 200, with default header values.

PATCH SCIM endpoint to update a User. This endpoint is used to update a resource's attributes.
*/
type PatchScimUserOK struct {
}

// IsSuccess returns true when this patch scim user o k response has a 2xx status code
func (o *PatchScimUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch scim user o k response has a 3xx status code
func (o *PatchScimUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch scim user o k response has a 4xx status code
func (o *PatchScimUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch scim user o k response has a 5xx status code
func (o *PatchScimUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch scim user o k response a status code equal to that given
func (o *PatchScimUserOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchScimUserOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/scim/v2/Users/{id}][%d] patchScimUserOK ", 200)
}

func (o *PatchScimUserOK) String() string {
	return fmt.Sprintf("[PATCH /v1/scim/v2/Users/{id}][%d] patchScimUserOK ", 200)
}

func (o *PatchScimUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
