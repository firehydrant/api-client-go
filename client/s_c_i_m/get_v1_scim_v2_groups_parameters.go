// Code generated by go-swagger; DO NOT EDIT.

package s_c_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetV1ScimV2GroupsParams creates a new GetV1ScimV2GroupsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetV1ScimV2GroupsParams() *GetV1ScimV2GroupsParams {
	return &GetV1ScimV2GroupsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetV1ScimV2GroupsParamsWithTimeout creates a new GetV1ScimV2GroupsParams object
// with the ability to set a timeout on a request.
func NewGetV1ScimV2GroupsParamsWithTimeout(timeout time.Duration) *GetV1ScimV2GroupsParams {
	return &GetV1ScimV2GroupsParams{
		timeout: timeout,
	}
}

// NewGetV1ScimV2GroupsParamsWithContext creates a new GetV1ScimV2GroupsParams object
// with the ability to set a context for a request.
func NewGetV1ScimV2GroupsParamsWithContext(ctx context.Context) *GetV1ScimV2GroupsParams {
	return &GetV1ScimV2GroupsParams{
		Context: ctx,
	}
}

// NewGetV1ScimV2GroupsParamsWithHTTPClient creates a new GetV1ScimV2GroupsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetV1ScimV2GroupsParamsWithHTTPClient(client *http.Client) *GetV1ScimV2GroupsParams {
	return &GetV1ScimV2GroupsParams{
		HTTPClient: client,
	}
}

/*
GetV1ScimV2GroupsParams contains all the parameters to send to the API endpoint

	for the get v1 scim v2 groups operation.

	Typically these are written to a http.Request.
*/
type GetV1ScimV2GroupsParams struct {

	// Count.
	//
	// Format: int32
	Count *int32

	/* Filter.

	   This is a string used to query groups by displayName.
	      Proper example syntax for this would be `?filter=displayName eq "My Team Name"`.
	      Currently we only support the `eq` operator
	*/
	Filter *string

	// StartIndex.
	//
	// Format: int32
	StartIndex *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get v1 scim v2 groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1ScimV2GroupsParams) WithDefaults() *GetV1ScimV2GroupsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get v1 scim v2 groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1ScimV2GroupsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get v1 scim v2 groups params
func (o *GetV1ScimV2GroupsParams) WithTimeout(timeout time.Duration) *GetV1ScimV2GroupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v1 scim v2 groups params
func (o *GetV1ScimV2GroupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v1 scim v2 groups params
func (o *GetV1ScimV2GroupsParams) WithContext(ctx context.Context) *GetV1ScimV2GroupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v1 scim v2 groups params
func (o *GetV1ScimV2GroupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v1 scim v2 groups params
func (o *GetV1ScimV2GroupsParams) WithHTTPClient(client *http.Client) *GetV1ScimV2GroupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v1 scim v2 groups params
func (o *GetV1ScimV2GroupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get v1 scim v2 groups params
func (o *GetV1ScimV2GroupsParams) WithCount(count *int32) *GetV1ScimV2GroupsParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get v1 scim v2 groups params
func (o *GetV1ScimV2GroupsParams) SetCount(count *int32) {
	o.Count = count
}

// WithFilter adds the filter to the get v1 scim v2 groups params
func (o *GetV1ScimV2GroupsParams) WithFilter(filter *string) *GetV1ScimV2GroupsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get v1 scim v2 groups params
func (o *GetV1ScimV2GroupsParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithStartIndex adds the startIndex to the get v1 scim v2 groups params
func (o *GetV1ScimV2GroupsParams) WithStartIndex(startIndex *int32) *GetV1ScimV2GroupsParams {
	o.SetStartIndex(startIndex)
	return o
}

// SetStartIndex adds the startIndex to the get v1 scim v2 groups params
func (o *GetV1ScimV2GroupsParams) SetStartIndex(startIndex *int32) {
	o.StartIndex = startIndex
}

// WriteToRequest writes these params to a swagger request
func (o *GetV1ScimV2GroupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int32

		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {

			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.StartIndex != nil {

		// query param startIndex
		var qrStartIndex int32

		if o.StartIndex != nil {
			qrStartIndex = *o.StartIndex
		}
		qStartIndex := swag.FormatInt32(qrStartIndex)
		if qStartIndex != "" {

			if err := r.SetQueryParam("startIndex", qStartIndex); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
