// Code generated by go-swagger; DO NOT EDIT.

package lifecycles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new lifecycles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for lifecycles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID(params *DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDNoContent, error)

	DeleteV1LifecyclesMilestonesMilestoneID(params *DeleteV1LifecyclesMilestonesMilestoneIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1LifecyclesMilestonesMilestoneIDOK, error)

	GetV1LifecyclesMeasurementDefinitions(params *GetV1LifecyclesMeasurementDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1LifecyclesMeasurementDefinitionsOK, error)

	GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID(params *GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDOK, error)

	GetV1LifecyclesPhases(params *GetV1LifecyclesPhasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1LifecyclesPhasesOK, error)

	PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID(params *PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDOK, error)

	PatchV1LifecyclesMilestonesMilestoneID(params *PatchV1LifecyclesMilestonesMilestoneIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1LifecyclesMilestonesMilestoneIDOK, error)

	PostV1LifecyclesMeasurementDefinitions(params *PostV1LifecyclesMeasurementDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1LifecyclesMeasurementDefinitionsCreated, error)

	PostV1LifecyclesMilestones(params *PostV1LifecyclesMilestonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1LifecyclesMilestonesCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID archives a measurement definition

Archives a measurement definition which will hide it from lists and metrics
*/
func (a *Client) DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID(params *DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionId",
		Method:             "DELETE",
		PathPattern:        "/v1/lifecycles/measurement_definitions/{measurement_definition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1LifecyclesMilestonesMilestoneID deletes a milestone

Delete a milestone
*/
func (a *Client) DeleteV1LifecyclesMilestonesMilestoneID(params *DeleteV1LifecyclesMilestonesMilestoneIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1LifecyclesMilestonesMilestoneIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1LifecyclesMilestonesMilestoneIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1LifecyclesMilestonesMilestoneId",
		Method:             "DELETE",
		PathPattern:        "/v1/lifecycles/milestones/{milestone_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1LifecyclesMilestonesMilestoneIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1LifecyclesMilestonesMilestoneIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1LifecyclesMilestonesMilestoneId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1LifecyclesMeasurementDefinitions lists all measurement definitions

List all of the measurement definitions in the organization
*/
func (a *Client) GetV1LifecyclesMeasurementDefinitions(params *GetV1LifecyclesMeasurementDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1LifecyclesMeasurementDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1LifecyclesMeasurementDefinitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1LifecyclesMeasurementDefinitions",
		Method:             "GET",
		PathPattern:        "/v1/lifecycles/measurement_definitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1LifecyclesMeasurementDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1LifecyclesMeasurementDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1LifecyclesMeasurementDefinitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID retrieves a measurement definition

Retrieve a single measurement definition from its ID
*/
func (a *Client) GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID(params *GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1LifecyclesMeasurementDefinitionsMeasurementDefinitionId",
		Method:             "GET",
		PathPattern:        "/v1/lifecycles/measurement_definitions/{measurement_definition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1LifecyclesMeasurementDefinitionsMeasurementDefinitionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1LifecyclesPhases lists all phases and milestones

List all of the lifecycle phases and milestones in the organization
*/
func (a *Client) GetV1LifecyclesPhases(params *GetV1LifecyclesPhasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1LifecyclesPhasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1LifecyclesPhasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1LifecyclesPhases",
		Method:             "GET",
		PathPattern:        "/v1/lifecycles/phases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1LifecyclesPhasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1LifecyclesPhasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1LifecyclesPhases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID updates a measurement definition

Update a single measurement definition from its ID
*/
func (a *Client) PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID(params *PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionId",
		Method:             "PATCH",
		PathPattern:        "/v1/lifecycles/measurement_definitions/{measurement_definition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1LifecyclesMilestonesMilestoneID updates a milestone

Update a milestone
*/
func (a *Client) PatchV1LifecyclesMilestonesMilestoneID(params *PatchV1LifecyclesMilestonesMilestoneIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1LifecyclesMilestonesMilestoneIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1LifecyclesMilestonesMilestoneIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1LifecyclesMilestonesMilestoneId",
		Method:             "PATCH",
		PathPattern:        "/v1/lifecycles/milestones/{milestone_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1LifecyclesMilestonesMilestoneIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1LifecyclesMilestonesMilestoneIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1LifecyclesMilestonesMilestoneId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1LifecyclesMeasurementDefinitions creates a measurement definition

Create a new measurement definition
*/
func (a *Client) PostV1LifecyclesMeasurementDefinitions(params *PostV1LifecyclesMeasurementDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1LifecyclesMeasurementDefinitionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1LifecyclesMeasurementDefinitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1LifecyclesMeasurementDefinitions",
		Method:             "POST",
		PathPattern:        "/v1/lifecycles/measurement_definitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1LifecyclesMeasurementDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1LifecyclesMeasurementDefinitionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1LifecyclesMeasurementDefinitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1LifecyclesMilestones creates a milestone

Create a new milestone
*/
func (a *Client) PostV1LifecyclesMilestones(params *PostV1LifecyclesMilestonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1LifecyclesMilestonesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1LifecyclesMilestonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1LifecyclesMilestones",
		Method:             "POST",
		PathPattern:        "/v1/lifecycles/milestones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1LifecyclesMilestonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1LifecyclesMilestonesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1LifecyclesMilestones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
