// Code generated by go-swagger; DO NOT EDIT.

package signals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new signals API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for signals API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1SignalsEmailTargetsID(params *DeleteV1SignalsEmailTargetsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1SignalsEmailTargetsIDNoContent, error)

	DeleteV1SignalsWebhookTargetsID(params *DeleteV1SignalsWebhookTargetsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1SignalsWebhookTargetsIDNoContent, error)

	DeleteV1TeamsTeamIDEscalationPoliciesID(params *DeleteV1TeamsTeamIDEscalationPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TeamsTeamIDEscalationPoliciesIDNoContent, error)

	DeleteV1TeamsTeamIDOnCallSchedulesScheduleID(params *DeleteV1TeamsTeamIDOnCallSchedulesScheduleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TeamsTeamIDOnCallSchedulesScheduleIDNoContent, error)

	DeleteV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsID(params *DeleteV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDNoContent, error)

	DeleteV1TeamsTeamIDSignalRulesID(params *DeleteV1TeamsTeamIDSignalRulesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TeamsTeamIDSignalRulesIDNoContent, error)

	GetV1SignalsEmailTargets(params *GetV1SignalsEmailTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SignalsEmailTargetsOK, error)

	GetV1SignalsEmailTargetsID(params *GetV1SignalsEmailTargetsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SignalsEmailTargetsIDOK, error)

	GetV1SignalsEventSources(params *GetV1SignalsEventSourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SignalsEventSourcesOK, error)

	GetV1SignalsIngestURL(params *GetV1SignalsIngestURLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SignalsIngestURLOK, error)

	GetV1SignalsOnCall(params *GetV1SignalsOnCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SignalsOnCallOK, error)

	GetV1SignalsTransposers(params *GetV1SignalsTransposersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SignalsTransposersOK, error)

	GetV1SignalsWebhookTargets(params *GetV1SignalsWebhookTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SignalsWebhookTargetsOK, error)

	GetV1SignalsWebhookTargetsID(params *GetV1SignalsWebhookTargetsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SignalsWebhookTargetsIDOK, error)

	GetV1TeamsTeamIDEscalationPolicies(params *GetV1TeamsTeamIDEscalationPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TeamsTeamIDEscalationPoliciesOK, error)

	GetV1TeamsTeamIDEscalationPoliciesID(params *GetV1TeamsTeamIDEscalationPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TeamsTeamIDEscalationPoliciesIDOK, error)

	GetV1TeamsTeamIDOnCallSchedules(params *GetV1TeamsTeamIDOnCallSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TeamsTeamIDOnCallSchedulesOK, error)

	GetV1TeamsTeamIDOnCallSchedulesScheduleID(params *GetV1TeamsTeamIDOnCallSchedulesScheduleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TeamsTeamIDOnCallSchedulesScheduleIDOK, error)

	GetV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsID(params *GetV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDOK, error)

	GetV1TeamsTeamIDSignalRules(params *GetV1TeamsTeamIDSignalRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TeamsTeamIDSignalRulesOK, error)

	GetV1TeamsTeamIDSignalRulesID(params *GetV1TeamsTeamIDSignalRulesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TeamsTeamIDSignalRulesIDOK, error)

	PatchV1SignalsEmailTargetsID(params *PatchV1SignalsEmailTargetsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SignalsEmailTargetsIDOK, error)

	PatchV1SignalsWebhookTargetsID(params *PatchV1SignalsWebhookTargetsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SignalsWebhookTargetsIDOK, error)

	PatchV1TeamsTeamIDEscalationPoliciesID(params *PatchV1TeamsTeamIDEscalationPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TeamsTeamIDEscalationPoliciesIDOK, error)

	PatchV1TeamsTeamIDOnCallSchedulesScheduleID(params *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TeamsTeamIDOnCallSchedulesScheduleIDOK, error)

	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsID(params *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDOK, error)

	PatchV1TeamsTeamIDSignalRulesID(params *PatchV1TeamsTeamIDSignalRulesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TeamsTeamIDSignalRulesIDOK, error)

	PostV1SignalsDebugger(params *PostV1SignalsDebuggerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SignalsDebuggerCreated, error)

	PostV1SignalsEmailTargets(params *PostV1SignalsEmailTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SignalsEmailTargetsCreated, error)

	PostV1SignalsWebhookTargets(params *PostV1SignalsWebhookTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SignalsWebhookTargetsCreated, error)

	PostV1TeamsTeamIDEscalationPolicies(params *PostV1TeamsTeamIDEscalationPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TeamsTeamIDEscalationPoliciesCreated, error)

	PostV1TeamsTeamIDOnCallSchedules(params *PostV1TeamsTeamIDOnCallSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TeamsTeamIDOnCallSchedulesCreated, error)

	PostV1TeamsTeamIDOnCallSchedulesScheduleIDShifts(params *PostV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsCreated, error)

	PostV1TeamsTeamIDSignalRules(params *PostV1TeamsTeamIDSignalRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TeamsTeamIDSignalRulesCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1SignalsEmailTargetsID deletes a signal email target

Delete a Signals email target by ID
*/
func (a *Client) DeleteV1SignalsEmailTargetsID(params *DeleteV1SignalsEmailTargetsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1SignalsEmailTargetsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1SignalsEmailTargetsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1SignalsEmailTargetsId",
		Method:             "DELETE",
		PathPattern:        "/v1/signals/email_targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1SignalsEmailTargetsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1SignalsEmailTargetsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1SignalsEmailTargetsId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1SignalsWebhookTargetsID deletes a webhook target

Delete a Signals webhook target by ID
*/
func (a *Client) DeleteV1SignalsWebhookTargetsID(params *DeleteV1SignalsWebhookTargetsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1SignalsWebhookTargetsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1SignalsWebhookTargetsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1SignalsWebhookTargetsId",
		Method:             "DELETE",
		PathPattern:        "/v1/signals/webhook_targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1SignalsWebhookTargetsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1SignalsWebhookTargetsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1SignalsWebhookTargetsId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1TeamsTeamIDEscalationPoliciesID deletes an escalation policy for a team

Delete a Signals escalation policy by ID
*/
func (a *Client) DeleteV1TeamsTeamIDEscalationPoliciesID(params *DeleteV1TeamsTeamIDEscalationPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TeamsTeamIDEscalationPoliciesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1TeamsTeamIDEscalationPoliciesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1TeamsTeamIdEscalationPoliciesId",
		Method:             "DELETE",
		PathPattern:        "/v1/teams/{team_id}/escalation_policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1TeamsTeamIDEscalationPoliciesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1TeamsTeamIDEscalationPoliciesIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1TeamsTeamIdEscalationPoliciesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1TeamsTeamIDOnCallSchedulesScheduleID deletes an on call schedule for a team

Delete a Signals on-call schedule by ID
*/
func (a *Client) DeleteV1TeamsTeamIDOnCallSchedulesScheduleID(params *DeleteV1TeamsTeamIDOnCallSchedulesScheduleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TeamsTeamIDOnCallSchedulesScheduleIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1TeamsTeamIDOnCallSchedulesScheduleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1TeamsTeamIdOnCallSchedulesScheduleId",
		Method:             "DELETE",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules/{schedule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1TeamsTeamIDOnCallSchedulesScheduleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1TeamsTeamIDOnCallSchedulesScheduleIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1TeamsTeamIdOnCallSchedulesScheduleId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsID deletes an on call shift from a team schedule

Delete a Signals on-call shift by ID
*/
func (a *Client) DeleteV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsID(params *DeleteV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId",
		Method:             "DELETE",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules/{schedule_id}/shifts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1TeamsTeamIDSignalRulesID deletes a signals rule

Delete a Signals rule by ID
*/
func (a *Client) DeleteV1TeamsTeamIDSignalRulesID(params *DeleteV1TeamsTeamIDSignalRulesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TeamsTeamIDSignalRulesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1TeamsTeamIDSignalRulesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1TeamsTeamIdSignalRulesId",
		Method:             "DELETE",
		PathPattern:        "/v1/teams/{team_id}/signal_rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1TeamsTeamIDSignalRulesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1TeamsTeamIDSignalRulesIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1TeamsTeamIdSignalRulesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SignalsEmailTargets lists email targets for signals

List all Signals email targets for a team.
*/
func (a *Client) GetV1SignalsEmailTargets(params *GetV1SignalsEmailTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SignalsEmailTargetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SignalsEmailTargetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1SignalsEmailTargets",
		Method:             "GET",
		PathPattern:        "/v1/signals/email_targets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SignalsEmailTargetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SignalsEmailTargetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1SignalsEmailTargets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SignalsEmailTargetsID gets a signal email target

Get a Signals email target by ID
*/
func (a *Client) GetV1SignalsEmailTargetsID(params *GetV1SignalsEmailTargetsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SignalsEmailTargetsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SignalsEmailTargetsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1SignalsEmailTargetsId",
		Method:             "GET",
		PathPattern:        "/v1/signals/email_targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SignalsEmailTargetsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SignalsEmailTargetsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1SignalsEmailTargetsId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SignalsEventSources lists event sources for signals

List all Signals event sources for the authenticated user.
*/
func (a *Client) GetV1SignalsEventSources(params *GetV1SignalsEventSourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SignalsEventSourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SignalsEventSourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1SignalsEventSources",
		Method:             "GET",
		PathPattern:        "/v1/signals/event_sources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SignalsEventSourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SignalsEventSourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1SignalsEventSources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SignalsIngestURL gets the signals ingestion URL

Retrieve the url for ingesting signals for your organization
*/
func (a *Client) GetV1SignalsIngestURL(params *GetV1SignalsIngestURLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SignalsIngestURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SignalsIngestURLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1SignalsIngestUrl",
		Method:             "GET",
		PathPattern:        "/v1/signals/ingest_url",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SignalsIngestURLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SignalsIngestURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1SignalsIngestUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SignalsOnCall lists on call schedules

List all Signals on-call schedules for the entire organization.
*/
func (a *Client) GetV1SignalsOnCall(params *GetV1SignalsOnCallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SignalsOnCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SignalsOnCallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1SignalsOnCall",
		Method:             "GET",
		PathPattern:        "/v1/signals_on_call",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SignalsOnCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SignalsOnCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1SignalsOnCall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SignalsTransposers lists signal transposers

List all transposers for your organization
*/
func (a *Client) GetV1SignalsTransposers(params *GetV1SignalsTransposersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SignalsTransposersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SignalsTransposersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1SignalsTransposers",
		Method:             "GET",
		PathPattern:        "/v1/signals/transposers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SignalsTransposersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SignalsTransposersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1SignalsTransposers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SignalsWebhookTargets lists webhook targets

List all Signals webhook targets.
*/
func (a *Client) GetV1SignalsWebhookTargets(params *GetV1SignalsWebhookTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SignalsWebhookTargetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SignalsWebhookTargetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1SignalsWebhookTargets",
		Method:             "GET",
		PathPattern:        "/v1/signals/webhook_targets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SignalsWebhookTargetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SignalsWebhookTargetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1SignalsWebhookTargets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SignalsWebhookTargetsID gets a webhook target

Get a Signals webhook target by ID
*/
func (a *Client) GetV1SignalsWebhookTargetsID(params *GetV1SignalsWebhookTargetsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SignalsWebhookTargetsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SignalsWebhookTargetsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1SignalsWebhookTargetsId",
		Method:             "GET",
		PathPattern:        "/v1/signals/webhook_targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SignalsWebhookTargetsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SignalsWebhookTargetsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1SignalsWebhookTargetsId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TeamsTeamIDEscalationPolicies lists escalation policies for a team

List all Signals escalation policies for a team.
*/
func (a *Client) GetV1TeamsTeamIDEscalationPolicies(params *GetV1TeamsTeamIDEscalationPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TeamsTeamIDEscalationPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TeamsTeamIDEscalationPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TeamsTeamIdEscalationPolicies",
		Method:             "GET",
		PathPattern:        "/v1/teams/{team_id}/escalation_policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TeamsTeamIDEscalationPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TeamsTeamIDEscalationPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TeamsTeamIdEscalationPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TeamsTeamIDEscalationPoliciesID gets an escalation policy for a team

Get a Signals escalation policy by ID
*/
func (a *Client) GetV1TeamsTeamIDEscalationPoliciesID(params *GetV1TeamsTeamIDEscalationPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TeamsTeamIDEscalationPoliciesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TeamsTeamIDEscalationPoliciesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TeamsTeamIdEscalationPoliciesId",
		Method:             "GET",
		PathPattern:        "/v1/teams/{team_id}/escalation_policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TeamsTeamIDEscalationPoliciesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TeamsTeamIDEscalationPoliciesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TeamsTeamIdEscalationPoliciesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TeamsTeamIDOnCallSchedules lists on call schedules for a team

List all Signals on-call schedules for a team.
*/
func (a *Client) GetV1TeamsTeamIDOnCallSchedules(params *GetV1TeamsTeamIDOnCallSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TeamsTeamIDOnCallSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TeamsTeamIDOnCallSchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TeamsTeamIdOnCallSchedules",
		Method:             "GET",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TeamsTeamIDOnCallSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TeamsTeamIDOnCallSchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TeamsTeamIdOnCallSchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TeamsTeamIDOnCallSchedulesScheduleID gets an on call schedule for a team

Get a Signals on-call schedule by ID
*/
func (a *Client) GetV1TeamsTeamIDOnCallSchedulesScheduleID(params *GetV1TeamsTeamIDOnCallSchedulesScheduleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TeamsTeamIDOnCallSchedulesScheduleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TeamsTeamIDOnCallSchedulesScheduleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TeamsTeamIdOnCallSchedulesScheduleId",
		Method:             "GET",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules/{schedule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TeamsTeamIDOnCallSchedulesScheduleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TeamsTeamIDOnCallSchedulesScheduleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TeamsTeamIdOnCallSchedulesScheduleId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsID gets an on call shift for a team schedule

Get a Signals on-call shift by ID
*/
func (a *Client) GetV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsID(params *GetV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId",
		Method:             "GET",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules/{schedule_id}/shifts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TeamsTeamIDSignalRules lists signals rules

List all Signals rules for a team.
*/
func (a *Client) GetV1TeamsTeamIDSignalRules(params *GetV1TeamsTeamIDSignalRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TeamsTeamIDSignalRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TeamsTeamIDSignalRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TeamsTeamIdSignalRules",
		Method:             "GET",
		PathPattern:        "/v1/teams/{team_id}/signal_rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TeamsTeamIDSignalRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TeamsTeamIDSignalRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TeamsTeamIdSignalRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TeamsTeamIDSignalRulesID gets a signals rule

Get a Signals rule by ID.
*/
func (a *Client) GetV1TeamsTeamIDSignalRulesID(params *GetV1TeamsTeamIDSignalRulesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TeamsTeamIDSignalRulesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TeamsTeamIDSignalRulesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TeamsTeamIdSignalRulesId",
		Method:             "GET",
		PathPattern:        "/v1/teams/{team_id}/signal_rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TeamsTeamIDSignalRulesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TeamsTeamIDSignalRulesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TeamsTeamIdSignalRulesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1SignalsEmailTargetsID updates an email target

Update a Signals email target by ID
*/
func (a *Client) PatchV1SignalsEmailTargetsID(params *PatchV1SignalsEmailTargetsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SignalsEmailTargetsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1SignalsEmailTargetsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1SignalsEmailTargetsId",
		Method:             "PATCH",
		PathPattern:        "/v1/signals/email_targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1SignalsEmailTargetsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1SignalsEmailTargetsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1SignalsEmailTargetsId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1SignalsWebhookTargetsID updates a webhook target

Update a Signals webhook target by ID
*/
func (a *Client) PatchV1SignalsWebhookTargetsID(params *PatchV1SignalsWebhookTargetsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SignalsWebhookTargetsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1SignalsWebhookTargetsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1SignalsWebhookTargetsId",
		Method:             "PATCH",
		PathPattern:        "/v1/signals/webhook_targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1SignalsWebhookTargetsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1SignalsWebhookTargetsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1SignalsWebhookTargetsId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1TeamsTeamIDEscalationPoliciesID updates an escalation policy for a team

Update a Signals escalation policy by ID
*/
func (a *Client) PatchV1TeamsTeamIDEscalationPoliciesID(params *PatchV1TeamsTeamIDEscalationPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TeamsTeamIDEscalationPoliciesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1TeamsTeamIDEscalationPoliciesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1TeamsTeamIdEscalationPoliciesId",
		Method:             "PATCH",
		PathPattern:        "/v1/teams/{team_id}/escalation_policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1TeamsTeamIDEscalationPoliciesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1TeamsTeamIDEscalationPoliciesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1TeamsTeamIdEscalationPoliciesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1TeamsTeamIDOnCallSchedulesScheduleID updates an on call schedule for a team

Update a Signals on-call schedule by ID
*/
func (a *Client) PatchV1TeamsTeamIDOnCallSchedulesScheduleID(params *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TeamsTeamIDOnCallSchedulesScheduleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1TeamsTeamIDOnCallSchedulesScheduleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1TeamsTeamIdOnCallSchedulesScheduleId",
		Method:             "PATCH",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules/{schedule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1TeamsTeamIDOnCallSchedulesScheduleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1TeamsTeamIDOnCallSchedulesScheduleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1TeamsTeamIdOnCallSchedulesScheduleId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsID updates an on call shift for a team schedule

Update a Signals on-call shift by ID
*/
func (a *Client) PatchV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsID(params *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId",
		Method:             "PATCH",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules/{schedule_id}/shifts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1TeamsTeamIdOnCallSchedulesScheduleIdShiftsId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1TeamsTeamIDSignalRulesID updates a signals rule

Update a Signals rule by ID
*/
func (a *Client) PatchV1TeamsTeamIDSignalRulesID(params *PatchV1TeamsTeamIDSignalRulesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TeamsTeamIDSignalRulesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1TeamsTeamIDSignalRulesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1TeamsTeamIdSignalRulesId",
		Method:             "PATCH",
		PathPattern:        "/v1/teams/{team_id}/signal_rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1TeamsTeamIDSignalRulesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1TeamsTeamIDSignalRulesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1TeamsTeamIdSignalRulesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1SignalsDebugger debugs signals expressions

Debug Signals expressions
*/
func (a *Client) PostV1SignalsDebugger(params *PostV1SignalsDebuggerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SignalsDebuggerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1SignalsDebuggerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1SignalsDebugger",
		Method:             "POST",
		PathPattern:        "/v1/signals/debugger",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1SignalsDebuggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1SignalsDebuggerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1SignalsDebugger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1SignalsEmailTargets creates an email target for signals

Create a Signals email target for a team.
*/
func (a *Client) PostV1SignalsEmailTargets(params *PostV1SignalsEmailTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SignalsEmailTargetsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1SignalsEmailTargetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1SignalsEmailTargets",
		Method:             "POST",
		PathPattern:        "/v1/signals/email_targets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1SignalsEmailTargetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1SignalsEmailTargetsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1SignalsEmailTargets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1SignalsWebhookTargets creates a webhook target

Create a Signals webhook target.
*/
func (a *Client) PostV1SignalsWebhookTargets(params *PostV1SignalsWebhookTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SignalsWebhookTargetsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1SignalsWebhookTargetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1SignalsWebhookTargets",
		Method:             "POST",
		PathPattern:        "/v1/signals/webhook_targets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1SignalsWebhookTargetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1SignalsWebhookTargetsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1SignalsWebhookTargets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1TeamsTeamIDEscalationPolicies creates an escalation policy for a team

Create a Signals escalation policy for a team.
*/
func (a *Client) PostV1TeamsTeamIDEscalationPolicies(params *PostV1TeamsTeamIDEscalationPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TeamsTeamIDEscalationPoliciesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1TeamsTeamIDEscalationPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1TeamsTeamIdEscalationPolicies",
		Method:             "POST",
		PathPattern:        "/v1/teams/{team_id}/escalation_policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1TeamsTeamIDEscalationPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1TeamsTeamIDEscalationPoliciesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1TeamsTeamIdEscalationPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1TeamsTeamIDOnCallSchedules creates an on call schedule for a team

Create a Signals on-call schedule for a team.
*/
func (a *Client) PostV1TeamsTeamIDOnCallSchedules(params *PostV1TeamsTeamIDOnCallSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TeamsTeamIDOnCallSchedulesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1TeamsTeamIDOnCallSchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1TeamsTeamIdOnCallSchedules",
		Method:             "POST",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1TeamsTeamIDOnCallSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1TeamsTeamIDOnCallSchedulesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1TeamsTeamIdOnCallSchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1TeamsTeamIDOnCallSchedulesScheduleIDShifts creates a shift for an on call schedule

Create a Signals on-call shift in a schedule.
*/
func (a *Client) PostV1TeamsTeamIDOnCallSchedulesScheduleIDShifts(params *PostV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1TeamsTeamIdOnCallSchedulesScheduleIdShifts",
		Method:             "POST",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules/{schedule_id}/shifts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1TeamsTeamIDOnCallSchedulesScheduleIDShiftsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1TeamsTeamIdOnCallSchedulesScheduleIdShifts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1TeamsTeamIDSignalRules creates a signals rule

Create a Signals rule for a team.
*/
func (a *Client) PostV1TeamsTeamIDSignalRules(params *PostV1TeamsTeamIDSignalRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TeamsTeamIDSignalRulesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1TeamsTeamIDSignalRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1TeamsTeamIdSignalRules",
		Method:             "POST",
		PathPattern:        "/v1/teams/{team_id}/signal_rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1TeamsTeamIDSignalRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1TeamsTeamIDSignalRulesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1TeamsTeamIdSignalRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
