// Code generated by go-swagger; DO NOT EDIT.

package signals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new signals API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for signals API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateOnCallShift(params *CreateOnCallShiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOnCallShiftCreated, error)

	CreateSignalsEmailTarget(params *CreateSignalsEmailTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSignalsEmailTargetCreated, error)

	CreateSignalsWebhookTarget(params *CreateSignalsWebhookTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSignalsWebhookTargetCreated, error)

	CreateTeamEscalationPolicy(params *CreateTeamEscalationPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTeamEscalationPolicyCreated, error)

	CreateTeamOnCallSchedule(params *CreateTeamOnCallScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTeamOnCallScheduleCreated, error)

	CreateTeamSignalRule(params *CreateTeamSignalRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTeamSignalRuleCreated, error)

	DebugSignalsExpression(params *DebugSignalsExpressionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DebugSignalsExpressionCreated, error)

	DeleteOnCallShift(params *DeleteOnCallShiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOnCallShiftNoContent, error)

	DeleteSignalsEmailTarget(params *DeleteSignalsEmailTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSignalsEmailTargetNoContent, error)

	DeleteSignalsWebhookTarget(params *DeleteSignalsWebhookTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSignalsWebhookTargetNoContent, error)

	DeleteTeamEscalationPolicy(params *DeleteTeamEscalationPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTeamEscalationPolicyNoContent, error)

	DeleteTeamOnCallSchedule(params *DeleteTeamOnCallScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTeamOnCallScheduleNoContent, error)

	DeleteTeamSignalRule(params *DeleteTeamSignalRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTeamSignalRuleNoContent, error)

	GetOnCallShift(params *GetOnCallShiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnCallShiftOK, error)

	GetSignalsEmailTarget(params *GetSignalsEmailTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSignalsEmailTargetOK, error)

	GetSignalsIngestURL(params *GetSignalsIngestURLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSignalsIngestURLOK, error)

	GetSignalsWebhookTarget(params *GetSignalsWebhookTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSignalsWebhookTargetOK, error)

	GetTeamEscalationPolicy(params *GetTeamEscalationPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamEscalationPolicyOK, error)

	GetTeamOnCallSchedule(params *GetTeamOnCallScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamOnCallScheduleOK, error)

	GetTeamSignalRule(params *GetTeamSignalRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamSignalRuleOK, error)

	ListOrganizationOnCallSchedules(params *ListOrganizationOnCallSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrganizationOnCallSchedulesOK, error)

	ListSignalsEmailTargets(params *ListSignalsEmailTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSignalsEmailTargetsOK, error)

	ListSignalsEventSources(params *ListSignalsEventSourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSignalsEventSourcesOK, error)

	ListSignalsTransposers(params *ListSignalsTransposersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSignalsTransposersOK, error)

	ListSignalsWebhookTargets(params *ListSignalsWebhookTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSignalsWebhookTargetsOK, error)

	ListTeamEscalationPolicies(params *ListTeamEscalationPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTeamEscalationPoliciesOK, error)

	ListTeamOnCallSchedules(params *ListTeamOnCallSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTeamOnCallSchedulesOK, error)

	ListTeamSignalRules(params *ListTeamSignalRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTeamSignalRulesOK, error)

	UpdateOnCallShift(params *UpdateOnCallShiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOnCallShiftOK, error)

	UpdateSignalsEmailTarget(params *UpdateSignalsEmailTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSignalsEmailTargetOK, error)

	UpdateSignalsWebhookTarget(params *UpdateSignalsWebhookTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSignalsWebhookTargetOK, error)

	UpdateTeamEscalationPolicy(params *UpdateTeamEscalationPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTeamEscalationPolicyOK, error)

	UpdateTeamOnCallSchedule(params *UpdateTeamOnCallScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTeamOnCallScheduleOK, error)

	UpdateTeamSignalRule(params *UpdateTeamSignalRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTeamSignalRuleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateOnCallShift creates a shift for an on call schedule

Create a Signals on-call shift in a schedule.
*/
func (a *Client) CreateOnCallShift(params *CreateOnCallShiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOnCallShiftCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOnCallShiftParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_on_call_shift",
		Method:             "POST",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules/{schedule_id}/shifts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOnCallShiftReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOnCallShiftCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_on_call_shift: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSignalsEmailTarget creates an email target for signals

Create a Signals email target for a team.
*/
func (a *Client) CreateSignalsEmailTarget(params *CreateSignalsEmailTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSignalsEmailTargetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSignalsEmailTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_signals_email_target",
		Method:             "POST",
		PathPattern:        "/v1/signals/email_targets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSignalsEmailTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSignalsEmailTargetCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_signals_email_target: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSignalsWebhookTarget creates a webhook target

Create a Signals webhook target.
*/
func (a *Client) CreateSignalsWebhookTarget(params *CreateSignalsWebhookTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSignalsWebhookTargetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSignalsWebhookTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_signals_webhook_target",
		Method:             "POST",
		PathPattern:        "/v1/signals/webhook_targets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSignalsWebhookTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSignalsWebhookTargetCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_signals_webhook_target: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTeamEscalationPolicy creates an escalation policy for a team

Create a Signals escalation policy for a team.
*/
func (a *Client) CreateTeamEscalationPolicy(params *CreateTeamEscalationPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTeamEscalationPolicyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTeamEscalationPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_team_escalation_policy",
		Method:             "POST",
		PathPattern:        "/v1/teams/{team_id}/escalation_policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTeamEscalationPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTeamEscalationPolicyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_team_escalation_policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTeamOnCallSchedule creates an on call schedule for a team

Create a Signals on-call schedule for a team.
*/
func (a *Client) CreateTeamOnCallSchedule(params *CreateTeamOnCallScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTeamOnCallScheduleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTeamOnCallScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_team_on_call_schedule",
		Method:             "POST",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTeamOnCallScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTeamOnCallScheduleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_team_on_call_schedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTeamSignalRule creates a signals rule

Create a Signals rule for a team.
*/
func (a *Client) CreateTeamSignalRule(params *CreateTeamSignalRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTeamSignalRuleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTeamSignalRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_team_signal_rule",
		Method:             "POST",
		PathPattern:        "/v1/teams/{team_id}/signal_rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTeamSignalRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTeamSignalRuleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_team_signal_rule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DebugSignalsExpression debugs signals expressions

Debug Signals expressions
*/
func (a *Client) DebugSignalsExpression(params *DebugSignalsExpressionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DebugSignalsExpressionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDebugSignalsExpressionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "debug_signals_expression",
		Method:             "POST",
		PathPattern:        "/v1/signals/debugger",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DebugSignalsExpressionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DebugSignalsExpressionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for debug_signals_expression: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteOnCallShift deletes an on call shift from a team schedule

Delete a Signals on-call shift by ID
*/
func (a *Client) DeleteOnCallShift(params *DeleteOnCallShiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOnCallShiftNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnCallShiftParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_on_call_shift",
		Method:             "DELETE",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules/{schedule_id}/shifts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOnCallShiftReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOnCallShiftNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_on_call_shift: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSignalsEmailTarget deletes a signal email target

Delete a Signals email target by ID
*/
func (a *Client) DeleteSignalsEmailTarget(params *DeleteSignalsEmailTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSignalsEmailTargetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSignalsEmailTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_signals_email_target",
		Method:             "DELETE",
		PathPattern:        "/v1/signals/email_targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSignalsEmailTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSignalsEmailTargetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_signals_email_target: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSignalsWebhookTarget deletes a webhook target

Delete a Signals webhook target by ID
*/
func (a *Client) DeleteSignalsWebhookTarget(params *DeleteSignalsWebhookTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSignalsWebhookTargetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSignalsWebhookTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_signals_webhook_target",
		Method:             "DELETE",
		PathPattern:        "/v1/signals/webhook_targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSignalsWebhookTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSignalsWebhookTargetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_signals_webhook_target: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTeamEscalationPolicy deletes an escalation policy for a team

Delete a Signals escalation policy by ID
*/
func (a *Client) DeleteTeamEscalationPolicy(params *DeleteTeamEscalationPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTeamEscalationPolicyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamEscalationPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_team_escalation_policy",
		Method:             "DELETE",
		PathPattern:        "/v1/teams/{team_id}/escalation_policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTeamEscalationPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTeamEscalationPolicyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_team_escalation_policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTeamOnCallSchedule deletes an on call schedule for a team

Delete a Signals on-call schedule by ID
*/
func (a *Client) DeleteTeamOnCallSchedule(params *DeleteTeamOnCallScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTeamOnCallScheduleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamOnCallScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_team_on_call_schedule",
		Method:             "DELETE",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules/{schedule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTeamOnCallScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTeamOnCallScheduleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_team_on_call_schedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTeamSignalRule deletes a signals rule

Delete a Signals rule by ID
*/
func (a *Client) DeleteTeamSignalRule(params *DeleteTeamSignalRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTeamSignalRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamSignalRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_team_signal_rule",
		Method:             "DELETE",
		PathPattern:        "/v1/teams/{team_id}/signal_rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTeamSignalRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTeamSignalRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_team_signal_rule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOnCallShift gets an on call shift for a team schedule

Get a Signals on-call shift by ID
*/
func (a *Client) GetOnCallShift(params *GetOnCallShiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnCallShiftOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOnCallShiftParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_on_call_shift",
		Method:             "GET",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules/{schedule_id}/shifts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOnCallShiftReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOnCallShiftOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_on_call_shift: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSignalsEmailTarget gets a signal email target

Get a Signals email target by ID
*/
func (a *Client) GetSignalsEmailTarget(params *GetSignalsEmailTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSignalsEmailTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSignalsEmailTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_signals_email_target",
		Method:             "GET",
		PathPattern:        "/v1/signals/email_targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSignalsEmailTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSignalsEmailTargetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_signals_email_target: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSignalsIngestURL gets the signals ingestion URL

Retrieve the url for ingesting signals for your organization
*/
func (a *Client) GetSignalsIngestURL(params *GetSignalsIngestURLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSignalsIngestURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSignalsIngestURLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_signals_ingest_url",
		Method:             "GET",
		PathPattern:        "/v1/signals/ingest_url",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSignalsIngestURLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSignalsIngestURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_signals_ingest_url: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSignalsWebhookTarget gets a webhook target

Get a Signals webhook target by ID
*/
func (a *Client) GetSignalsWebhookTarget(params *GetSignalsWebhookTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSignalsWebhookTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSignalsWebhookTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_signals_webhook_target",
		Method:             "GET",
		PathPattern:        "/v1/signals/webhook_targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSignalsWebhookTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSignalsWebhookTargetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_signals_webhook_target: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTeamEscalationPolicy gets an escalation policy for a team

Get a Signals escalation policy by ID
*/
func (a *Client) GetTeamEscalationPolicy(params *GetTeamEscalationPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamEscalationPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamEscalationPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_team_escalation_policy",
		Method:             "GET",
		PathPattern:        "/v1/teams/{team_id}/escalation_policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamEscalationPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamEscalationPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_team_escalation_policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTeamOnCallSchedule gets an on call schedule for a team

Get a Signals on-call schedule by ID
*/
func (a *Client) GetTeamOnCallSchedule(params *GetTeamOnCallScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamOnCallScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamOnCallScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_team_on_call_schedule",
		Method:             "GET",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules/{schedule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamOnCallScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamOnCallScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_team_on_call_schedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTeamSignalRule gets a signals rule

Get a Signals rule by ID.
*/
func (a *Client) GetTeamSignalRule(params *GetTeamSignalRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTeamSignalRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamSignalRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_team_signal_rule",
		Method:             "GET",
		PathPattern:        "/v1/teams/{team_id}/signal_rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamSignalRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamSignalRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_team_signal_rule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListOrganizationOnCallSchedules lists on call schedules

List all Signals on-call schedules for the entire organization.
*/
func (a *Client) ListOrganizationOnCallSchedules(params *ListOrganizationOnCallSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrganizationOnCallSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOrganizationOnCallSchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_organization_on_call_schedules",
		Method:             "GET",
		PathPattern:        "/v1/signals_on_call",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListOrganizationOnCallSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOrganizationOnCallSchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_organization_on_call_schedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSignalsEmailTargets lists email targets for signals

List all Signals email targets for a team.
*/
func (a *Client) ListSignalsEmailTargets(params *ListSignalsEmailTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSignalsEmailTargetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSignalsEmailTargetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_signals_email_targets",
		Method:             "GET",
		PathPattern:        "/v1/signals/email_targets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSignalsEmailTargetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSignalsEmailTargetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_signals_email_targets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSignalsEventSources lists event sources for signals

List all Signals event sources for the authenticated user.
*/
func (a *Client) ListSignalsEventSources(params *ListSignalsEventSourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSignalsEventSourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSignalsEventSourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_signals_event_sources",
		Method:             "GET",
		PathPattern:        "/v1/signals/event_sources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSignalsEventSourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSignalsEventSourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_signals_event_sources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSignalsTransposers lists signal transposers

List all transposers for your organization
*/
func (a *Client) ListSignalsTransposers(params *ListSignalsTransposersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSignalsTransposersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSignalsTransposersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_signals_transposers",
		Method:             "GET",
		PathPattern:        "/v1/signals/transposers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSignalsTransposersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSignalsTransposersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_signals_transposers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSignalsWebhookTargets lists webhook targets

List all Signals webhook targets.
*/
func (a *Client) ListSignalsWebhookTargets(params *ListSignalsWebhookTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSignalsWebhookTargetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSignalsWebhookTargetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_signals_webhook_targets",
		Method:             "GET",
		PathPattern:        "/v1/signals/webhook_targets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSignalsWebhookTargetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSignalsWebhookTargetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_signals_webhook_targets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTeamEscalationPolicies lists escalation policies for a team

List all Signals escalation policies for a team.
*/
func (a *Client) ListTeamEscalationPolicies(params *ListTeamEscalationPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTeamEscalationPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamEscalationPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_team_escalation_policies",
		Method:             "GET",
		PathPattern:        "/v1/teams/{team_id}/escalation_policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTeamEscalationPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTeamEscalationPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_team_escalation_policies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTeamOnCallSchedules lists on call schedules for a team

List all Signals on-call schedules for a team.
*/
func (a *Client) ListTeamOnCallSchedules(params *ListTeamOnCallSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTeamOnCallSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamOnCallSchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_team_on_call_schedules",
		Method:             "GET",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTeamOnCallSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTeamOnCallSchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_team_on_call_schedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTeamSignalRules lists signals rules

List all Signals rules for a team.
*/
func (a *Client) ListTeamSignalRules(params *ListTeamSignalRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTeamSignalRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamSignalRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_team_signal_rules",
		Method:             "GET",
		PathPattern:        "/v1/teams/{team_id}/signal_rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTeamSignalRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTeamSignalRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_team_signal_rules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateOnCallShift updates an on call shift for a team schedule

Update a Signals on-call shift by ID
*/
func (a *Client) UpdateOnCallShift(params *UpdateOnCallShiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOnCallShiftOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOnCallShiftParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_on_call_shift",
		Method:             "PATCH",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules/{schedule_id}/shifts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOnCallShiftReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOnCallShiftOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_on_call_shift: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSignalsEmailTarget updates an email target

Update a Signals email target by ID
*/
func (a *Client) UpdateSignalsEmailTarget(params *UpdateSignalsEmailTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSignalsEmailTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSignalsEmailTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_signals_email_target",
		Method:             "PATCH",
		PathPattern:        "/v1/signals/email_targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSignalsEmailTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSignalsEmailTargetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_signals_email_target: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSignalsWebhookTarget updates a webhook target

Update a Signals webhook target by ID
*/
func (a *Client) UpdateSignalsWebhookTarget(params *UpdateSignalsWebhookTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSignalsWebhookTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSignalsWebhookTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_signals_webhook_target",
		Method:             "PATCH",
		PathPattern:        "/v1/signals/webhook_targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSignalsWebhookTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSignalsWebhookTargetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_signals_webhook_target: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTeamEscalationPolicy updates an escalation policy for a team

Update a Signals escalation policy by ID
*/
func (a *Client) UpdateTeamEscalationPolicy(params *UpdateTeamEscalationPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTeamEscalationPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTeamEscalationPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_team_escalation_policy",
		Method:             "PATCH",
		PathPattern:        "/v1/teams/{team_id}/escalation_policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTeamEscalationPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTeamEscalationPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_team_escalation_policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTeamOnCallSchedule updates an on call schedule for a team

Update a Signals on-call schedule by ID
*/
func (a *Client) UpdateTeamOnCallSchedule(params *UpdateTeamOnCallScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTeamOnCallScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTeamOnCallScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_team_on_call_schedule",
		Method:             "PATCH",
		PathPattern:        "/v1/teams/{team_id}/on_call_schedules/{schedule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTeamOnCallScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTeamOnCallScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_team_on_call_schedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTeamSignalRule updates a signals rule

Update a Signals rule by ID
*/
func (a *Client) UpdateTeamSignalRule(params *UpdateTeamSignalRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTeamSignalRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTeamSignalRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_team_signal_rule",
		Method:             "PATCH",
		PathPattern:        "/v1/teams/{team_id}/signal_rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTeamSignalRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTeamSignalRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_team_signal_rule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
