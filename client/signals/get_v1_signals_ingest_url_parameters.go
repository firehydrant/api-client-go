// Code generated by go-swagger; DO NOT EDIT.

package signals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetV1SignalsIngestURLParams creates a new GetV1SignalsIngestURLParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetV1SignalsIngestURLParams() *GetV1SignalsIngestURLParams {
	return &GetV1SignalsIngestURLParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetV1SignalsIngestURLParamsWithTimeout creates a new GetV1SignalsIngestURLParams object
// with the ability to set a timeout on a request.
func NewGetV1SignalsIngestURLParamsWithTimeout(timeout time.Duration) *GetV1SignalsIngestURLParams {
	return &GetV1SignalsIngestURLParams{
		timeout: timeout,
	}
}

// NewGetV1SignalsIngestURLParamsWithContext creates a new GetV1SignalsIngestURLParams object
// with the ability to set a context for a request.
func NewGetV1SignalsIngestURLParamsWithContext(ctx context.Context) *GetV1SignalsIngestURLParams {
	return &GetV1SignalsIngestURLParams{
		Context: ctx,
	}
}

// NewGetV1SignalsIngestURLParamsWithHTTPClient creates a new GetV1SignalsIngestURLParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetV1SignalsIngestURLParamsWithHTTPClient(client *http.Client) *GetV1SignalsIngestURLParams {
	return &GetV1SignalsIngestURLParams{
		HTTPClient: client,
	}
}

/*
GetV1SignalsIngestURLParams contains all the parameters to send to the API endpoint

	for the get v1 signals ingest Url operation.

	Typically these are written to a http.Request.
*/
type GetV1SignalsIngestURLParams struct {

	/* EscalationPolicyID.

	   Escalation policy ID to send signals to directly. `team_id` is required if this is provided.
	*/
	EscalationPolicyID *string

	/* OnCallScheduleID.

	   On-call schedule ID to send signals to directly. `team_id` is required if this is provided.
	*/
	OnCallScheduleID *string

	/* TeamID.

	   Team ID to send signals to directly
	*/
	TeamID *string

	/* UserID.

	   User ID to send signals to directly
	*/
	UserID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get v1 signals ingest Url params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1SignalsIngestURLParams) WithDefaults() *GetV1SignalsIngestURLParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get v1 signals ingest Url params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1SignalsIngestURLParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get v1 signals ingest Url params
func (o *GetV1SignalsIngestURLParams) WithTimeout(timeout time.Duration) *GetV1SignalsIngestURLParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v1 signals ingest Url params
func (o *GetV1SignalsIngestURLParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v1 signals ingest Url params
func (o *GetV1SignalsIngestURLParams) WithContext(ctx context.Context) *GetV1SignalsIngestURLParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v1 signals ingest Url params
func (o *GetV1SignalsIngestURLParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v1 signals ingest Url params
func (o *GetV1SignalsIngestURLParams) WithHTTPClient(client *http.Client) *GetV1SignalsIngestURLParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v1 signals ingest Url params
func (o *GetV1SignalsIngestURLParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEscalationPolicyID adds the escalationPolicyID to the get v1 signals ingest Url params
func (o *GetV1SignalsIngestURLParams) WithEscalationPolicyID(escalationPolicyID *string) *GetV1SignalsIngestURLParams {
	o.SetEscalationPolicyID(escalationPolicyID)
	return o
}

// SetEscalationPolicyID adds the escalationPolicyId to the get v1 signals ingest Url params
func (o *GetV1SignalsIngestURLParams) SetEscalationPolicyID(escalationPolicyID *string) {
	o.EscalationPolicyID = escalationPolicyID
}

// WithOnCallScheduleID adds the onCallScheduleID to the get v1 signals ingest Url params
func (o *GetV1SignalsIngestURLParams) WithOnCallScheduleID(onCallScheduleID *string) *GetV1SignalsIngestURLParams {
	o.SetOnCallScheduleID(onCallScheduleID)
	return o
}

// SetOnCallScheduleID adds the onCallScheduleId to the get v1 signals ingest Url params
func (o *GetV1SignalsIngestURLParams) SetOnCallScheduleID(onCallScheduleID *string) {
	o.OnCallScheduleID = onCallScheduleID
}

// WithTeamID adds the teamID to the get v1 signals ingest Url params
func (o *GetV1SignalsIngestURLParams) WithTeamID(teamID *string) *GetV1SignalsIngestURLParams {
	o.SetTeamID(teamID)
	return o
}

// SetTeamID adds the teamId to the get v1 signals ingest Url params
func (o *GetV1SignalsIngestURLParams) SetTeamID(teamID *string) {
	o.TeamID = teamID
}

// WithUserID adds the userID to the get v1 signals ingest Url params
func (o *GetV1SignalsIngestURLParams) WithUserID(userID *string) *GetV1SignalsIngestURLParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get v1 signals ingest Url params
func (o *GetV1SignalsIngestURLParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetV1SignalsIngestURLParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EscalationPolicyID != nil {

		// query param escalation_policy_id
		var qrEscalationPolicyID string

		if o.EscalationPolicyID != nil {
			qrEscalationPolicyID = *o.EscalationPolicyID
		}
		qEscalationPolicyID := qrEscalationPolicyID
		if qEscalationPolicyID != "" {

			if err := r.SetQueryParam("escalation_policy_id", qEscalationPolicyID); err != nil {
				return err
			}
		}
	}

	if o.OnCallScheduleID != nil {

		// query param on_call_schedule_id
		var qrOnCallScheduleID string

		if o.OnCallScheduleID != nil {
			qrOnCallScheduleID = *o.OnCallScheduleID
		}
		qOnCallScheduleID := qrOnCallScheduleID
		if qOnCallScheduleID != "" {

			if err := r.SetQueryParam("on_call_schedule_id", qOnCallScheduleID); err != nil {
				return err
			}
		}
	}

	if o.TeamID != nil {

		// query param team_id
		var qrTeamID string

		if o.TeamID != nil {
			qrTeamID = *o.TeamID
		}
		qTeamID := qrTeamID
		if qTeamID != "" {

			if err := r.SetQueryParam("team_id", qTeamID); err != nil {
				return err
			}
		}
	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID string

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {

			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
