// Code generated by go-swagger; DO NOT EDIT.

package severity_matrix

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new severity matrix API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for severity matrix API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1SeverityMatrixConditionsConditionID(params *DeleteV1SeverityMatrixConditionsConditionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1SeverityMatrixConditionsConditionIDOK, error)

	DeleteV1SeverityMatrixImpactsImpactID(params *DeleteV1SeverityMatrixImpactsImpactIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1SeverityMatrixImpactsImpactIDOK, error)

	GetV1SeverityMatrix(params *GetV1SeverityMatrixParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeverityMatrixOK, error)

	GetV1SeverityMatrixConditions(params *GetV1SeverityMatrixConditionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeverityMatrixConditionsOK, error)

	GetV1SeverityMatrixConditionsConditionID(params *GetV1SeverityMatrixConditionsConditionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeverityMatrixConditionsConditionIDOK, error)

	GetV1SeverityMatrixImpacts(params *GetV1SeverityMatrixImpactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeverityMatrixImpactsOK, error)

	PatchV1SeverityMatrix(params *PatchV1SeverityMatrixParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SeverityMatrixOK, error)

	PatchV1SeverityMatrixConditionsConditionID(params *PatchV1SeverityMatrixConditionsConditionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SeverityMatrixConditionsConditionIDOK, error)

	PatchV1SeverityMatrixImpactsImpactID(params *PatchV1SeverityMatrixImpactsImpactIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SeverityMatrixImpactsImpactIDOK, error)

	PostV1SeverityMatrixConditions(params *PostV1SeverityMatrixConditionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SeverityMatrixConditionsCreated, error)

	PostV1SeverityMatrixImpacts(params *PostV1SeverityMatrixImpactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SeverityMatrixImpactsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1SeverityMatrixConditionsConditionID deletes a specific condition

Delete a specific condition
*/
func (a *Client) DeleteV1SeverityMatrixConditionsConditionID(params *DeleteV1SeverityMatrixConditionsConditionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1SeverityMatrixConditionsConditionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1SeverityMatrixConditionsConditionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1SeverityMatrixConditionsConditionId",
		Method:             "DELETE",
		PathPattern:        "/v1/severity_matrix/conditions/{condition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1SeverityMatrixConditionsConditionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1SeverityMatrixConditionsConditionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1SeverityMatrixConditionsConditionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1SeverityMatrixImpactsImpactID deletes a specific impact

Delete a specific impact
*/
func (a *Client) DeleteV1SeverityMatrixImpactsImpactID(params *DeleteV1SeverityMatrixImpactsImpactIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1SeverityMatrixImpactsImpactIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1SeverityMatrixImpactsImpactIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1SeverityMatrixImpactsImpactId",
		Method:             "DELETE",
		PathPattern:        "/v1/severity_matrix/impacts/{impact_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1SeverityMatrixImpactsImpactIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1SeverityMatrixImpactsImpactIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1SeverityMatrixImpactsImpactId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SeverityMatrix retrieves your severity matrix

Retrieve the Severity matrix for your organization and its components and configured severities.
*/
func (a *Client) GetV1SeverityMatrix(params *GetV1SeverityMatrixParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeverityMatrixOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SeverityMatrixParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1SeverityMatrix",
		Method:             "GET",
		PathPattern:        "/v1/severity_matrix",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SeverityMatrixReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SeverityMatrixOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1SeverityMatrix: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SeverityMatrixConditions lists conditions

Lists conditions
*/
func (a *Client) GetV1SeverityMatrixConditions(params *GetV1SeverityMatrixConditionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeverityMatrixConditionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SeverityMatrixConditionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1SeverityMatrixConditions",
		Method:             "GET",
		PathPattern:        "/v1/severity_matrix/conditions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SeverityMatrixConditionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SeverityMatrixConditionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1SeverityMatrixConditions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SeverityMatrixConditionsConditionID get v1 severity matrix conditions condition Id API
*/
func (a *Client) GetV1SeverityMatrixConditionsConditionID(params *GetV1SeverityMatrixConditionsConditionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeverityMatrixConditionsConditionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SeverityMatrixConditionsConditionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1SeverityMatrixConditionsConditionId",
		Method:             "GET",
		PathPattern:        "/v1/severity_matrix/conditions/{condition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SeverityMatrixConditionsConditionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SeverityMatrixConditionsConditionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1SeverityMatrixConditionsConditionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SeverityMatrixImpacts lists impacts

Lists impacts
*/
func (a *Client) GetV1SeverityMatrixImpacts(params *GetV1SeverityMatrixImpactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1SeverityMatrixImpactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SeverityMatrixImpactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1SeverityMatrixImpacts",
		Method:             "GET",
		PathPattern:        "/v1/severity_matrix/impacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1SeverityMatrixImpactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SeverityMatrixImpactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1SeverityMatrixImpacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1SeverityMatrix updates your severity matrix

Update available severities and impacts in your organization's severity matrix.
*/
func (a *Client) PatchV1SeverityMatrix(params *PatchV1SeverityMatrixParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SeverityMatrixOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1SeverityMatrixParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1SeverityMatrix",
		Method:             "PATCH",
		PathPattern:        "/v1/severity_matrix",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1SeverityMatrixReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1SeverityMatrixOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1SeverityMatrix: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1SeverityMatrixConditionsConditionID updates a specific condition

Update a specific condition
*/
func (a *Client) PatchV1SeverityMatrixConditionsConditionID(params *PatchV1SeverityMatrixConditionsConditionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SeverityMatrixConditionsConditionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1SeverityMatrixConditionsConditionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1SeverityMatrixConditionsConditionId",
		Method:             "PATCH",
		PathPattern:        "/v1/severity_matrix/conditions/{condition_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1SeverityMatrixConditionsConditionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1SeverityMatrixConditionsConditionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1SeverityMatrixConditionsConditionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1SeverityMatrixImpactsImpactID updates a specific impact

Update a specific impact
*/
func (a *Client) PatchV1SeverityMatrixImpactsImpactID(params *PatchV1SeverityMatrixImpactsImpactIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1SeverityMatrixImpactsImpactIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1SeverityMatrixImpactsImpactIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1SeverityMatrixImpactsImpactId",
		Method:             "PATCH",
		PathPattern:        "/v1/severity_matrix/impacts/{impact_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1SeverityMatrixImpactsImpactIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1SeverityMatrixImpactsImpactIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1SeverityMatrixImpactsImpactId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1SeverityMatrixConditions creates condition

Create a new condition
*/
func (a *Client) PostV1SeverityMatrixConditions(params *PostV1SeverityMatrixConditionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SeverityMatrixConditionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1SeverityMatrixConditionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1SeverityMatrixConditions",
		Method:             "POST",
		PathPattern:        "/v1/severity_matrix/conditions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1SeverityMatrixConditionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1SeverityMatrixConditionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1SeverityMatrixConditions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1SeverityMatrixImpacts creates impact

Create a new impact
*/
func (a *Client) PostV1SeverityMatrixImpacts(params *PostV1SeverityMatrixImpactsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1SeverityMatrixImpactsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1SeverityMatrixImpactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1SeverityMatrixImpacts",
		Method:             "POST",
		PathPattern:        "/v1/severity_matrix/impacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1SeverityMatrixImpactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1SeverityMatrixImpactsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1SeverityMatrixImpacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
