// Code generated by go-swagger; DO NOT EDIT.

package account_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new account settings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for account settings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetV1AiPreferences(params *GetV1AiPreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1AiPreferencesOK, error)

	GetV1Bootstrap(params *GetV1BootstrapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1BootstrapOK, error)

	GetV1Entitlements(params *GetV1EntitlementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1EntitlementsOK, error)

	GetV1NoauthPing(params *GetV1NoauthPingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1NoauthPingOK, error)

	GetV1Ping(params *GetV1PingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PingOK, error)

	PatchV1AiPreferences(params *PatchV1AiPreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1AiPreferencesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetV1AiPreferences gets a i preferences

Retrieves the current AI preferences
*/
func (a *Client) GetV1AiPreferences(params *GetV1AiPreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1AiPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1AiPreferencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1AiPreferences",
		Method:             "GET",
		PathPattern:        "/v1/ai/preferences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1AiPreferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1AiPreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1AiPreferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Bootstrap gets initial application configuration

Get initial application configuration
*/
func (a *Client) GetV1Bootstrap(params *GetV1BootstrapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1BootstrapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1BootstrapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1Bootstrap",
		Method:             "GET",
		PathPattern:        "/v1/bootstrap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1BootstrapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1BootstrapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1Bootstrap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Entitlements lists entitlements

List the organization's entitlements
*/
func (a *Client) GetV1Entitlements(params *GetV1EntitlementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1EntitlementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1EntitlementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1Entitlements",
		Method:             "GET",
		PathPattern:        "/v1/entitlements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1EntitlementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1EntitlementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1Entitlements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1NoauthPing checks API connectivity

Simple endpoint to verify your API connection is working
*/
func (a *Client) GetV1NoauthPing(params *GetV1NoauthPingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1NoauthPingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1NoauthPingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1NoauthPing",
		Method:             "GET",
		PathPattern:        "/v1/noauth/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1NoauthPingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1NoauthPingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1NoauthPing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Ping checks API connectivity

Simple endpoint to verify your API connection is working
*/
func (a *Client) GetV1Ping(params *GetV1PingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1Ping",
		Method:             "GET",
		PathPattern:        "/v1/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1PingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1PingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1Ping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1AiPreferences updates a i preferences

Updates the AI preferences
*/
func (a *Client) PatchV1AiPreferences(params *PatchV1AiPreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1AiPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1AiPreferencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1AiPreferences",
		Method:             "PATCH",
		PathPattern:        "/v1/ai/preferences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1AiPreferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1AiPreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1AiPreferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
