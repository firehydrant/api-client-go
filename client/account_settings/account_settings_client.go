// Code generated by go-swagger; DO NOT EDIT.

package account_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new account settings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for account settings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAiPreferences(params *GetAiPreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAiPreferencesOK, error)

	GetBootstrap(params *GetBootstrapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBootstrapOK, error)

	ListEntitlements(params *ListEntitlementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEntitlementsOK, error)

	Ping(params *PingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PingOK, error)

	PingNoauth(params *PingNoauthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PingNoauthOK, error)

	UpdateAiPreferences(params *UpdateAiPreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAiPreferencesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAiPreferences gets a i preferences

Retrieves the current AI preferences
*/
func (a *Client) GetAiPreferences(params *GetAiPreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAiPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAiPreferencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_ai_preferences",
		Method:             "GET",
		PathPattern:        "/v1/ai/preferences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAiPreferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAiPreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_ai_preferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBootstrap gets initial application configuration

Get initial application configuration
*/
func (a *Client) GetBootstrap(params *GetBootstrapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBootstrapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBootstrapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_bootstrap",
		Method:             "GET",
		PathPattern:        "/v1/bootstrap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBootstrapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBootstrapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_bootstrap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListEntitlements lists entitlements

List the organization's entitlements
*/
func (a *Client) ListEntitlements(params *ListEntitlementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEntitlementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEntitlementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_entitlements",
		Method:             "GET",
		PathPattern:        "/v1/entitlements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEntitlementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEntitlementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_entitlements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Ping checks API connectivity

Simple endpoint to verify your API connection is working
*/
func (a *Client) Ping(params *PingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ping",
		Method:             "GET",
		PathPattern:        "/v1/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PingNoauth checks API connectivity

Simple endpoint to verify your API connection is working
*/
func (a *Client) PingNoauth(params *PingNoauthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PingNoauthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPingNoauthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ping_noauth",
		Method:             "GET",
		PathPattern:        "/v1/noauth/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PingNoauthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PingNoauthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ping_noauth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAiPreferences updates a i preferences

Updates the AI preferences
*/
func (a *Client) UpdateAiPreferences(params *UpdateAiPreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAiPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAiPreferencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_ai_preferences",
		Method:             "PATCH",
		PathPattern:        "/v1/ai/preferences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAiPreferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAiPreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_ai_preferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
