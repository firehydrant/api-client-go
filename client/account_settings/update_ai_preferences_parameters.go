// Code generated by go-swagger; DO NOT EDIT.

package account_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUpdateAiPreferencesParams creates a new UpdateAiPreferencesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateAiPreferencesParams() *UpdateAiPreferencesParams {
	return &UpdateAiPreferencesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateAiPreferencesParamsWithTimeout creates a new UpdateAiPreferencesParams object
// with the ability to set a timeout on a request.
func NewUpdateAiPreferencesParamsWithTimeout(timeout time.Duration) *UpdateAiPreferencesParams {
	return &UpdateAiPreferencesParams{
		timeout: timeout,
	}
}

// NewUpdateAiPreferencesParamsWithContext creates a new UpdateAiPreferencesParams object
// with the ability to set a context for a request.
func NewUpdateAiPreferencesParamsWithContext(ctx context.Context) *UpdateAiPreferencesParams {
	return &UpdateAiPreferencesParams{
		Context: ctx,
	}
}

// NewUpdateAiPreferencesParamsWithHTTPClient creates a new UpdateAiPreferencesParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateAiPreferencesParamsWithHTTPClient(client *http.Client) *UpdateAiPreferencesParams {
	return &UpdateAiPreferencesParams{
		HTTPClient: client,
	}
}

/*
UpdateAiPreferencesParams contains all the parameters to send to the API endpoint

	for the update ai preferences operation.

	Typically these are written to a http.Request.
*/
type UpdateAiPreferencesParams struct {

	/* Ai.

	   Whether to enable AI features
	*/
	Ai *bool

	/* Description.

	   Whether to enable incident descriptions
	*/
	Description *bool

	/* Followups.

	   Whether to enable incident followups
	*/
	Followups *bool

	/* Impact.

	   Whether to enable incident impact
	*/
	Impact *bool

	/* Retros.

	   Whether to enable incident retrospectives
	*/
	Retros *bool

	/* SimilarIncidents.

	   Whether to enable similar incidents
	*/
	SimilarIncidents *bool

	/* Summaries.

	   Whether to enable incident summaries
	*/
	Summaries *bool

	/* Updates.

	   Whether to enable incident updates
	*/
	Updates *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update ai preferences params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateAiPreferencesParams) WithDefaults() *UpdateAiPreferencesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update ai preferences params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateAiPreferencesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update ai preferences params
func (o *UpdateAiPreferencesParams) WithTimeout(timeout time.Duration) *UpdateAiPreferencesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update ai preferences params
func (o *UpdateAiPreferencesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update ai preferences params
func (o *UpdateAiPreferencesParams) WithContext(ctx context.Context) *UpdateAiPreferencesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update ai preferences params
func (o *UpdateAiPreferencesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update ai preferences params
func (o *UpdateAiPreferencesParams) WithHTTPClient(client *http.Client) *UpdateAiPreferencesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update ai preferences params
func (o *UpdateAiPreferencesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAi adds the ai to the update ai preferences params
func (o *UpdateAiPreferencesParams) WithAi(ai *bool) *UpdateAiPreferencesParams {
	o.SetAi(ai)
	return o
}

// SetAi adds the ai to the update ai preferences params
func (o *UpdateAiPreferencesParams) SetAi(ai *bool) {
	o.Ai = ai
}

// WithDescription adds the description to the update ai preferences params
func (o *UpdateAiPreferencesParams) WithDescription(description *bool) *UpdateAiPreferencesParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the update ai preferences params
func (o *UpdateAiPreferencesParams) SetDescription(description *bool) {
	o.Description = description
}

// WithFollowups adds the followups to the update ai preferences params
func (o *UpdateAiPreferencesParams) WithFollowups(followups *bool) *UpdateAiPreferencesParams {
	o.SetFollowups(followups)
	return o
}

// SetFollowups adds the followups to the update ai preferences params
func (o *UpdateAiPreferencesParams) SetFollowups(followups *bool) {
	o.Followups = followups
}

// WithImpact adds the impact to the update ai preferences params
func (o *UpdateAiPreferencesParams) WithImpact(impact *bool) *UpdateAiPreferencesParams {
	o.SetImpact(impact)
	return o
}

// SetImpact adds the impact to the update ai preferences params
func (o *UpdateAiPreferencesParams) SetImpact(impact *bool) {
	o.Impact = impact
}

// WithRetros adds the retros to the update ai preferences params
func (o *UpdateAiPreferencesParams) WithRetros(retros *bool) *UpdateAiPreferencesParams {
	o.SetRetros(retros)
	return o
}

// SetRetros adds the retros to the update ai preferences params
func (o *UpdateAiPreferencesParams) SetRetros(retros *bool) {
	o.Retros = retros
}

// WithSimilarIncidents adds the similarIncidents to the update ai preferences params
func (o *UpdateAiPreferencesParams) WithSimilarIncidents(similarIncidents *bool) *UpdateAiPreferencesParams {
	o.SetSimilarIncidents(similarIncidents)
	return o
}

// SetSimilarIncidents adds the similarIncidents to the update ai preferences params
func (o *UpdateAiPreferencesParams) SetSimilarIncidents(similarIncidents *bool) {
	o.SimilarIncidents = similarIncidents
}

// WithSummaries adds the summaries to the update ai preferences params
func (o *UpdateAiPreferencesParams) WithSummaries(summaries *bool) *UpdateAiPreferencesParams {
	o.SetSummaries(summaries)
	return o
}

// SetSummaries adds the summaries to the update ai preferences params
func (o *UpdateAiPreferencesParams) SetSummaries(summaries *bool) {
	o.Summaries = summaries
}

// WithUpdates adds the updates to the update ai preferences params
func (o *UpdateAiPreferencesParams) WithUpdates(updates *bool) *UpdateAiPreferencesParams {
	o.SetUpdates(updates)
	return o
}

// SetUpdates adds the updates to the update ai preferences params
func (o *UpdateAiPreferencesParams) SetUpdates(updates *bool) {
	o.Updates = updates
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateAiPreferencesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Ai != nil {

		// form param ai
		var frAi bool
		if o.Ai != nil {
			frAi = *o.Ai
		}
		fAi := swag.FormatBool(frAi)
		if fAi != "" {
			if err := r.SetFormParam("ai", fAi); err != nil {
				return err
			}
		}
	}

	if o.Description != nil {

		// form param description
		var frDescription bool
		if o.Description != nil {
			frDescription = *o.Description
		}
		fDescription := swag.FormatBool(frDescription)
		if fDescription != "" {
			if err := r.SetFormParam("description", fDescription); err != nil {
				return err
			}
		}
	}

	if o.Followups != nil {

		// form param followups
		var frFollowups bool
		if o.Followups != nil {
			frFollowups = *o.Followups
		}
		fFollowups := swag.FormatBool(frFollowups)
		if fFollowups != "" {
			if err := r.SetFormParam("followups", fFollowups); err != nil {
				return err
			}
		}
	}

	if o.Impact != nil {

		// form param impact
		var frImpact bool
		if o.Impact != nil {
			frImpact = *o.Impact
		}
		fImpact := swag.FormatBool(frImpact)
		if fImpact != "" {
			if err := r.SetFormParam("impact", fImpact); err != nil {
				return err
			}
		}
	}

	if o.Retros != nil {

		// form param retros
		var frRetros bool
		if o.Retros != nil {
			frRetros = *o.Retros
		}
		fRetros := swag.FormatBool(frRetros)
		if fRetros != "" {
			if err := r.SetFormParam("retros", fRetros); err != nil {
				return err
			}
		}
	}

	if o.SimilarIncidents != nil {

		// form param similar_incidents
		var frSimilarIncidents bool
		if o.SimilarIncidents != nil {
			frSimilarIncidents = *o.SimilarIncidents
		}
		fSimilarIncidents := swag.FormatBool(frSimilarIncidents)
		if fSimilarIncidents != "" {
			if err := r.SetFormParam("similar_incidents", fSimilarIncidents); err != nil {
				return err
			}
		}
	}

	if o.Summaries != nil {

		// form param summaries
		var frSummaries bool
		if o.Summaries != nil {
			frSummaries = *o.Summaries
		}
		fSummaries := swag.FormatBool(frSummaries)
		if fSummaries != "" {
			if err := r.SetFormParam("summaries", fSummaries); err != nil {
				return err
			}
		}
	}

	if o.Updates != nil {

		// form param updates
		var frUpdates bool
		if o.Updates != nil {
			frUpdates = *o.Updates
		}
		fUpdates := swag.FormatBool(frUpdates)
		if fUpdates != "" {
			if err := r.SetFormParam("updates", fUpdates); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
