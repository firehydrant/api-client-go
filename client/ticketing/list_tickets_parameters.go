// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListTicketsParams creates a new ListTicketsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListTicketsParams() *ListTicketsParams {
	return &ListTicketsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListTicketsParamsWithTimeout creates a new ListTicketsParams object
// with the ability to set a timeout on a request.
func NewListTicketsParamsWithTimeout(timeout time.Duration) *ListTicketsParams {
	return &ListTicketsParams{
		timeout: timeout,
	}
}

// NewListTicketsParamsWithContext creates a new ListTicketsParams object
// with the ability to set a context for a request.
func NewListTicketsParamsWithContext(ctx context.Context) *ListTicketsParams {
	return &ListTicketsParams{
		Context: ctx,
	}
}

// NewListTicketsParamsWithHTTPClient creates a new ListTicketsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListTicketsParamsWithHTTPClient(client *http.Client) *ListTicketsParams {
	return &ListTicketsParams{
		HTTPClient: client,
	}
}

/*
ListTicketsParams contains all the parameters to send to the API endpoint

	for the list tickets operation.

	Typically these are written to a http.Request.
*/
type ListTicketsParams struct {

	/* AssignedUser.

	   Filter tickets assigned to this user id
	*/
	AssignedUser *string

	// Page.
	//
	// Format: int32
	Page *int32

	// PerPage.
	//
	// Format: int32
	PerPage *int32

	/* State.

	   Filter tickets by state
	*/
	State *string

	/* TagMatchStrategy.

	   A matching strategy for the tags provided
	*/
	TagMatchStrategy *string

	/* Tags.

	   A comma separated list of tags
	*/
	Tags *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list tickets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListTicketsParams) WithDefaults() *ListTicketsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list tickets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListTicketsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list tickets params
func (o *ListTicketsParams) WithTimeout(timeout time.Duration) *ListTicketsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list tickets params
func (o *ListTicketsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list tickets params
func (o *ListTicketsParams) WithContext(ctx context.Context) *ListTicketsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list tickets params
func (o *ListTicketsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list tickets params
func (o *ListTicketsParams) WithHTTPClient(client *http.Client) *ListTicketsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list tickets params
func (o *ListTicketsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssignedUser adds the assignedUser to the list tickets params
func (o *ListTicketsParams) WithAssignedUser(assignedUser *string) *ListTicketsParams {
	o.SetAssignedUser(assignedUser)
	return o
}

// SetAssignedUser adds the assignedUser to the list tickets params
func (o *ListTicketsParams) SetAssignedUser(assignedUser *string) {
	o.AssignedUser = assignedUser
}

// WithPage adds the page to the list tickets params
func (o *ListTicketsParams) WithPage(page *int32) *ListTicketsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list tickets params
func (o *ListTicketsParams) SetPage(page *int32) {
	o.Page = page
}

// WithPerPage adds the perPage to the list tickets params
func (o *ListTicketsParams) WithPerPage(perPage *int32) *ListTicketsParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the list tickets params
func (o *ListTicketsParams) SetPerPage(perPage *int32) {
	o.PerPage = perPage
}

// WithState adds the state to the list tickets params
func (o *ListTicketsParams) WithState(state *string) *ListTicketsParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the list tickets params
func (o *ListTicketsParams) SetState(state *string) {
	o.State = state
}

// WithTagMatchStrategy adds the tagMatchStrategy to the list tickets params
func (o *ListTicketsParams) WithTagMatchStrategy(tagMatchStrategy *string) *ListTicketsParams {
	o.SetTagMatchStrategy(tagMatchStrategy)
	return o
}

// SetTagMatchStrategy adds the tagMatchStrategy to the list tickets params
func (o *ListTicketsParams) SetTagMatchStrategy(tagMatchStrategy *string) {
	o.TagMatchStrategy = tagMatchStrategy
}

// WithTags adds the tags to the list tickets params
func (o *ListTicketsParams) WithTags(tags *string) *ListTicketsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the list tickets params
func (o *ListTicketsParams) SetTags(tags *string) {
	o.Tags = tags
}

// WriteToRequest writes these params to a swagger request
func (o *ListTicketsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AssignedUser != nil {

		// query param assigned_user
		var qrAssignedUser string

		if o.AssignedUser != nil {
			qrAssignedUser = *o.AssignedUser
		}
		qAssignedUser := qrAssignedUser
		if qAssignedUser != "" {

			if err := r.SetQueryParam("assigned_user", qAssignedUser); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int32

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt32(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.TagMatchStrategy != nil {

		// query param tag_match_strategy
		var qrTagMatchStrategy string

		if o.TagMatchStrategy != nil {
			qrTagMatchStrategy = *o.TagMatchStrategy
		}
		qTagMatchStrategy := qrTagMatchStrategy
		if qTagMatchStrategy != "" {

			if err := r.SetQueryParam("tag_match_strategy", qTagMatchStrategy); err != nil {
				return err
			}
		}
	}

	if o.Tags != nil {

		// query param tags
		var qrTags string

		if o.Tags != nil {
			qrTags = *o.Tags
		}
		qTags := qrTags
		if qTags != "" {

			if err := r.SetQueryParam("tags", qTags); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
