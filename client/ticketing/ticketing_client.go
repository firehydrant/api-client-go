// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ticketing API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ticketing API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1TicketingPrioritiesID(params *DeleteV1TicketingPrioritiesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TicketingPrioritiesIDOK, error)

	DeleteV1TicketingProjectsTicketingProjectIDFieldMapsMapID(params *DeleteV1TicketingProjectsTicketingProjectIDFieldMapsMapIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TicketingProjectsTicketingProjectIDFieldMapsMapIDNoContent, error)

	DeleteV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigID(params *DeleteV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDOK, error)

	DeleteV1TicketingTicketsTicketID(params *DeleteV1TicketingTicketsTicketIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TicketingTicketsTicketIDNoContent, error)

	GetV1TicketingPriorities(params *GetV1TicketingPrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingPrioritiesOK, error)

	GetV1TicketingPrioritiesID(params *GetV1TicketingPrioritiesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingPrioritiesIDOK, error)

	GetV1TicketingProjects(params *GetV1TicketingProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingProjectsOK, error)

	GetV1TicketingProjectsTicketingProjectIDConfigurationOptions(params *GetV1TicketingProjectsTicketingProjectIDConfigurationOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingProjectsTicketingProjectIDConfigurationOptionsOK, error)

	GetV1TicketingProjectsTicketingProjectIDConfigurationOptionsOptionsForFieldID(params *GetV1TicketingProjectsTicketingProjectIDConfigurationOptionsOptionsForFieldIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingProjectsTicketingProjectIDConfigurationOptionsOptionsForFieldIDOK, error)

	GetV1TicketingProjectsTicketingProjectIDFieldMapsAvailableFields(params *GetV1TicketingProjectsTicketingProjectIDFieldMapsAvailableFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingProjectsTicketingProjectIDFieldMapsAvailableFieldsOK, error)

	GetV1TicketingProjectsTicketingProjectIDFieldMapsMapID(params *GetV1TicketingProjectsTicketingProjectIDFieldMapsMapIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingProjectsTicketingProjectIDFieldMapsMapIDOK, error)

	GetV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigID(params *GetV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDOK, error)

	GetV1TicketingTicketTags(params *GetV1TicketingTicketTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingTicketTagsOK, error)

	GetV1TicketingTickets(params *GetV1TicketingTicketsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingTicketsOK, error)

	GetV1TicketingTicketsTicketID(params *GetV1TicketingTicketsTicketIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingTicketsTicketIDOK, error)

	PatchV1TicketingPrioritiesID(params *PatchV1TicketingPrioritiesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TicketingPrioritiesIDOK, error)

	PatchV1TicketingProjectsTicketingProjectIDFieldMapsMapID(params *PatchV1TicketingProjectsTicketingProjectIDFieldMapsMapIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TicketingProjectsTicketingProjectIDFieldMapsMapIDOK, error)

	PatchV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigID(params *PatchV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDOK, error)

	PatchV1TicketingTicketsTicketID(params *PatchV1TicketingTicketsTicketIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TicketingTicketsTicketIDOK, error)

	PostV1TicketingPriorities(params *PostV1TicketingPrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TicketingPrioritiesCreated, error)

	PostV1TicketingProjectsTicketingProjectIDFieldMaps(params *PostV1TicketingProjectsTicketingProjectIDFieldMapsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TicketingProjectsTicketingProjectIDFieldMapsCreated, error)

	PostV1TicketingProjectsTicketingProjectIDProviderProjectConfigurations(params *PostV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsCreated, error)

	PostV1TicketingTickets(params *PostV1TicketingTicketsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TicketingTicketsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1TicketingPrioritiesID deletes a ticketing priority

Delete a single ticketing priority by ID
*/
func (a *Client) DeleteV1TicketingPrioritiesID(params *DeleteV1TicketingPrioritiesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TicketingPrioritiesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1TicketingPrioritiesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1TicketingPrioritiesId",
		Method:             "DELETE",
		PathPattern:        "/v1/ticketing/priorities/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1TicketingPrioritiesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1TicketingPrioritiesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1TicketingPrioritiesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1TicketingProjectsTicketingProjectIDFieldMapsMapID archives field map for a ticketing project

Archive field map for a ticketing project
*/
func (a *Client) DeleteV1TicketingProjectsTicketingProjectIDFieldMapsMapID(params *DeleteV1TicketingProjectsTicketingProjectIDFieldMapsMapIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TicketingProjectsTicketingProjectIDFieldMapsMapIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1TicketingProjectsTicketingProjectIDFieldMapsMapIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1TicketingProjectsTicketingProjectIdFieldMapsMapId",
		Method:             "DELETE",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/field_maps/{map_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1TicketingProjectsTicketingProjectIDFieldMapsMapIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1TicketingProjectsTicketingProjectIDFieldMapsMapIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1TicketingProjectsTicketingProjectIdFieldMapsMapId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigID archives configuration for a ticketing project

Archive configuration for a ticketing project
*/
func (a *Client) DeleteV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigID(params *DeleteV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1TicketingProjectsTicketingProjectIdProviderProjectConfigurationsConfigId",
		Method:             "DELETE",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/provider_project_configurations/{config_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1TicketingProjectsTicketingProjectIdProviderProjectConfigurationsConfigId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1TicketingTicketsTicketID delete v1 ticketing tickets ticket Id API
*/
func (a *Client) DeleteV1TicketingTicketsTicketID(params *DeleteV1TicketingTicketsTicketIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1TicketingTicketsTicketIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1TicketingTicketsTicketIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1TicketingTicketsTicketId",
		Method:             "DELETE",
		PathPattern:        "/v1/ticketing/tickets/{ticket_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1TicketingTicketsTicketIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1TicketingTicketsTicketIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1TicketingTicketsTicketId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TicketingPriorities lists all ticketing priorities

List all ticketing priorities available to the organization
*/
func (a *Client) GetV1TicketingPriorities(params *GetV1TicketingPrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingPrioritiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TicketingPrioritiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TicketingPriorities",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/priorities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TicketingPrioritiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TicketingPrioritiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TicketingPriorities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TicketingPrioritiesID retrieves a ticketing priority

Retrieve a single ticketing priority by ID
*/
func (a *Client) GetV1TicketingPrioritiesID(params *GetV1TicketingPrioritiesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingPrioritiesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TicketingPrioritiesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TicketingPrioritiesId",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/priorities/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TicketingPrioritiesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TicketingPrioritiesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TicketingPrioritiesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TicketingProjects lists all ticketing projects

List all ticketing projects available to the organization
*/
func (a *Client) GetV1TicketingProjects(params *GetV1TicketingProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TicketingProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TicketingProjects",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TicketingProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TicketingProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TicketingProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TicketingProjectsTicketingProjectIDConfigurationOptions get v1 ticketing projects ticketing project Id configuration options API
*/
func (a *Client) GetV1TicketingProjectsTicketingProjectIDConfigurationOptions(params *GetV1TicketingProjectsTicketingProjectIDConfigurationOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingProjectsTicketingProjectIDConfigurationOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TicketingProjectsTicketingProjectIDConfigurationOptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TicketingProjectsTicketingProjectIdConfigurationOptions",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/configuration_options",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TicketingProjectsTicketingProjectIDConfigurationOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TicketingProjectsTicketingProjectIDConfigurationOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TicketingProjectsTicketingProjectIdConfigurationOptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TicketingProjectsTicketingProjectIDConfigurationOptionsOptionsForFieldID get v1 ticketing projects ticketing project Id configuration options options for field Id API
*/
func (a *Client) GetV1TicketingProjectsTicketingProjectIDConfigurationOptionsOptionsForFieldID(params *GetV1TicketingProjectsTicketingProjectIDConfigurationOptionsOptionsForFieldIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingProjectsTicketingProjectIDConfigurationOptionsOptionsForFieldIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TicketingProjectsTicketingProjectIDConfigurationOptionsOptionsForFieldIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TicketingProjectsTicketingProjectIdConfigurationOptionsOptionsForFieldId",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/configuration_options/options_for/{field_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TicketingProjectsTicketingProjectIDConfigurationOptionsOptionsForFieldIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TicketingProjectsTicketingProjectIDConfigurationOptionsOptionsForFieldIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TicketingProjectsTicketingProjectIdConfigurationOptionsOptionsForFieldId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TicketingProjectsTicketingProjectIDFieldMapsAvailableFields gets the fields that can be mapped for this project

Returns metadata for the fields that are available for field mapping.
*/
func (a *Client) GetV1TicketingProjectsTicketingProjectIDFieldMapsAvailableFields(params *GetV1TicketingProjectsTicketingProjectIDFieldMapsAvailableFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingProjectsTicketingProjectIDFieldMapsAvailableFieldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TicketingProjectsTicketingProjectIDFieldMapsAvailableFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TicketingProjectsTicketingProjectIdFieldMapsAvailableFields",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/field_maps/available_fields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TicketingProjectsTicketingProjectIDFieldMapsAvailableFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TicketingProjectsTicketingProjectIDFieldMapsAvailableFieldsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TicketingProjectsTicketingProjectIdFieldMapsAvailableFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TicketingProjectsTicketingProjectIDFieldMapsMapID retrieves field map for a ticketing project

Retrieve field map for a ticketing project
*/
func (a *Client) GetV1TicketingProjectsTicketingProjectIDFieldMapsMapID(params *GetV1TicketingProjectsTicketingProjectIDFieldMapsMapIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingProjectsTicketingProjectIDFieldMapsMapIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TicketingProjectsTicketingProjectIDFieldMapsMapIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TicketingProjectsTicketingProjectIdFieldMapsMapId",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/field_maps/{map_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TicketingProjectsTicketingProjectIDFieldMapsMapIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TicketingProjectsTicketingProjectIDFieldMapsMapIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TicketingProjectsTicketingProjectIdFieldMapsMapId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigID retrieves configuration for a ticketing project

Retrieve configuration for a ticketing project
*/
func (a *Client) GetV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigID(params *GetV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TicketingProjectsTicketingProjectIdProviderProjectConfigurationsConfigId",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/provider_project_configurations/{config_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TicketingProjectsTicketingProjectIdProviderProjectConfigurationsConfigId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TicketingTicketTags lists all ticket tags

List all of the ticket tags in the organization
*/
func (a *Client) GetV1TicketingTicketTags(params *GetV1TicketingTicketTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingTicketTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TicketingTicketTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TicketingTicketTags",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/ticket_tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TicketingTicketTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TicketingTicketTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TicketingTicketTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TicketingTickets lists all tickets

List all of the tickets that have been added to the organiation
*/
func (a *Client) GetV1TicketingTickets(params *GetV1TicketingTicketsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingTicketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TicketingTicketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TicketingTickets",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/tickets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TicketingTicketsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TicketingTicketsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TicketingTickets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1TicketingTicketsTicketID retrieves a single ticket

Retrieves a single ticket by ID
*/
func (a *Client) GetV1TicketingTicketsTicketID(params *GetV1TicketingTicketsTicketIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1TicketingTicketsTicketIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TicketingTicketsTicketIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1TicketingTicketsTicketId",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/tickets/{ticket_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TicketingTicketsTicketIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TicketingTicketsTicketIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1TicketingTicketsTicketId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1TicketingPrioritiesID updates a ticketing priority

Update a single ticketing priority's attributes
*/
func (a *Client) PatchV1TicketingPrioritiesID(params *PatchV1TicketingPrioritiesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TicketingPrioritiesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1TicketingPrioritiesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1TicketingPrioritiesId",
		Method:             "PATCH",
		PathPattern:        "/v1/ticketing/priorities/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1TicketingPrioritiesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1TicketingPrioritiesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1TicketingPrioritiesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1TicketingProjectsTicketingProjectIDFieldMapsMapID updates field map for a ticketing project

Update field map for a ticketing project
*/
func (a *Client) PatchV1TicketingProjectsTicketingProjectIDFieldMapsMapID(params *PatchV1TicketingProjectsTicketingProjectIDFieldMapsMapIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TicketingProjectsTicketingProjectIDFieldMapsMapIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1TicketingProjectsTicketingProjectIDFieldMapsMapIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1TicketingProjectsTicketingProjectIdFieldMapsMapId",
		Method:             "PATCH",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/field_maps/{map_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1TicketingProjectsTicketingProjectIDFieldMapsMapIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1TicketingProjectsTicketingProjectIDFieldMapsMapIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1TicketingProjectsTicketingProjectIdFieldMapsMapId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigID updates configuration for a ticketing project

Update configuration for a ticketing project
*/
func (a *Client) PatchV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigID(params *PatchV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1TicketingProjectsTicketingProjectIdProviderProjectConfigurationsConfigId",
		Method:             "PATCH",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/provider_project_configurations/{config_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsConfigIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1TicketingProjectsTicketingProjectIdProviderProjectConfigurationsConfigId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1TicketingTicketsTicketID updates a ticket

Update a ticket's attributes
*/
func (a *Client) PatchV1TicketingTicketsTicketID(params *PatchV1TicketingTicketsTicketIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1TicketingTicketsTicketIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1TicketingTicketsTicketIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1TicketingTicketsTicketId",
		Method:             "PATCH",
		PathPattern:        "/v1/ticketing/tickets/{ticket_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1TicketingTicketsTicketIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1TicketingTicketsTicketIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1TicketingTicketsTicketId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1TicketingPriorities creates a ticketing priority

Create a single ticketing priority
*/
func (a *Client) PostV1TicketingPriorities(params *PostV1TicketingPrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TicketingPrioritiesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1TicketingPrioritiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1TicketingPriorities",
		Method:             "POST",
		PathPattern:        "/v1/ticketing/priorities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1TicketingPrioritiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1TicketingPrioritiesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1TicketingPriorities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1TicketingProjectsTicketingProjectIDFieldMaps creates field map for a ticketing project

Creates field map for a ticketing project
*/
func (a *Client) PostV1TicketingProjectsTicketingProjectIDFieldMaps(params *PostV1TicketingProjectsTicketingProjectIDFieldMapsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TicketingProjectsTicketingProjectIDFieldMapsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1TicketingProjectsTicketingProjectIDFieldMapsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1TicketingProjectsTicketingProjectIdFieldMaps",
		Method:             "POST",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/field_maps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1TicketingProjectsTicketingProjectIDFieldMapsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1TicketingProjectsTicketingProjectIDFieldMapsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1TicketingProjectsTicketingProjectIdFieldMaps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1TicketingProjectsTicketingProjectIDProviderProjectConfigurations creates configuration for a ticketing project

Creates configuration for a ticketing project
*/
func (a *Client) PostV1TicketingProjectsTicketingProjectIDProviderProjectConfigurations(params *PostV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1TicketingProjectsTicketingProjectIdProviderProjectConfigurations",
		Method:             "POST",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/provider_project_configurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1TicketingProjectsTicketingProjectIDProviderProjectConfigurationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1TicketingProjectsTicketingProjectIdProviderProjectConfigurations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1TicketingTickets creates a ticket

Creates a ticket for a project
*/
func (a *Client) PostV1TicketingTickets(params *PostV1TicketingTicketsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1TicketingTicketsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1TicketingTicketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1TicketingTickets",
		Method:             "POST",
		PathPattern:        "/v1/ticketing/tickets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1TicketingTicketsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1TicketingTicketsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1TicketingTickets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
