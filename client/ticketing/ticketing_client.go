// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ticketing API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ticketing API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateInboundFieldMap(params *CreateInboundFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInboundFieldMapCreated, error)

	CreateTicket(params *CreateTicketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTicketCreated, error)

	CreateTicketingFieldMap(params *CreateTicketingFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTicketingFieldMapCreated, error)

	CreateTicketingPriority(params *CreateTicketingPriorityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTicketingPriorityCreated, error)

	CreateTicketingProjectConfig(params *CreateTicketingProjectConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTicketingProjectConfigCreated, error)

	DeleteInboundFieldMap(params *DeleteInboundFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInboundFieldMapNoContent, error)

	DeleteTicket(params *DeleteTicketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTicketNoContent, error)

	DeleteTicketingFieldMap(params *DeleteTicketingFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTicketingFieldMapNoContent, error)

	DeleteTicketingPriority(params *DeleteTicketingPriorityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTicketingPriorityOK, error)

	DeleteTicketingProjectConfig(params *DeleteTicketingProjectConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTicketingProjectConfigOK, error)

	GetConfigurationOptions(params *GetConfigurationOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConfigurationOptionsOK, error)

	GetInboundFieldMap(params *GetInboundFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInboundFieldMapOK, error)

	GetOptionsForField(params *GetOptionsForFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOptionsForFieldOK, error)

	GetTicket(params *GetTicketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTicketOK, error)

	GetTicketingFieldMap(params *GetTicketingFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTicketingFieldMapOK, error)

	GetTicketingPriority(params *GetTicketingPriorityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTicketingPriorityOK, error)

	GetTicketingProject(params *GetTicketingProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTicketingProjectOK, error)

	GetTicketingProjectConfig(params *GetTicketingProjectConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTicketingProjectConfigOK, error)

	ListAvailableInboundFieldMaps(params *ListAvailableInboundFieldMapsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAvailableInboundFieldMapsOK, error)

	ListAvailableTicketingFieldMaps(params *ListAvailableTicketingFieldMapsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAvailableTicketingFieldMapsOK, error)

	ListInboundFieldMaps(params *ListInboundFieldMapsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListInboundFieldMapsOK, error)

	ListTicketTags(params *ListTicketTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTicketTagsOK, error)

	ListTicketingPriorities(params *ListTicketingPrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTicketingPrioritiesOK, error)

	ListTicketingProjects(params *ListTicketingProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTicketingProjectsOK, error)

	ListTickets(params *ListTicketsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTicketsOK, error)

	UpdateInboundFieldMap(params *UpdateInboundFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateInboundFieldMapOK, error)

	UpdateTicket(params *UpdateTicketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTicketOK, error)

	UpdateTicketingFieldMap(params *UpdateTicketingFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTicketingFieldMapOK, error)

	UpdateTicketingPriority(params *UpdateTicketingPriorityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTicketingPriorityOK, error)

	UpdateTicketingProjectConfig(params *UpdateTicketingProjectConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTicketingProjectConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateInboundFieldMap creates inbound field map for a ticketing project

Creates inbound field map for a ticketing project
*/
func (a *Client) CreateInboundFieldMap(params *CreateInboundFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInboundFieldMapCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInboundFieldMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_inbound_field_map",
		Method:             "POST",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/inbound_field_maps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInboundFieldMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInboundFieldMapCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_inbound_field_map: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTicket creates a ticket

Creates a ticket for a project
*/
func (a *Client) CreateTicket(params *CreateTicketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTicketCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTicketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_ticket",
		Method:             "POST",
		PathPattern:        "/v1/ticketing/tickets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTicketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTicketCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_ticket: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTicketingFieldMap creates a field mapping for a ticketing project

Creates field map for a ticketing project
*/
func (a *Client) CreateTicketingFieldMap(params *CreateTicketingFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTicketingFieldMapCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTicketingFieldMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_ticketing_field_map",
		Method:             "POST",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/field_maps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTicketingFieldMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTicketingFieldMapCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_ticketing_field_map: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTicketingPriority creates a ticketing priority

Create a single ticketing priority
*/
func (a *Client) CreateTicketingPriority(params *CreateTicketingPriorityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTicketingPriorityCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTicketingPriorityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_ticketing_priority",
		Method:             "POST",
		PathPattern:        "/v1/ticketing/priorities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTicketingPriorityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTicketingPriorityCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_ticketing_priority: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTicketingProjectConfig creates a ticketing project configuration

Creates configuration for a ticketing project
*/
func (a *Client) CreateTicketingProjectConfig(params *CreateTicketingProjectConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTicketingProjectConfigCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTicketingProjectConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_ticketing_project_config",
		Method:             "POST",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/provider_project_configurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTicketingProjectConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTicketingProjectConfigCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_ticketing_project_config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteInboundFieldMap archives inbound field map for a ticketing project

Archive inbound field map for a ticketing project
*/
func (a *Client) DeleteInboundFieldMap(params *DeleteInboundFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInboundFieldMapNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInboundFieldMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_inbound_field_map",
		Method:             "DELETE",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/inbound_field_maps/{map_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInboundFieldMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInboundFieldMapNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_inbound_field_map: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTicket archives a ticket

Archive a ticket
*/
func (a *Client) DeleteTicket(params *DeleteTicketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTicketNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTicketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_ticket",
		Method:             "DELETE",
		PathPattern:        "/v1/ticketing/tickets/{ticket_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTicketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTicketNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_ticket: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTicketingFieldMap archives a field map for a ticketing project

Archive field map for a ticketing project
*/
func (a *Client) DeleteTicketingFieldMap(params *DeleteTicketingFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTicketingFieldMapNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTicketingFieldMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_ticketing_field_map",
		Method:             "DELETE",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/field_maps/{map_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTicketingFieldMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTicketingFieldMapNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_ticketing_field_map: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTicketingPriority deletes a ticketing priority

Delete a single ticketing priority by ID
*/
func (a *Client) DeleteTicketingPriority(params *DeleteTicketingPriorityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTicketingPriorityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTicketingPriorityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_ticketing_priority",
		Method:             "DELETE",
		PathPattern:        "/v1/ticketing/priorities/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTicketingPriorityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTicketingPriorityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_ticketing_priority: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTicketingProjectConfig archives a ticketing project configuration

Archive configuration for a ticketing project
*/
func (a *Client) DeleteTicketingProjectConfig(params *DeleteTicketingProjectConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTicketingProjectConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTicketingProjectConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_ticketing_project_config",
		Method:             "DELETE",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/provider_project_configurations/{config_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTicketingProjectConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTicketingProjectConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_ticketing_project_config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConfigurationOptions lists configuration options for a ticketing project

List all configuration options for a ticketing project
*/
func (a *Client) GetConfigurationOptions(params *GetConfigurationOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConfigurationOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigurationOptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_configuration_options",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/configuration_options",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConfigurationOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigurationOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_configuration_options: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInboundFieldMap gets inbound field map for a ticketing project

Retrieve inbound field map for a ticketing project
*/
func (a *Client) GetInboundFieldMap(params *GetInboundFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInboundFieldMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInboundFieldMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_inbound_field_map",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/inbound_field_maps/{map_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInboundFieldMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInboundFieldMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_inbound_field_map: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOptionsForField lists a field s configuration options for a ticketing project

List a field's configuration options for a ticketing project
*/
func (a *Client) GetOptionsForField(params *GetOptionsForFieldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOptionsForFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOptionsForFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_options_for_field",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/configuration_options/options_for/{field_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOptionsForFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOptionsForFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_options_for_field: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTicket gets a ticket

Retrieves a single ticket by ID
*/
func (a *Client) GetTicket(params *GetTicketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTicketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTicketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_ticket",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/tickets/{ticket_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTicketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTicketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_ticket: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTicketingFieldMap gets a field map for a ticketing project

Retrieve field map for a ticketing project
*/
func (a *Client) GetTicketingFieldMap(params *GetTicketingFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTicketingFieldMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTicketingFieldMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_ticketing_field_map",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/field_maps/{map_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTicketingFieldMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTicketingFieldMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_ticketing_field_map: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTicketingPriority gets a ticketing priority

Retrieve a single ticketing priority by ID
*/
func (a *Client) GetTicketingPriority(params *GetTicketingPriorityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTicketingPriorityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTicketingPriorityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_ticketing_priority",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/priorities/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTicketingPriorityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTicketingPriorityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_ticketing_priority: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTicketingProject gets a ticketing project

Retrieve a single ticketing project by ID
*/
func (a *Client) GetTicketingProject(params *GetTicketingProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTicketingProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTicketingProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_ticketing_project",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTicketingProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTicketingProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_ticketing_project: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTicketingProjectConfig gets configuration for a ticketing project

Retrieve configuration for a ticketing project
*/
func (a *Client) GetTicketingProjectConfig(params *GetTicketingProjectConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTicketingProjectConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTicketingProjectConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_ticketing_project_config",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/provider_project_configurations/{config_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTicketingProjectConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTicketingProjectConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_ticketing_project_config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAvailableInboundFieldMaps lists available fields for ticket field mapping

Returns metadata for the fields that are available for inbound field mapping.
*/
func (a *Client) ListAvailableInboundFieldMaps(params *ListAvailableInboundFieldMapsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAvailableInboundFieldMapsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAvailableInboundFieldMapsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_available_inbound_field_maps",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/inbound_field_maps/available_fields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAvailableInboundFieldMapsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAvailableInboundFieldMapsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_available_inbound_field_maps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAvailableTicketingFieldMaps lists available fields for ticket field mapping

Returns metadata for the fields that are available for field mapping.
*/
func (a *Client) ListAvailableTicketingFieldMaps(params *ListAvailableTicketingFieldMapsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAvailableTicketingFieldMapsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAvailableTicketingFieldMapsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_available_ticketing_field_maps",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/field_maps/available_fields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAvailableTicketingFieldMapsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAvailableTicketingFieldMapsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_available_ticketing_field_maps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListInboundFieldMaps lists inbound field maps for a ticketing project

List all inbound field maps for a ticketing project
*/
func (a *Client) ListInboundFieldMaps(params *ListInboundFieldMapsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListInboundFieldMapsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInboundFieldMapsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_inbound_field_maps",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/inbound_field_maps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListInboundFieldMapsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListInboundFieldMapsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_inbound_field_maps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTicketTags lists ticket tags

List all of the ticket tags in the organization
*/
func (a *Client) ListTicketTags(params *ListTicketTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTicketTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTicketTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_ticket_tags",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/ticket_tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTicketTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTicketTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_ticket_tags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTicketingPriorities lists ticketing priorities

List all ticketing priorities available to the organization
*/
func (a *Client) ListTicketingPriorities(params *ListTicketingPrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTicketingPrioritiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTicketingPrioritiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_ticketing_priorities",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/priorities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTicketingPrioritiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTicketingPrioritiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_ticketing_priorities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTicketingProjects lists ticketing projects

List all ticketing projects available to the organization
*/
func (a *Client) ListTicketingProjects(params *ListTicketingProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTicketingProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTicketingProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_ticketing_projects",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTicketingProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTicketingProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_ticketing_projects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTickets lists tickets

List all of the tickets that have been added to the organiation
*/
func (a *Client) ListTickets(params *ListTicketsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTicketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTicketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_tickets",
		Method:             "GET",
		PathPattern:        "/v1/ticketing/tickets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTicketsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTicketsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_tickets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateInboundFieldMap updates inbound field map for a ticketing project

Update inbound field map for a ticketing project
*/
func (a *Client) UpdateInboundFieldMap(params *UpdateInboundFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateInboundFieldMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInboundFieldMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_inbound_field_map",
		Method:             "PUT",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/inbound_field_maps/{map_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInboundFieldMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInboundFieldMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_inbound_field_map: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTicket updates a ticket

Update a ticket's attributes
*/
func (a *Client) UpdateTicket(params *UpdateTicketParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTicketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTicketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_ticket",
		Method:             "PATCH",
		PathPattern:        "/v1/ticketing/tickets/{ticket_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTicketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTicketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_ticket: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTicketingFieldMap updates a field map for a ticketing project

Update field map for a ticketing project
*/
func (a *Client) UpdateTicketingFieldMap(params *UpdateTicketingFieldMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTicketingFieldMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTicketingFieldMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_ticketing_field_map",
		Method:             "PATCH",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/field_maps/{map_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTicketingFieldMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTicketingFieldMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_ticketing_field_map: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTicketingPriority updates a ticketing priority

Update a single ticketing priority's attributes
*/
func (a *Client) UpdateTicketingPriority(params *UpdateTicketingPriorityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTicketingPriorityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTicketingPriorityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_ticketing_priority",
		Method:             "PATCH",
		PathPattern:        "/v1/ticketing/priorities/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTicketingPriorityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTicketingPriorityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_ticketing_priority: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTicketingProjectConfig updates configuration for a ticketing project

Update configuration for a ticketing project
*/
func (a *Client) UpdateTicketingProjectConfig(params *UpdateTicketingProjectConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTicketingProjectConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTicketingProjectConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_ticketing_project_config",
		Method:             "PATCH",
		PathPattern:        "/v1/ticketing/projects/{ticketing_project_id}/provider_project_configurations/{config_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTicketingProjectConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTicketingProjectConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_ticketing_project_config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
