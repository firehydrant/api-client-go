// Code generated by go-swagger; DO NOT EDIT.

package webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new webhooks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for webhooks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1WebhooksWebhookID(params *DeleteV1WebhooksWebhookIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1WebhooksWebhookIDNoContent, error)

	GetV1Webhooks(params *GetV1WebhooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WebhooksOK, error)

	GetV1WebhooksWebhookID(params *GetV1WebhooksWebhookIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WebhooksWebhookIDOK, error)

	GetV1WebhooksWebhookIDDeliveries(params *GetV1WebhooksWebhookIDDeliveriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WebhooksWebhookIDDeliveriesOK, error)

	PatchV1WebhooksWebhookID(params *PatchV1WebhooksWebhookIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1WebhooksWebhookIDOK, error)

	PostV1Webhooks(params *PostV1WebhooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1WebhooksCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1WebhooksWebhookID deletes a specific webhook

Delete a specific webhook
*/
func (a *Client) DeleteV1WebhooksWebhookID(params *DeleteV1WebhooksWebhookIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1WebhooksWebhookIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1WebhooksWebhookIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1WebhooksWebhookId",
		Method:             "DELETE",
		PathPattern:        "/v1/webhooks/{webhook_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1WebhooksWebhookIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1WebhooksWebhookIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1WebhooksWebhookId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Webhooks lists webhooks

Lists webhooks
*/
func (a *Client) GetV1Webhooks(params *GetV1WebhooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WebhooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1WebhooksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1Webhooks",
		Method:             "GET",
		PathPattern:        "/v1/webhooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1WebhooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1WebhooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1Webhooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1WebhooksWebhookID retrieves a specific webhook

Retrieve a specific webhook
*/
func (a *Client) GetV1WebhooksWebhookID(params *GetV1WebhooksWebhookIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WebhooksWebhookIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1WebhooksWebhookIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1WebhooksWebhookId",
		Method:             "GET",
		PathPattern:        "/v1/webhooks/{webhook_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1WebhooksWebhookIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1WebhooksWebhookIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1WebhooksWebhookId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1WebhooksWebhookIDDeliveries get v1 webhooks webhook Id deliveries API
*/
func (a *Client) GetV1WebhooksWebhookIDDeliveries(params *GetV1WebhooksWebhookIDDeliveriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1WebhooksWebhookIDDeliveriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1WebhooksWebhookIDDeliveriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1WebhooksWebhookIdDeliveries",
		Method:             "GET",
		PathPattern:        "/v1/webhooks/{webhook_id}/deliveries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1WebhooksWebhookIDDeliveriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1WebhooksWebhookIDDeliveriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1WebhooksWebhookIdDeliveries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1WebhooksWebhookID updates a specific webhook

Update a specific webhook
*/
func (a *Client) PatchV1WebhooksWebhookID(params *PatchV1WebhooksWebhookIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1WebhooksWebhookIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1WebhooksWebhookIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1WebhooksWebhookId",
		Method:             "PATCH",
		PathPattern:        "/v1/webhooks/{webhook_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1WebhooksWebhookIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1WebhooksWebhookIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1WebhooksWebhookId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1Webhooks creates webhook

Create a new webhook
*/
func (a *Client) PostV1Webhooks(params *PostV1WebhooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1WebhooksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1WebhooksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1Webhooks",
		Method:             "POST",
		PathPattern:        "/v1/webhooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1WebhooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1WebhooksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1Webhooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
