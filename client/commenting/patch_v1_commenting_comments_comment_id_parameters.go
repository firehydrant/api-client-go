// Code generated by go-swagger; DO NOT EDIT.

package commenting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/firehydrant/api-client-go/models"
)

// NewPatchV1CommentingCommentsCommentIDParams creates a new PatchV1CommentingCommentsCommentIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchV1CommentingCommentsCommentIDParams() *PatchV1CommentingCommentsCommentIDParams {
	return &PatchV1CommentingCommentsCommentIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchV1CommentingCommentsCommentIDParamsWithTimeout creates a new PatchV1CommentingCommentsCommentIDParams object
// with the ability to set a timeout on a request.
func NewPatchV1CommentingCommentsCommentIDParamsWithTimeout(timeout time.Duration) *PatchV1CommentingCommentsCommentIDParams {
	return &PatchV1CommentingCommentsCommentIDParams{
		timeout: timeout,
	}
}

// NewPatchV1CommentingCommentsCommentIDParamsWithContext creates a new PatchV1CommentingCommentsCommentIDParams object
// with the ability to set a context for a request.
func NewPatchV1CommentingCommentsCommentIDParamsWithContext(ctx context.Context) *PatchV1CommentingCommentsCommentIDParams {
	return &PatchV1CommentingCommentsCommentIDParams{
		Context: ctx,
	}
}

// NewPatchV1CommentingCommentsCommentIDParamsWithHTTPClient creates a new PatchV1CommentingCommentsCommentIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchV1CommentingCommentsCommentIDParamsWithHTTPClient(client *http.Client) *PatchV1CommentingCommentsCommentIDParams {
	return &PatchV1CommentingCommentsCommentIDParams{
		HTTPClient: client,
	}
}

/*
PatchV1CommentingCommentsCommentIDParams contains all the parameters to send to the API endpoint

	for the patch v1 commenting comments comment Id operation.

	Typically these are written to a http.Request.
*/
type PatchV1CommentingCommentsCommentIDParams struct {

	// V1CommentingComments.
	V1CommentingComments *models.PatchV1CommentingComments

	// CommentID.
	//
	// Format: int32
	CommentID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch v1 commenting comments comment Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchV1CommentingCommentsCommentIDParams) WithDefaults() *PatchV1CommentingCommentsCommentIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch v1 commenting comments comment Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchV1CommentingCommentsCommentIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the patch v1 commenting comments comment Id params
func (o *PatchV1CommentingCommentsCommentIDParams) WithTimeout(timeout time.Duration) *PatchV1CommentingCommentsCommentIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch v1 commenting comments comment Id params
func (o *PatchV1CommentingCommentsCommentIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch v1 commenting comments comment Id params
func (o *PatchV1CommentingCommentsCommentIDParams) WithContext(ctx context.Context) *PatchV1CommentingCommentsCommentIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch v1 commenting comments comment Id params
func (o *PatchV1CommentingCommentsCommentIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch v1 commenting comments comment Id params
func (o *PatchV1CommentingCommentsCommentIDParams) WithHTTPClient(client *http.Client) *PatchV1CommentingCommentsCommentIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch v1 commenting comments comment Id params
func (o *PatchV1CommentingCommentsCommentIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithV1CommentingComments adds the v1CommentingComments to the patch v1 commenting comments comment Id params
func (o *PatchV1CommentingCommentsCommentIDParams) WithV1CommentingComments(v1CommentingComments *models.PatchV1CommentingComments) *PatchV1CommentingCommentsCommentIDParams {
	o.SetV1CommentingComments(v1CommentingComments)
	return o
}

// SetV1CommentingComments adds the v1CommentingComments to the patch v1 commenting comments comment Id params
func (o *PatchV1CommentingCommentsCommentIDParams) SetV1CommentingComments(v1CommentingComments *models.PatchV1CommentingComments) {
	o.V1CommentingComments = v1CommentingComments
}

// WithCommentID adds the commentID to the patch v1 commenting comments comment Id params
func (o *PatchV1CommentingCommentsCommentIDParams) WithCommentID(commentID int32) *PatchV1CommentingCommentsCommentIDParams {
	o.SetCommentID(commentID)
	return o
}

// SetCommentID adds the commentId to the patch v1 commenting comments comment Id params
func (o *PatchV1CommentingCommentsCommentIDParams) SetCommentID(commentID int32) {
	o.CommentID = commentID
}

// WriteToRequest writes these params to a swagger request
func (o *PatchV1CommentingCommentsCommentIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.V1CommentingComments != nil {
		if err := r.SetBodyParam(o.V1CommentingComments); err != nil {
			return err
		}
	}

	// path param comment_id
	if err := r.SetPathParam("comment_id", swag.FormatInt32(o.CommentID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
