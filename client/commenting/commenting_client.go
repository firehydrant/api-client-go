// Code generated by go-swagger; DO NOT EDIT.

package commenting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new commenting API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for commenting API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1CommentingCommentsCommentID(params *DeleteV1CommentingCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1CommentingCommentsCommentIDNoContent, error)

	DeleteV1CommentingCommentsCommentIDReactionsReactionID(params *DeleteV1CommentingCommentsCommentIDReactionsReactionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1CommentingCommentsCommentIDReactionsReactionIDNoContent, error)

	GetV1CommentingComments(params *GetV1CommentingCommentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1CommentingCommentsOK, error)

	GetV1CommentingCommentsCommentID(params *GetV1CommentingCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1CommentingCommentsCommentIDOK, error)

	GetV1CommentingCommentsCommentIDReactions(params *GetV1CommentingCommentsCommentIDReactionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1CommentingCommentsCommentIDReactionsOK, error)

	PatchV1CommentingCommentsCommentID(params *PatchV1CommentingCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1CommentingCommentsCommentIDOK, error)

	PostV1CommentingComments(params *PostV1CommentingCommentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1CommentingCommentsCreated, error)

	PostV1CommentingCommentsCommentIDReactions(params *PostV1CommentingCommentsCommentIDReactionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1CommentingCommentsCommentIDReactionsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1CommentingCommentsCommentID archives a comment

Archive a comment
*/
func (a *Client) DeleteV1CommentingCommentsCommentID(params *DeleteV1CommentingCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1CommentingCommentsCommentIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1CommentingCommentsCommentIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1CommentingCommentsCommentId",
		Method:             "DELETE",
		PathPattern:        "/v1/commenting/comments/{comment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1CommentingCommentsCommentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1CommentingCommentsCommentIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1CommentingCommentsCommentId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1CommentingCommentsCommentIDReactionsReactionID archives a reaction

Archive a reaction
*/
func (a *Client) DeleteV1CommentingCommentsCommentIDReactionsReactionID(params *DeleteV1CommentingCommentsCommentIDReactionsReactionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1CommentingCommentsCommentIDReactionsReactionIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1CommentingCommentsCommentIDReactionsReactionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1CommentingCommentsCommentIdReactionsReactionId",
		Method:             "DELETE",
		PathPattern:        "/v1/commenting/comments/{comment_id}/reactions/{reaction_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1CommentingCommentsCommentIDReactionsReactionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1CommentingCommentsCommentIDReactionsReactionIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1CommentingCommentsCommentIdReactionsReactionId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1CommentingComments lists all comments

List all of the comments that have been added to the organization
*/
func (a *Client) GetV1CommentingComments(params *GetV1CommentingCommentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1CommentingCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1CommentingCommentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1CommentingComments",
		Method:             "GET",
		PathPattern:        "/v1/commenting/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1CommentingCommentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1CommentingCommentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1CommentingComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1CommentingCommentsCommentID retrieves a single comment

Retrieves a single comment by ID
*/
func (a *Client) GetV1CommentingCommentsCommentID(params *GetV1CommentingCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1CommentingCommentsCommentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1CommentingCommentsCommentIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1CommentingCommentsCommentId",
		Method:             "GET",
		PathPattern:        "/v1/commenting/comments/{comment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1CommentingCommentsCommentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1CommentingCommentsCommentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1CommentingCommentsCommentId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1CommentingCommentsCommentIDReactions lists all reactions for a comment

List all of the reactions that have been added to a comment
*/
func (a *Client) GetV1CommentingCommentsCommentIDReactions(params *GetV1CommentingCommentsCommentIDReactionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1CommentingCommentsCommentIDReactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1CommentingCommentsCommentIDReactionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1CommentingCommentsCommentIdReactions",
		Method:             "GET",
		PathPattern:        "/v1/commenting/comments/{comment_id}/reactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1CommentingCommentsCommentIDReactionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1CommentingCommentsCommentIDReactionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1CommentingCommentsCommentIdReactions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1CommentingCommentsCommentID updates a comment

Update a comment's attributes
*/
func (a *Client) PatchV1CommentingCommentsCommentID(params *PatchV1CommentingCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1CommentingCommentsCommentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1CommentingCommentsCommentIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1CommentingCommentsCommentId",
		Method:             "PATCH",
		PathPattern:        "/v1/commenting/comments/{comment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1CommentingCommentsCommentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1CommentingCommentsCommentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1CommentingCommentsCommentId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1CommentingComments creates a comment

Creates a comment for a project
*/
func (a *Client) PostV1CommentingComments(params *PostV1CommentingCommentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1CommentingCommentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1CommentingCommentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1CommentingComments",
		Method:             "POST",
		PathPattern:        "/v1/commenting/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1CommentingCommentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1CommentingCommentsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1CommentingComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1CommentingCommentsCommentIDReactions creates a reaction

Create a reaction on a comment
*/
func (a *Client) PostV1CommentingCommentsCommentIDReactions(params *PostV1CommentingCommentsCommentIDReactionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1CommentingCommentsCommentIDReactionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1CommentingCommentsCommentIDReactionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1CommentingCommentsCommentIdReactions",
		Method:             "POST",
		PathPattern:        "/v1/commenting/comments/{comment_id}/reactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1CommentingCommentsCommentIDReactionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1CommentingCommentsCommentIDReactionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1CommentingCommentsCommentIdReactions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
