// Code generated by go-swagger; DO NOT EDIT.

package runbook_audits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetV1RunbookAuditsParams creates a new GetV1RunbookAuditsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetV1RunbookAuditsParams() *GetV1RunbookAuditsParams {
	return &GetV1RunbookAuditsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetV1RunbookAuditsParamsWithTimeout creates a new GetV1RunbookAuditsParams object
// with the ability to set a timeout on a request.
func NewGetV1RunbookAuditsParamsWithTimeout(timeout time.Duration) *GetV1RunbookAuditsParams {
	return &GetV1RunbookAuditsParams{
		timeout: timeout,
	}
}

// NewGetV1RunbookAuditsParamsWithContext creates a new GetV1RunbookAuditsParams object
// with the ability to set a context for a request.
func NewGetV1RunbookAuditsParamsWithContext(ctx context.Context) *GetV1RunbookAuditsParams {
	return &GetV1RunbookAuditsParams{
		Context: ctx,
	}
}

// NewGetV1RunbookAuditsParamsWithHTTPClient creates a new GetV1RunbookAuditsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetV1RunbookAuditsParamsWithHTTPClient(client *http.Client) *GetV1RunbookAuditsParams {
	return &GetV1RunbookAuditsParams{
		HTTPClient: client,
	}
}

/*
GetV1RunbookAuditsParams contains all the parameters to send to the API endpoint

	for the get v1 runbook audits operation.

	Typically these are written to a http.Request.
*/
type GetV1RunbookAuditsParams struct {

	/* AuditableType.

	   A query to filter audits by type
	*/
	AuditableType []string

	// Page.
	//
	// Format: int32
	Page *int32

	// PerPage.
	//
	// Format: int32
	PerPage *int32

	/* Sort.

	   A query to sort audits by their created_at timestamp. Options are 'asc' or 'desc'
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get v1 runbook audits params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1RunbookAuditsParams) WithDefaults() *GetV1RunbookAuditsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get v1 runbook audits params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1RunbookAuditsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get v1 runbook audits params
func (o *GetV1RunbookAuditsParams) WithTimeout(timeout time.Duration) *GetV1RunbookAuditsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v1 runbook audits params
func (o *GetV1RunbookAuditsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v1 runbook audits params
func (o *GetV1RunbookAuditsParams) WithContext(ctx context.Context) *GetV1RunbookAuditsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v1 runbook audits params
func (o *GetV1RunbookAuditsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v1 runbook audits params
func (o *GetV1RunbookAuditsParams) WithHTTPClient(client *http.Client) *GetV1RunbookAuditsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v1 runbook audits params
func (o *GetV1RunbookAuditsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuditableType adds the auditableType to the get v1 runbook audits params
func (o *GetV1RunbookAuditsParams) WithAuditableType(auditableType []string) *GetV1RunbookAuditsParams {
	o.SetAuditableType(auditableType)
	return o
}

// SetAuditableType adds the auditableType to the get v1 runbook audits params
func (o *GetV1RunbookAuditsParams) SetAuditableType(auditableType []string) {
	o.AuditableType = auditableType
}

// WithPage adds the page to the get v1 runbook audits params
func (o *GetV1RunbookAuditsParams) WithPage(page *int32) *GetV1RunbookAuditsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get v1 runbook audits params
func (o *GetV1RunbookAuditsParams) SetPage(page *int32) {
	o.Page = page
}

// WithPerPage adds the perPage to the get v1 runbook audits params
func (o *GetV1RunbookAuditsParams) WithPerPage(perPage *int32) *GetV1RunbookAuditsParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get v1 runbook audits params
func (o *GetV1RunbookAuditsParams) SetPerPage(perPage *int32) {
	o.PerPage = perPage
}

// WithSort adds the sort to the get v1 runbook audits params
func (o *GetV1RunbookAuditsParams) WithSort(sort *string) *GetV1RunbookAuditsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get v1 runbook audits params
func (o *GetV1RunbookAuditsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *GetV1RunbookAuditsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AuditableType != nil {

		// binding items for auditable_type
		joinedAuditableType := o.bindParamAuditableType(reg)

		// query array param auditable_type
		if err := r.SetQueryParam("auditable_type", joinedAuditableType...); err != nil {
			return err
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int32

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt32(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetV1RunbookAudits binds the parameter auditable_type
func (o *GetV1RunbookAuditsParams) bindParamAuditableType(formats strfmt.Registry) []string {
	auditableTypeIR := o.AuditableType

	var auditableTypeIC []string
	for _, auditableTypeIIR := range auditableTypeIR { // explode []string

		auditableTypeIIV := auditableTypeIIR // string as string
		auditableTypeIC = append(auditableTypeIC, auditableTypeIIV)
	}

	// items.CollectionFormat: ""
	auditableTypeIS := swag.JoinByFormat(auditableTypeIC, "")

	return auditableTypeIS
}
